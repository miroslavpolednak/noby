<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CIS.Infrastructure.WebApi</name>
    </assembly>
    <members>
        <member name="T:CIS.Infrastructure.WebApi.AssemblyDoc">
            <summary>
            Loggování a telemetrie
            </summary>
        </member>
        <member name="T:CIS.Infrastructure.WebApi.NamespaceDoc">
            <summary>
            Loggování a telemetrie
            </summary>
        </member>
        <member name="T:CIS.Infrastructure.WebApi.Middleware.HttpOptionsMiddleware">
            <summary>
            Pro HTTP metodu OPTIONS vrací 204 + patřičné hlavičky dle RFC 7231
            </summary>
        </member>
        <member name="M:CIS.Infrastructure.WebApi.Middleware.HttpOptionsMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            Pro HTTP metodu OPTIONS vrací 204 + patřičné hlavičky dle RFC 7231
            </summary>
        </member>
        <member name="M:CIS.Infrastructure.WebApi.CisWebApiCors.AddCisWebApiCors(Microsoft.AspNetCore.Builder.WebApplicationBuilder)">
            <param name="builder"></param>
            <returns>True if CORS is enabled an</returns>
        </member>
        <member name="M:CIS.Infrastructure.WebApi.Swagger.NewLineReplacementFilter.NewLineReplacementRegex">
            <remarks>
            Pattern:<br/>
            <code>&lt;br\\s?\\/?&gt;\\r\\n|\\r\\n</code><br/>
            Explanation:<br/>
            <code>
            ○ Match with 2 alternative expressions, atomically.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match the string "&lt;br".<br/>
                    ○ Match a whitespace character atomically, optionally.<br/>
                    ○ Match '/' atomically, optionally.<br/>
                    ○ Match the string "&gt;\r\n".<br/>
                ○ Match the string "\r\n".<br/>
            </code>
            </remarks>
        </member>
        <member name="P:CIS.Infrastructure.WebApi.Types.PaginationRequest.RecordOffset">
            <summary>
            Offset (index, start=0) zaznamu, od ktereho se ma zacit s nacitanim
            </summary>
            <example>0</example>
        </member>
        <member name="P:CIS.Infrastructure.WebApi.Types.PaginationRequest.PageSize">
            <summary>
            Pocet zaznamu na jedne strance
            </summary>
            <example>10</example>
        </member>
        <member name="P:CIS.Infrastructure.WebApi.Types.PaginationRequest.Sorting">
            <summary>
            [optional] Nastaveni razeni
            </summary>
        </member>
        <member name="P:CIS.Infrastructure.WebApi.Types.PaginationRequest.TypeOfSortingField">
            <summary>
            Pro interoperabilitu s gRPC typem PaginationRequest
            </summary>
        </member>
        <member name="M:CIS.Infrastructure.WebApi.Types.PaginationRequest.GetSorting">
            <summary>
            Pro interoperabilitu s gRPC typem PaginationRequest
            </summary>
        </member>
        <member name="T:CIS.Infrastructure.WebApi.Validation.NullObjectModelValidator">
            <summary>
            Validator ModelState-u, ktery ignoruje vychozi attribute-based modelState validace.
            Pouzivam ho, kdyz mam FluentValidation a chci uplne ignorovat vychozi MVC chovani.
            </summary>
            <remarks>
            builder.Services.AddSingleton&lt;IObjectModelValidator, CIS.Infrastructure.WebApi.Validation.NullObjectModelValidator&gt;();
            </remarks>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NewLineReplacementRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the NewLineReplacementRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.NewLineReplacementRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NewLineReplacementRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NewLineReplacementRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NewLineReplacementRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.NewLineReplacementRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NewLineReplacementRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NewLineReplacementRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.NewLineReplacementRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
    </members>
</doc>
