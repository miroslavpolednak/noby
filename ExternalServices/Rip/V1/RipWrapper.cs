//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace ExternalServices.Rip.V1.RipWrapper
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public Client(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// Výpočet rozšířené bonity
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CreditWorthinessCalculation> ComputeCreditWorthinessAsync(CreditWorthinessCalculationArguments body)
        {
            return ComputeCreditWorthinessAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Výpočet rozšířené bonity
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CreditWorthinessCalculation> ComputeCreditWorthinessAsync(CreditWorthinessCalculationArguments body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/credit-worthiness");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CreditWorthinessCalculation>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Založí LoanApplication
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LoanApplicationResponse> CreateLoanApplicationAsync(LoanApplicationRequest body)
        {
            return CreateLoanApplicationAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Založí LoanApplication
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LoanApplicationResponse> CreateLoanApplicationAsync(LoanApplicationRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/loan-application");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LoanApplicationResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Vrátí LoanApplicationAssessment podle ID
        /// </summary>
        /// <param name="loanApplicationAssessmentId">loanApplicationAssessmentId</param>
        /// <param name="expand">vrácený objekt LoanApplicationAssessment je možné rozšířit o tyto položky |assessmentDetail|householdAssessmentDetail|counterpartyAssessmentDetail|loanApplicationApprovalPossibilities|collateralRiskCharacteristics</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LoanApplicationAssessmentResponse> LoanApplicationAssessmentAsync(string loanApplicationAssessmentId, System.Collections.Generic.IEnumerable<string> expand)
        {
            return LoanApplicationAssessmentAsync(loanApplicationAssessmentId, expand, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Vrátí LoanApplicationAssessment podle ID
        /// </summary>
        /// <param name="loanApplicationAssessmentId">loanApplicationAssessmentId</param>
        /// <param name="expand">vrácený objekt LoanApplicationAssessment je možné rozšířit o tyto položky |assessmentDetail|householdAssessmentDetail|counterpartyAssessmentDetail|loanApplicationApprovalPossibilities|collateralRiskCharacteristics</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LoanApplicationAssessmentResponse> LoanApplicationAssessmentAsync(string loanApplicationAssessmentId, System.Collections.Generic.IEnumerable<string> expand, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/loan-application-assessment/{loanApplicationAssessmentId}?");
            urlBuilder_.Replace("{loanApplicationAssessmentId}", System.Uri.EscapeDataString(ConvertToString(loanApplicationAssessmentId, System.Globalization.CultureInfo.InvariantCulture)));
            if (expand != null)
            {
                foreach (var item_ in expand) { urlBuilder_.Append(System.Uri.EscapeDataString("expand") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LoanApplicationAssessmentResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Vrátí data související s angažovaností jednotlivých účastníků úvěrové žádosti(Loan Applicaiton).
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LoanApplicationRelatedExposureResult> LoanApplicationExposureAsync(LoanApplicationRelatedExposure body)
        {
            return LoanApplicationExposureAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Vrátí data související s angažovaností jednotlivých účastníků úvěrové žádosti(Loan Applicaiton).
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LoanApplicationRelatedExposureResult> LoanApplicationExposureAsync(LoanApplicationRelatedExposure body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/loan-application-exposure-calculation");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LoanApplicationRelatedExposureResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Risk Business Case - Assessment (Asynchronous)
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<RiskBusinessCaseCommand> RiskBusinessCaseAssessmentAsync(string id, AssessmentRequest body)
        {
            return RiskBusinessCaseAssessmentAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Risk Business Case - Assessment (Asynchronous)
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<RiskBusinessCaseCommand> RiskBusinessCaseAssessmentAsync(string id, AssessmentRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/assessment/command/riskBusinessCaseId={id}");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<RiskBusinessCaseCommand>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Risk Business Case - Create
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LoanApplicationCreate> RiskBusinessCaseCreateAsync(CreateRequest body)
        {
            return RiskBusinessCaseCreateAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Risk Business Case - Create
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LoanApplicationCreate> RiskBusinessCaseCreateAsync(CreateRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/risk-business-case");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LoanApplicationCreate>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Risk Business Case - Commit
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<LoanApplicationCommit> RiskBusinessCaseCommitAsync(string id, CommitRequest body)
        {
            return RiskBusinessCaseCommitAsync(id, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Risk Business Case - Commit
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<LoanApplicationCommit> RiskBusinessCaseCommitAsync(string id, CommitRequest body, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/risk-business-case/{id}/commitment");
            urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<LoanApplicationCommit>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Uživatel (přihlášený uživatel/schvalovatel aplikace StarBuild/NOBY)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HumanUser
    {
        /// <summary>
        /// Identifikátor uživatele/schvalovatele (os.číslo, login, ...)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Identity { get; set; }

        /// <summary>
        /// Identitní schéma ("MPAD", "KBAD", "DMID" (BrokerId), "M04ID", "M17ID")
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identityScheme", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityScheme { get; set; }

    }

    /// <summary>
    /// Parametry potřebné pro výpočet Bonity
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationProduct
    {
        /// <summary>
        /// Kód produktu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Product { get; set; }

        /// <summary>
        /// Doba splatnosti úvěru v měsících.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maturity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Maturity { get; set; }

        /// <summary>
        /// Žádaná roční úroková sazba.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interestRate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double InterestRate { get; set; }

        /// <summary>
        /// Požadovaná výše úvěru v Kč.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int AmountRequired { get; set; }

        /// <summary>
        /// Požadovaná výše splátky v Kč.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("annuity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Annuity { get; set; }

        /// <summary>
        /// Doba fixace úrokové sazby v měsících.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixationPeriod", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int FixationPeriod { get; set; }

    }

    /// <summary>
    /// Parametry domácnosti.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpensesSummary
    {
        /// <summary>
        /// Náklady domácnosti spojené s bydlením (Kč/měsíc).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Rent { get; set; }

        /// <summary>
        /// Výdaje domácnosti na spoření (Kč/měsíc).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saving", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Saving { get; set; }

        /// <summary>
        /// Výdaje domácnosti na pojištění (Kč/měsíc).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insurance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Insurance { get; set; }

        /// <summary>
        /// Ostatní výdaje domácnosti (Kč/měsíc).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("other", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Other { get; set; }

    }

    /// <summary>
    /// Příjem klienta
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationIncome
    {
        /// <summary>
        /// Kategorie příjmu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("categoryMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CategoryMp { get; set; }

        /// <summary>
        /// Výše příjmu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

    }

    /// <summary>
    /// Household Credit Liabilities OutHomeCompany.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditLiability
    {
        /// <summary>
        /// Typ závazku.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("liabilityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LiabilityType { get; set; }

        /// <summary>
        /// Výše limitu kreditní karty nebo povoleného debetu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Limit { get; set; }

        /// <summary>
        /// Konsolidovaná výše limitu kreditní karty nebo povoleného debetu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountConsolidated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double AmountConsolidated { get; set; }

        /// <summary>
        /// Výše splátky spotřebitelského nebo hypotečního úvěru.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("installment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Installment { get; set; }

        /// <summary>
        /// Konsolidovaná výše splátky spotřebitelského nebo hypotečního úvěru.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("installmentConsolidated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double InstallmentConsolidated { get; set; }

        /// <summary>
        /// Příznak, že závazek je veden u jiného peněžního ústavu (JPÚ), než v kterém je sjednáván úvěr.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("outHomeCompanyFlag", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool OutHomeCompanyFlag { get; set; }

    }

    /// <summary>
    /// Protistrana žádosti o půjčku.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationCounterParty
    {
        /// <summary>
        /// ID klienta
        /// </summary>
        [Newtonsoft.Json.JsonProperty("idMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdMp { get; set; }

        /// <summary>
        /// Je klient druhem/družkou?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPartnerMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPartnerMp { get; set; }

        /// <summary>
        /// Rodinný stav.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maritalStatusMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MaritalStatusMp { get; set; }

        /// <summary>
        /// Příjem klienta.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicationIncome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanApplicationIncome> LoanApplicationIncome { get; set; }

        /// <summary>
        /// Závazky klienta.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditLiabilities", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreditLiability> CreditLiabilities { get; set; }

    }

    /// <summary>
    /// Parametry domácnosti.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationHousehold
    {
        /// <summary>
        /// Počet vyživovaných dětí do 10 let (včetně).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childrenUnderAnd10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ChildrenUnderAnd10 { get; set; }

        /// <summary>
        /// Počet vyživovaných dětí nad 10 let.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childrenOver10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ChildrenOver10 { get; set; }

        [Newtonsoft.Json.JsonProperty("expensesSummary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExpensesSummary ExpensesSummary { get; set; }

        /// <summary>
        /// Klienti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("clients", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanApplicationCounterParty> Clients { get; set; }

    }

    /// <summary>
    /// Parametry potřebné pro výpočet Bonity
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditWorthinessCalculationArguments
    {
        /// <summary>
        /// ResourceProcessId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceProcessIdMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ResourceProcessIdMp { get; set; }

        /// <summary>
        /// Identifikátor volající aplikace.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ItChannel { get; set; }

        /// <summary>
        /// Identifikátor žádosti z pohledu Risku (nepovinné).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("riskBusinessCaseIdMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RiskBusinessCaseIdMp { get; set; }

        [Newtonsoft.Json.JsonProperty("humanUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HumanUser HumanUser { get; set; }

        [Newtonsoft.Json.JsonProperty("loanApplicationProduct", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public LoanApplicationProduct LoanApplicationProduct { get; set; } = new LoanApplicationProduct();

        /// <summary>
        /// Domácnosti.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("households", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<LoanApplicationHousehold> Households { get; set; } = new System.Collections.ObjectModel.Collection<LoanApplicationHousehold>();

    }

    /// <summary>
    /// Důvod(y) nespočtení výsledků bonity.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResultReason
    {
        /// <summary>
        /// Kód důvodu nespočtení výsledku
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Popis důvodu nespočtení výsledku
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

    }

    /// <summary>
    /// Vypočtená Bonita (výsledek)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditWorthinessCalculation
    {
        /// <summary>
        /// Maximální disponibilní splátka
        /// </summary>
        [Newtonsoft.Json.JsonProperty("installmentLimit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? InstallmentLimit { get; set; }

        /// <summary>
        /// Maximální výše úvěru
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maxAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? MaxAmount { get; set; }

        /// <summary>
        /// Zbývá na živobytí s ANNUITY
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remainsLivingAnnuity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? RemainsLivingAnnuity { get; set; }

        /// <summary>
        /// Zbývá na živobytí s disp. Splátkou
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remainsLivingInst", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? RemainsLivingInst { get; set; }

        /// <summary>
        /// Výsledek porovnání disponibilní a požadované splátky (0 - nebonitní, 1 - bonitní)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("worthinessResult", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int WorthinessResult { get; set; }

        [Newtonsoft.Json.JsonProperty("resultReason", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResultReason ResultReason { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SystemId
    {
        /// <summary>
        /// Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// System (eg. NOBY, STARBUILD)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("system", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string System { get; set; }

    }

    /// <summary>
    /// Parametry domácnosti.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExpensesSummary2
    {
        /// <summary>
        /// Rent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("rent", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Rent { get; set; }

        /// <summary>
        /// Saving.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("saving", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Saving { get; set; }

        /// <summary>
        /// Insurance.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("insurance", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Insurance { get; set; }

        /// <summary>
        /// Other.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("other", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Other { get; set; }

    }

    /// <summary>
    /// PhoneContact
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryAddress
    {
        /// <summary>
        /// název ulice
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetName { get; set; }

        /// <summary>
        /// číslo popisné
        /// </summary>
        [Newtonsoft.Json.JsonProperty("houseNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HouseNumber { get; set; }

        /// <summary>
        /// číslo orientační
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// číslo evidenční
        /// </summary>
        [Newtonsoft.Json.JsonProperty("evidenceNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EvidenceNumber { get; set; }

        /// <summary>
        /// město primární adresy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// Země.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCodeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountryCodeMp { get; set; }

        /// <summary>
        /// PSČ primární adresy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PostCode { get; set; }

        /// <summary>
        /// kód regionu primární adresy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("regionCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RegionCode { get; set; }

    }

    /// <summary>
    /// Amount
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount
    {
        /// <summary>
        /// Hodnota částky
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        /// <summary>
        /// Kód měny částky (ISO 4217)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }

    }

    /// <summary>
    /// IncomeDeduction
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IncomeDeduction
    {
        /// <summary>
        /// Execution
        /// </summary>
        [Newtonsoft.Json.JsonProperty("execution", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Execution { get; set; }

        /// <summary>
        /// Installments
        /// </summary>
        [Newtonsoft.Json.JsonProperty("installments", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Installments { get; set; }

        /// <summary>
        /// Other
        /// </summary>
        [Newtonsoft.Json.JsonProperty("other", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Other { get; set; }

    }

    /// <summary>
    /// LoanApplicationEmploymentIncome
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationEmploymentIncome
    {
        /// <summary>
        /// rodné číslo / IČO zaměstnavatele.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employerIdentificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmployerIdentificationNumber { get; set; }

        /// <summary>
        /// Typ zaměstnavatele - státní společnost, spol. se zahraniční účastí, podnikatel, etc..
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employerType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EmployerType { get; set; }

        /// <summary>
        /// Název zaměstnavatele
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employerName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EmployerName { get; set; }

        /// <summary>
        /// agregovaný OKEČ zaměstnavatele.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Nace { get; set; }

        /// <summary>
        /// povolání.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Profession { get; set; }

        /// <summary>
        /// PSČ sídla zaměstnavatele.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Postcode { get; set; }

        /// <summary>
        /// město sídla zaměstnání.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// Stát sídla zaměstnání.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCodeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountryCodeMp { get; set; }

        /// <summary>
        /// Název pracovní pozice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("jobTitle", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string JobTitle { get; set; }

        /// <summary>
        /// ulice sídla zaměstnání.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Street { get; set; }

        /// <summary>
        /// číslo popisné sídla zaměstnavatele
        /// </summary>
        [Newtonsoft.Json.JsonProperty("houseNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HouseNumber { get; set; }

        /// <summary>
        /// číslo orientační sídla zaměstnavatele
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// Telefonní kontakt.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string PhoneNumber { get; set; }

        [Newtonsoft.Json.JsonProperty("monthlyIncomeAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount MonthlyIncomeAmount { get; set; }

        /// <summary>
        /// předčíslí čísla účtu zaměstnavatele, z kterého klientovi chodí mzda
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumberPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumberPrefix { get; set; }

        /// <summary>
        /// číslo účtu zaměstnavatele (bez předčíslí), z kterého klientovi chodí mzda
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumberCore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumberCore { get; set; }

        /// <summary>
        /// kód banky účtu zaměstnavatele, z kterého klientovi chodí mzda
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountBankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountBankCode { get; set; }

        /// <summary>
        /// příznak domicilace příjmu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domiciled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Domiciled { get; set; }

        /// <summary>
        /// typ dokumentu dokládajícího příjmy (\"PNZ\"=příjem není zadán).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proofTypeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProofTypeMp { get; set; }

        /// <summary>
        /// typ zaměstnání v zahraničí
        /// </summary>
        [Newtonsoft.Json.JsonProperty("foreignEmploymentType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ForeignEmploymentType { get; set; }

        /// <summary>
        /// Hrubý roční příjem bez pojistného za poslední zdaňovací období.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grossAnnualIncome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? GrossAnnualIncome { get; set; }

        /// <summary>
        /// kontaktní osoba uvedená na potvrzení o výši příjmu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proofConfirmationContactSurname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProofConfirmationContactSurname { get; set; }

        /// <summary>
        /// kontaktní tel. číslo uvedené na potvrzení o výši příjmu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proofConfirmationContactPhone", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProofConfirmationContactPhone { get; set; }

        /// <summary>
        /// Datum vystavení potvrzení o výši příjmu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proofCreatedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ProofCreatedOn { get; set; }

        /// <summary>
        /// Je klient ve zkušební době?.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("probationaryPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? ProbationaryPeriod { get; set; }

        /// <summary>
        /// Je klient ve výpovědní lhůtě?.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noticePeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? NoticePeriod { get; set; }

        /// <summary>
        /// Je pracovní poměr sjednán na dobu určitou?.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentTypeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? EmploymentTypeMp { get; set; }

        /// <summary>
        /// první pracovní smlouva se zaměstnavatelem od.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstContractFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? FirstContractFrom { get; set; }

        /// <summary>
        /// aktuální pracovní smlouva od.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentContractFrom", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CurrentContractFrom { get; set; }

        /// <summary>
        /// aktuální pracovní smlouva do.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currentContractTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CurrentContractTo { get; set; }

        /// <summary>
        /// Vystavila potvrzení o příjmu externí účetní firma?
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedByExternalAccountant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IssuedByExternalAccountant { get; set; }

        [Newtonsoft.Json.JsonProperty("incomeDeduction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IncomeDeduction IncomeDeduction { get; set; }

    }

    /// <summary>
    /// LoanApplicationEntrepreneurIncome
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationEntrepreneurIncome
    {
        /// <summary>
        /// rodné číslo / IČO FOP.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entrepreneurIdentificationNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EntrepreneurIdentificationNumber { get; set; }

        /// <summary>
        /// agregovaný OKEČ.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Nace { get; set; }

        /// <summary>
        /// povolání.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("profession", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Profession { get; set; }

        /// <summary>
        /// PSČ sídla podnikání.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postcode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Postcode { get; set; }

        /// <summary>
        /// město sídla podnikání.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        /// <summary>
        /// země sídla podnikání.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCodeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CountryCodeMp { get; set; }

        /// <summary>
        /// establishedOn
        /// </summary>
        [Newtonsoft.Json.JsonProperty("establishedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? EstablishedOn { get; set; }

        /// <summary>
        /// Příznak, zdali je příjem domicilován.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domiciled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Domiciled { get; set; }

        /// <summary>
        /// dokument dokládající příjem z pronájmu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proofTypeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProofTypeMp { get; set; }

        [Newtonsoft.Json.JsonProperty("annualIncomeAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount AnnualIncomeAmount { get; set; }

    }

    /// <summary>
    /// LoanApplicationRentIncome
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationRentIncome
    {
        /// <summary>
        /// předčíslí čísla účtu, ze kterého příjem přichází
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumberPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumberPrefix { get; set; }

        /// <summary>
        /// číslo účtu (bez předčíslí), ze kterého příjem přichází
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumberCore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumberCore { get; set; }

        /// <summary>
        /// kód banky čísla účtu, ze kterého příjem přichází
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountBankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountBankCode { get; set; }

        /// <summary>
        /// příznak domicilace
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domiciled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Domiciled { get; set; }

        /// <summary>
        /// dokument dokládající příjem z pronájmu
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proofTypeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProofTypeMp { get; set; }

        [Newtonsoft.Json.JsonProperty("monthlyIncomeAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount MonthlyIncomeAmount { get; set; }

    }

    /// <summary>
    /// LoanApplicationOtherIncome
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationOtherIncome
    {
        /// <summary>
        /// Typ  vedlejšího prokazatelného příjmu. Opakující se atribut podle počtu vedeljších prokazatelných příjmů příjmů.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TypeMp { get; set; }

        [Newtonsoft.Json.JsonProperty("monthlyIncomeAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount MonthlyIncomeAmount { get; set; }

        /// <summary>
        /// předčíslí čísla účtu, ze kterého příjem přichází
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumberPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumberPrefix { get; set; }

        /// <summary>
        /// číslo účtu, z kterého příjem přichází.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumberCore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumberCore { get; set; }

        /// <summary>
        /// kód banky čísla účtu, ze kterého příjem přichází
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountBankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountBankCode { get; set; }

        /// <summary>
        /// Příznak, zdali je příjem domicilován.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domiciled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Domiciled { get; set; }

        /// <summary>
        /// dokument dokládající příjem z pronájmu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("proofTypeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ProofTypeMp { get; set; }

    }

    /// <summary>
    /// LoanApplicationIncome
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationIncome2
    {
        /// <summary>
        /// příznak uzamčení příjmů
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incomeConfirmed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IncomeConfirmed { get; set; }

        /// <summary>
        /// datum posledního uzamčení příjmů
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lastConfirmedDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? LastConfirmedDate { get; set; }

        /// <summary>
        /// příjmy ze zaměstnání
        /// </summary>
        [Newtonsoft.Json.JsonProperty("employmentIncome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanApplicationEmploymentIncome> EmploymentIncome { get; set; }

        [Newtonsoft.Json.JsonProperty("entrepreneurIncome", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanApplicationEntrepreneurIncome EntrepreneurIncome { get; set; }

        [Newtonsoft.Json.JsonProperty("rentIncome", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanApplicationRentIncome RentIncome { get; set; }

        /// <summary>
        /// ostatní příjmy
        /// </summary>
        [Newtonsoft.Json.JsonProperty("otherIncome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanApplicationOtherIncome> OtherIncome { get; set; }

    }

    /// <summary>
    /// LoanApplicationPersonalDocument
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationPersonalDocument
    {
        /// <summary>
        /// Product group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Product group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TypeMp { get; set; }

        /// <summary>
        /// issuedOn
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedOn", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? IssuedOn { get; set; }

        /// <summary>
        /// validTo
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validTo", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ValidTo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreditLiability2
    {
        /// <summary>
        /// Typ závazku klienta
        /// </summary>
        [Newtonsoft.Json.JsonProperty("liabilityType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LiabilityType { get; set; }

        /// <summary>
        /// Výše závazku v JPÚ - splátkové operace (spotřebiteslé úvěry, hypotéky)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Amount { get; set; }

        /// <summary>
        /// Výše limitu v JPÚ -  esplátkové operace (kreditní karty, povolené debety)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("limit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Limit { get; set; }

        /// <summary>
        /// Výše konsolidace u nesplátkových operací (u daného závazku (zrušení/snížení))
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amountConsolidated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double AmountConsolidated { get; set; }

        /// <summary>
        /// Výše splátky (splátkové operace)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("installment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Installment { get; set; }

        /// <summary>
        /// Výše konsolidace u splátkových operací
        /// </summary>
        [Newtonsoft.Json.JsonProperty("installmentConsolidated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double InstallmentConsolidated { get; set; }

    }

    /// <summary>
    /// Parametry domácnosti.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationCounterParty2
    {
        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPartner", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsPartner { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string CustomerId { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("groupEmployee", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? GroupEmployee { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("specialRelationsWithKB", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? SpecialRelationsWithKB { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthNumber { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleCodeMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RoleCodeMp { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Firstname { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Surname { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthName { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? BirthDate { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthPlace", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BirthPlace { get; set; }

        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrimaryAddress Address { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genderMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GenderMp { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maritalStatusMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? MaritalStatusMp { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("highestEducation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? HighestEducation { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("academicTitlePrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AcademicTitlePrefix { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mobilePhoneNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string MobilePhoneNumber { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hasEmail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? HasEmail { get; set; }

        /// <summary>
        /// Clients housing conditions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("housingConditionMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? HousingConditionMp { get; set; }

        [Newtonsoft.Json.JsonProperty("income", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanApplicationIncome2 Income { get; set; }

        /// <summary>
        /// LoanApplication identity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("taxpayer", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Taxpayer { get; set; }

        [Newtonsoft.Json.JsonProperty("loanApplicationPersonalDocument", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanApplicationPersonalDocument LoanApplicationPersonalDocument { get; set; }

        /// <summary>
        /// Závazky klienta
        /// </summary>
        [Newtonsoft.Json.JsonProperty("creditLiability", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CreditLiability2> CreditLiability { get; set; }

    }

    /// <summary>
    /// Parametry domácnosti.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationHousehold2
    {
        /// <summary>
        /// ID domácnosti přidělené volajícím systémem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Id { get; set; }

        /// <summary>
        /// kód role domácnosti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleCodeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RoleCodeMp { get; set; }

        /// <summary>
        /// počet vyživovaných dětí do 10 let (včetně).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childrenUnderAnd10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ChildrenUnderAnd10 { get; set; }

        /// <summary>
        /// počet vyživovaných dětí nad 10 let .
        /// </summary>
        [Newtonsoft.Json.JsonProperty("childrenOver10", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ChildrenOver10 { get; set; }

        [Newtonsoft.Json.JsonProperty("householdExpensesSummary", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ExpensesSummary2 HouseholdExpensesSummary { get; set; }

        /// <summary>
        /// kód vypořádání majetku (manželů)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("settlementTypeCodeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SettlementTypeCodeMp { get; set; }

        /// <summary>
        /// údaje o klientech
        /// </summary>
        [Newtonsoft.Json.JsonProperty("counterParty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanApplicationCounterParty2> CounterParty { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MarketingActions
    {
        [Newtonsoft.Json.JsonProperty("marketingAction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int MarketingAction { get; set; }

    }

    /// <summary>
    /// Parametry domácnosti.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationPurpose
    {
        /// <summary>
        /// účel úvěru.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("codeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CodeMp { get; set; }

        /// <summary>
        /// výše požadované výše úvěru pro daný účel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("amount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Amount { get; set; }

    }

    /// <summary>
    /// Parametry domácnosti.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationCollateral
    {
        /// <summary>
        /// ID zajištění v dané evidenci (Bagman,StarBuild, atd.).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Kategorie zajištění.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("categoryCodeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? CategoryCodeMp { get; set; }

        [Newtonsoft.Json.JsonProperty("appraisedValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount AppraisedValue { get; set; }

    }

    /// <summary>
    /// Parametry domácnosti.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationProduct2
    {
        /// <summary>
        /// kód produktového shluku (shluk jednoho produktu).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Product { get; set; }

        /// <summary>
        /// LoanType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LoanType { get; set; }

        /// <summary>
        /// MarketingActions
        /// </summary>
        [Newtonsoft.Json.JsonProperty("marketingActions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<MarketingActions> MarketingActions { get; set; }

        /// <summary>
        /// Ltv
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ltv", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Ltv { get; set; }

        /// <summary>
        /// aplikace + typ účtu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("aplType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AplType { get; set; }

        /// <summary>
        /// účely úvěru.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicationPurpose", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanApplicationPurpose> LoanApplicationPurpose { get; set; }

        /// <summary>
        /// seznam zajištění daného účtu. Zabaluje větve COLLATERAL. Shodná struktura jako v CrI_out.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicationCollateral", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanApplicationCollateral> LoanApplicationCollateral { get; set; }

        [Newtonsoft.Json.JsonProperty("amountRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount AmountRequired { get; set; }

        [Newtonsoft.Json.JsonProperty("amountInvestment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount AmountInvestment { get; set; }

        [Newtonsoft.Json.JsonProperty("amountOwnResources", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount AmountOwnResources { get; set; }

        [Newtonsoft.Json.JsonProperty("amountForeignResources", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount AmountForeignResources { get; set; }

        /// <summary>
        /// počet splátek (anuitní a úrokové).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maturity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Maturity { get; set; }

        /// <summary>
        /// žádaná anuitní splátka.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("annuity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Annuity { get; set; }

        /// <summary>
        /// doba fixace úrokové sazby.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fixationPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? FixationPeriod { get; set; }

        /// <summary>
        /// žádaná roční úroková sazba.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("interestRate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? InterestRate { get; set; }

        /// <summary>
        /// typ splátkového kalendáře.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repaymentScheduleTypeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? RepaymentScheduleTypeMp { get; set; }

        /// <summary>
        /// periodicity splátek.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("installmentPeriod", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string InstallmentPeriod { get; set; }

        /// <summary>
        /// počet splátek (pouze anuitní).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("installmentCount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? InstallmentCount { get; set; }

        /// <summary>
        /// termín čerpání obchodu od.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("drawingPeriodStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DrawingPeriodStart { get; set; }

        /// <summary>
        /// termín čerpání obchodu do.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("drawingPeriodEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? DrawingPeriodEnd { get; set; }

        /// <summary>
        /// datum začátku splácení.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repaymentPeriodStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? RepaymentPeriodStart { get; set; }

        /// <summary>
        /// konečný den splatnosti.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("repaymentPeriodEnd", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? RepaymentPeriodEnd { get; set; }

        /// <summary>
        /// domácí měna dle příjmu žadatelů.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homeCurrencyIncome", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HomeCurrencyIncome { get; set; }

        /// <summary>
        /// domácí měna dle bydliště žadatelů.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("homeCurrencyResidence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string HomeCurrencyResidence { get; set; }

    }

    /// <summary>
    /// Parametry domácnosti.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationProductRelation
    {
        /// <summary>
        /// jiné závazky zohledněné při poskytování úvěru - ID kontraktu z CBCB
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cbcbContractIdMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CbcbContractIdMp { get; set; }

        /// <summary>
        /// jiné závazky zohledněné při poskytování úvěru - číslo účtu z KB/MPSS -  předčíslí
        /// <br/>plní se pouze tehdy, pokud se jedná o číslo účtu z entity poskytující úvěr
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumberPrefix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumberPrefix { get; set; }

        /// <summary>
        /// jiné závazky zohledněné při poskytování úvěru - číslo účtu z KB/MPSS (bez předčíslí)
        /// <br/>plní se pouze tehdy, pokud se jedná o číslo účtu z entity poskytující úvěr
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountNumberCore", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountNumberCore { get; set; }

        /// <summary>
        /// jiné závazky zohledněné při poskytování úvěru - číslo účtu z KB nebo MPSS -  kód banky
        /// <br/>plní se pouze tehdy, pokud se jedná o číslo účtu z entity poskytující úvěr
        /// </summary>
        [Newtonsoft.Json.JsonProperty("accountBankCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AccountBankCode { get; set; }

        /// <summary>
        /// kód produktového shluku (shluk jednoho produktu).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("productType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ProductType { get; set; }

        /// <summary>
        /// kód produktového shluku (shluk jednoho produktu).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("relationType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RelationType { get; set; }

        /// <summary>
        /// remainingExposure
        /// </summary>
        [Newtonsoft.Json.JsonProperty("remainingExposure", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double RemainingExposure { get; set; }

    }

    /// <summary>
    /// LoanApplication
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationRequest
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public SystemId Id { get; set; } = new SystemId();

        /// <summary>
        /// rozlišení nového obchodu a typu dodatku
        /// </summary>
        [Newtonsoft.Json.JsonProperty("appendixCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? AppendixCode { get; set; }

        /// <summary>
        /// distribuční kanál vzniku žádosti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributionChannelCodeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? DistributionChannelCodeMp { get; set; }

        /// <summary>
        /// Způsob podpisu žádosti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signatureTypeMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignatureTypeMp { get; set; }

        /// <summary>
        /// loan application verze (verze dat - timestamp)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicationDataVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanApplicationDataVersion { get; set; }

        /// <summary>
        /// aplikačních data jednotlivých domácností (včetně ručitelských)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicationHousehold", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<LoanApplicationHousehold2> LoanApplicationHousehold { get; set; } = new System.Collections.ObjectModel.Collection<LoanApplicationHousehold2>();

        [Newtonsoft.Json.JsonProperty("loanApplicationProduct", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public LoanApplicationProduct2 LoanApplicationProduct { get; set; } = new LoanApplicationProduct2();

        /// <summary>
        /// konsolidované/zrušené úvěry
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicationProductRelation", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanApplicationProductRelation> LoanApplicationProductRelation { get; set; }

        [Newtonsoft.Json.JsonProperty("humanUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HumanUser HumanUser { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationResponse
    {
        /// <summary>
        /// Risk segment (calculated on RIP)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("riskSegment", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RiskSegment { get; set; }

    }

    /// <summary>
    /// ResourceIdentifier
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceIdentifier
    {
        /// <summary>
        /// The resource instance code, eg. 'KBCZ'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("instance", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Instance { get; set; }

        /// <summary>
        /// The resource domain code, eg. 'CFLM'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }

        /// <summary>
        /// The resource code (the in-domain resource code, eg. 'LimitModel')
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Resource { get; set; }

        /// <summary>
        /// ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The variant of the resource, eg. distinguishing the origin of the source
        /// </summary>
        [Newtonsoft.Json.JsonProperty("variant", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Variant { get; set; }

    }

    /// <summary>
    /// Resource
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Resource
    {
        /// <summary>
        /// Entity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("entity", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Entity { get; set; }

        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ResourceIdentifier Id { get; set; }

    }

    /// <summary>
    /// AssessmentReasonDetail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssessmentReasonDetail
    {
        /// <summary>
        /// Target
        /// </summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }

        /// <summary>
        /// Desc
        /// </summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

        /// <summary>
        /// Result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("result", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Result { get; set; }

        /// <summary>
        /// Target
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resource", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Resource> Resource { get; set; }

    }

    /// <summary>
    /// LoanApplicationAssessmentReason
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationAssessmentReason
    {
        /// <summary>
        /// Code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// Level
        /// </summary>
        [Newtonsoft.Json.JsonProperty("level", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Level { get; set; }

        /// <summary>
        /// Weight
        /// </summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Weight { get; set; }

        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssessmentReasonDetail Detail { get; set; }

    }

    /// <summary>
    /// LoanApplicationScore
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationScore
    {
        /// <summary>
        /// Value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }

        /// <summary>
        /// Scale
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scale", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Scale { get; set; }

    }

    /// <summary>
    /// Amount
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount2
    {
        /// <summary>
        /// Hodnota částky
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        /// <summary>
        /// Kód měny částky (ISO 4217)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }

    }

    /// <summary>
    /// LoanApplicationLimit
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationLimit
    {
        [Newtonsoft.Json.JsonProperty("_LoanApplicationLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount2 _LoanApplicationLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("loanApplicationInstallmentLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount2 LoanApplicationInstallmentLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("loanApplicationCollateralLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount2 LoanApplicationCollateralLimit { get; set; }

        [Newtonsoft.Json.JsonProperty("remainingAnnuityLivingAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount2 RemainingAnnuityLivingAmount { get; set; }

        /// <summary>
        /// Remaining Annuity Living Amount
        /// </summary>
        [Newtonsoft.Json.JsonProperty("calculationIrStressed", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CalculationIrStressed { get; set; }

        /// <summary>
        /// iir
        /// </summary>
        [Newtonsoft.Json.JsonProperty("iir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Iir { get; set; }

        /// <summary>
        /// cir
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cir", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Cir { get; set; }

        /// <summary>
        /// dti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dti", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Dti { get; set; }

        /// <summary>
        /// dsti
        /// </summary>
        [Newtonsoft.Json.JsonProperty("dsti", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Dsti { get; set; }

    }

    /// <summary>
    /// RiskCharacteristics
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskCharacteristics
    {
        [Newtonsoft.Json.JsonProperty("monthlyIncomeAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount2 MonthlyIncomeAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("monthlyCostsWithoutInstAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount2 MonthlyCostsWithoutInstAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("monthlyInstallmentsInKBAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount2 MonthlyInstallmentsInKBAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("monthlyEntrepreneurInstallmentsInKBAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount2 MonthlyEntrepreneurInstallmentsInKBAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("monthlyInstallmentsInMPSSAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount2 MonthlyInstallmentsInMPSSAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("monthlyInstallmentsInOFIAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount2 MonthlyInstallmentsInOFIAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("monthlyInstallmentsInCBCBAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount2 MonthlyInstallmentsInCBCBAmount { get; set; }

    }

    /// <summary>
    /// AssessmentDetail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssessmentDetail
    {
        [Newtonsoft.Json.JsonProperty("loanApplicationScore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanApplicationScore LoanApplicationScore { get; set; }

        [Newtonsoft.Json.JsonProperty("loanApplicationLimit", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanApplicationLimit LoanApplicationLimit { get; set; }

        /// <summary>
        /// Assessment detail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicationRiskCharacteristics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RiskCharacteristics> LoanApplicationRiskCharacteristics { get; set; }

    }

    /// <summary>
    /// Household Assessment detail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HouseholdAssessmentDetail
    {
        /// <summary>
        /// Household id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("householdId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? HouseholdId { get; set; }

        [Newtonsoft.Json.JsonProperty("assessmentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssessmentDetail AssessmentDetail { get; set; }

    }

    /// <summary>
    /// Counterparty Assessment Detail
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CounterpartyAssessmentDetail
    {
        /// <summary>
        /// Counterparty id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("counterPartyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CounterPartyId { get; set; }

        /// <summary>
        /// Customer id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerIdMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerIdMp { get; set; }

        [Newtonsoft.Json.JsonProperty("assessmentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssessmentDetail AssessmentDetail { get; set; }

    }

    /// <summary>
    /// CollateralRiskCharacteristics
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CollateralRiskCharacteristics
    {
        /// <summary>
        /// Ltv
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ltv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Ltv { get; set; }

        /// <summary>
        /// Ltfv
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ltfv", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Ltfv { get; set; }

        /// <summary>
        /// Ltp
        /// </summary>
        [Newtonsoft.Json.JsonProperty("ltp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? Ltp { get; set; }

        /// <summary>
        /// SumAppraisedValue
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sumAppraisedValue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SumAppraisedValue { get; set; }

    }

    /// <summary>
    /// SemanticVersion
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SemanticVersion
    {
        /// <summary>
        /// Major part of a version
        /// </summary>
        [Newtonsoft.Json.JsonProperty("major", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Major { get; set; }

        /// <summary>
        /// Minor part of a version
        /// </summary>
        [Newtonsoft.Json.JsonProperty("minor", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Minor { get; set; }

        /// <summary>
        /// Bugfix part of a version
        /// </summary>
        [Newtonsoft.Json.JsonProperty("bugfix", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? Bugfix { get; set; }

        /// <summary>
        /// A non-semantic part of a version
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nonSemanticPart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NonSemanticPart { get; set; }

    }

    /// <summary>
    /// Change
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Change
    {
        /// <summary>
        /// Identita actora/uživatele
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identityId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string IdentityId { get; set; }

        /// <summary>
        /// Datum změny
        /// </summary>
        [Newtonsoft.Json.JsonProperty("date", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Date { get; set; }

    }

    /// <summary>
    /// LoanApplicationAssessment
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationAssessmentResponse
    {
        /// <summary>
        /// ID
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("loanApplicationIdMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemId LoanApplicationIdMp { get; set; }

        /// <summary>
        /// Risk BusinessCase resource-identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("riskBusinesscaseIdMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RiskBusinesscaseIdMp { get; set; }

        /// <summary>
        /// Gets or Sets RiskBusinesscaseExpirationDate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("riskBusinesscaseExpirationDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? RiskBusinesscaseExpirationDate { get; set; }

        /// <summary>
        /// Assessment result
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assessmentResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AssessmentResult { get; set; }

        /// <summary>
        /// Gets or Sets StandardRiskCosts
        /// </summary>
        [Newtonsoft.Json.JsonProperty("standardRiskCosts", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float? StandardRiskCosts { get; set; }

        /// <summary>
        /// Gets or Sets GlTableCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("glTableCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? GlTableCode { get; set; }

        /// <summary>
        /// LoanApplicationAssessment resource-identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicationAssessmentReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanApplicationAssessmentReason> LoanApplicationAssessmentReason { get; set; }

        [Newtonsoft.Json.JsonProperty("assessmentDetail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public AssessmentDetail AssessmentDetail { get; set; }

        /// <summary>
        /// HouseholdAssessmentDetail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("householdAssessmentDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<HouseholdAssessmentDetail> HouseholdAssessmentDetail { get; set; }

        /// <summary>
        /// HouseholdAssessmentDetail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("counterpartyAssessmentDetail", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CounterpartyAssessmentDetail> CounterpartyAssessmentDetail { get; set; }

        /// <summary>
        /// CollateralRiskCharacteristics
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralRiskCharacteristics", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CollateralRiskCharacteristics> CollateralRiskCharacteristics { get; set; }

        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SemanticVersion Version { get; set; }

        [Newtonsoft.Json.JsonProperty("created", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Change Created { get; set; }

        [Newtonsoft.Json.JsonProperty("updated", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Change Updated { get; set; }

    }

    /// <summary>
    /// LoanApplicationRelatedExposur
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationRelatedExposure
    {
        [Newtonsoft.Json.JsonProperty("loanApplicationIdMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemId LoanApplicationIdMp { get; set; }

        /// <summary>
        /// riskBusinessCaseId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("riskBusinessCaseIdMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RiskBusinessCaseIdMp { get; set; }

        /// <summary>
        /// verze dat
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicationDataVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanApplicationDataVersion { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CompanyId
    {
        /// <summary>
        /// Company (eg. MP, KB)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("company", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Company { get; set; }

        /// <summary>
        /// Id
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    /// <summary>
    /// Amount
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Amount3
    {
        /// <summary>
        /// Hodnota částky
        /// </summary>
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Value { get; set; }

        /// <summary>
        /// Kód měny částky (ISO 4217)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("currencyCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CurrencyCode { get; set; }

    }

    /// <summary>
    /// ExistingKBGroupExposureItem
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExistingKBGroupExposureItem
    {
        [Newtonsoft.Json.JsonProperty("productIdMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyId ProductIdMp { get; set; }

        /// <summary>
        /// loanType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanType { get; set; }

        /// <summary>
        /// loanTypeCategory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanTypeCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanTypeCategory { get; set; }

        /// <summary>
        /// customerRoleCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerRoleCodeMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CustomerRoleCodeMp { get; set; }

        [Newtonsoft.Json.JsonProperty("loanAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 LoanAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("drawingAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 DrawingAmount { get; set; }

        /// <summary>
        /// contractDate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contractDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ContractDate { get; set; }

        /// <summary>
        /// maturityDate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? MaturityDate { get; set; }

        [Newtonsoft.Json.JsonProperty("loanBalanceAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 LoanBalanceAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("loanOnBalanceAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 LoanOnBalanceAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("loanOffBalanceAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 LoanOffBalanceAmount { get; set; }

        /// <summary>
        /// noOfDaysPastDue
        /// </summary>
        [Newtonsoft.Json.JsonProperty("noOfDaysPastDue", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? NoOfDaysPastDue { get; set; }

        [Newtonsoft.Json.JsonProperty("loanAmountPastDue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 LoanAmountPastDue { get; set; }

        [Newtonsoft.Json.JsonProperty("exposureAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 ExposureAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("installmentAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 InstallmentAmount { get; set; }

        /// <summary>
        /// isSecured
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSecured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSecured { get; set; }

    }

    /// <summary>
    /// RequestedKBGroupExposureItem
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestedKBGroupExposureItem
    {
        /// <summary>
        /// riskBusinessCaseId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("riskBusinessCaseIdMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RiskBusinessCaseIdMp { get; set; }

        /// <summary>
        /// loanType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanType { get; set; }

        /// <summary>
        /// loanTypeCategory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanTypeCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanTypeCategory { get; set; }

        /// <summary>
        /// customerRoleCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerRoleCodeMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CustomerRoleCodeMp { get; set; }

        [Newtonsoft.Json.JsonProperty("loanAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 LoanAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("installmentAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 InstallmentAmount { get; set; }

        /// <summary>
        /// isSecured
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSecured", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsSecured { get; set; }

        /// <summary>
        /// statusCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string StatusCode { get; set; }

    }

    /// <summary>
    /// ExistingCBCBExposureItem
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExistingCBCBExposureItem
    {
        [Newtonsoft.Json.JsonProperty("cbcbContractIdMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyId CbcbContractIdMp { get; set; }

        /// <summary>
        /// customerRoleCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerRoleCodeMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CustomerRoleCodeMp { get; set; }

        /// <summary>
        /// loanType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanType { get; set; }

        /// <summary>
        /// loanTypeCategory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanTypeCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanTypeCategory { get; set; }

        /// <summary>
        /// maturityDate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? MaturityDate { get; set; }

        [Newtonsoft.Json.JsonProperty("loanAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 LoanAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("installmentAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 InstallmentAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("exposureAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 ExposureAmount { get; set; }

        /// <summary>
        /// contractDate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("contractDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ContractDate { get; set; }

        /// <summary>
        /// cbcbDataLastUpdate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cbcbDataLastUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CbcbDataLastUpdate { get; set; }

    }

    /// <summary>
    /// RequestedCBCBExposureItem
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestedCBCBExposureItem
    {
        [Newtonsoft.Json.JsonProperty("cbcbContractIdMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyId CbcbContractIdMp { get; set; }

        /// <summary>
        /// customerRoleCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerRoleCodeMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CustomerRoleCodeMp { get; set; }

        /// <summary>
        /// loanType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanType { get; set; }

        /// <summary>
        /// loanTypeCategory
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanTypeCategory", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanTypeCategory { get; set; }

        /// <summary>
        /// maturityDate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maturityDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? MaturityDate { get; set; }

        [Newtonsoft.Json.JsonProperty("loanAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 LoanAmount { get; set; }

        [Newtonsoft.Json.JsonProperty("installmentAmount", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 InstallmentAmount { get; set; }

        /// <summary>
        /// cbcbDataLastUpdate
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cbcbDataLastUpdate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? CbcbDataLastUpdate { get; set; }

    }

    /// <summary>
    /// LoanApplicationCounterparty
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationCounterparty
    {
        /// <summary>
        /// loanApplicationCounterpartyId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicationCounterpartyId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LoanApplicationCounterpartyId { get; set; }

        /// <summary>
        /// customerId
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerIdMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CustomerIdMp { get; set; }

        /// <summary>
        /// roleCode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("roleCodeMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int RoleCodeMp { get; set; }

        /// <summary>
        /// cbcbRegiterCalled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cbcbRegisterCalled", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? CbcbRegisterCalled { get; set; }

        [Newtonsoft.Json.JsonProperty("cbcbReportIdMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyId CbcbReportIdMp { get; set; }

        /// <summary>
        /// existingKBGroupNaturalPersonExposureItem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("existingKBGroupNaturalPersonExposureItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExistingKBGroupExposureItem> ExistingKBGroupNaturalPersonExposureItem { get; set; }

        /// <summary>
        /// existingKBGroupJuridicalPersonExposureItem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("existingKBGroupJuridicalPersonExposureItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExistingKBGroupExposureItem> ExistingKBGroupJuridicalPersonExposureItem { get; set; }

        /// <summary>
        /// requestedKBGroupNaturalPersonExposureItem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedKBGroupNaturalPersonExposureItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RequestedKBGroupExposureItem> RequestedKBGroupNaturalPersonExposureItem { get; set; }

        /// <summary>
        /// requestedKBGroupJuridicalPersonExposureItem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedKBGroupJuridicalPersonExposureItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RequestedKBGroupExposureItem> RequestedKBGroupJuridicalPersonExposureItem { get; set; }

        /// <summary>
        /// existingCBCBNaturalPersonExposureItem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("existingCBCBNaturalPersonExposureItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExistingCBCBExposureItem> ExistingCBCBNaturalPersonExposureItem { get; set; }

        /// <summary>
        /// existingCBCBJuridicalPersonExposureItem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("existingCBCBJuridicalPersonExposureItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExistingCBCBExposureItem> ExistingCBCBJuridicalPersonExposureItem { get; set; }

        /// <summary>
        /// requestedCBCBNaturalPersonExposureItem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedCBCBNaturalPersonExposureItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RequestedCBCBExposureItem> RequestedCBCBNaturalPersonExposureItem { get; set; }

        /// <summary>
        /// requestedCBCBJuridicalPersonExposureItem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("requestedCBCBJuridicalPersonExposureItem", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RequestedCBCBExposureItem> RequestedCBCBJuridicalPersonExposureItem { get; set; }

    }

    /// <summary>
    /// ExposureSummaryForApproval
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ExposureSummaryForApproval
    {
        [Newtonsoft.Json.JsonProperty("totalExistingExposureKB", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 TotalExistingExposureKB { get; set; }

        [Newtonsoft.Json.JsonProperty("totalExistingExposureKBNaturalPerson", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Amount3 TotalExistingExposureKBNaturalPerson { get; set; }

    }

    /// <summary>
    /// LoanApplicationRelatedExposureResult
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationRelatedExposureResult
    {
        /// <summary>
        /// loanApplicationCounterparty
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicationCounterparty", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanApplicationCounterparty> LoanApplicationCounterparty { get; set; }

        /// <summary>
        /// exposureSummary
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exposureSummary", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ExposureSummaryForApproval> ExposureSummary { get; set; }

    }

    /// <summary>
    /// LoanApplicationException
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationException
    {
        /// <summary>
        /// Arm.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("arm", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Arm { get; set; }

        /// <summary>
        /// ReasonCode.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reasonCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ReasonCode { get; set; }

    }

    /// <summary>
    /// Assessment request
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AssessmentRequest
    {
        [Newtonsoft.Json.JsonProperty("loanApplicationIdMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemId LoanApplicationIdMp { get; set; }

        /// <summary>
        /// Identifikace verze dat žádosti, která jsou uložena v Loan Application.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicationDataVersion", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LoanApplicationDataVersion { get; set; }

        /// <summary>
        /// IT Channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItChannel { get; set; }

        /// <summary>
        /// IT Channel Previous.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itChannelPrevious", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItChannelPrevious { get; set; }

        /// <summary>
        /// Mód vyhodnocení daného případu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("assessmentMode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string AssessmentMode { get; set; }

        /// <summary>
        /// Poskytovací procedura.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("grantingProcedureCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string GrantingProcedureCode { get; set; }

        /// <summary>
        /// Příznak, zdali je požadováno samoschválení.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("selfApprovalRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SelfApprovalRequired { get; set; }

        /// <summary>
        /// Příznak, zdali je požadováno automatické schválení (systémem).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("systemApprovalRequired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool SystemApprovalRequired { get; set; }

        /// <summary>
        /// ExceptionHighestApprovalLevel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("exceptionHighestApprovalLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ExceptionHighestApprovalLevel { get; set; }

        /// <summary>
        /// Parametry metodické vyjímky.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("loanApplicationException", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<LoanApplicationException> LoanApplicationException { get; set; }

    }

    /// <summary>
    /// RiskBusinessCaseCommand
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskBusinessCaseCommand
    {
        /// <summary>
        /// ID založeného požadavku
        /// </summary>
        [Newtonsoft.Json.JsonProperty("commandId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? CommandId { get; set; }

    }

    /// <summary>
    /// Risk Busines Case create
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateRequest
    {
        [Newtonsoft.Json.JsonProperty("loanApplicationIdMp", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public SystemId LoanApplicationIdMp { get; set; } = new SystemId();

        /// <summary>
        /// ID business procesu, v rámci kterého, Risk Business Case vzniká.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resourceProcessIdMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ResourceProcessIdMp { get; set; }

        /// <summary>
        /// Typ zdrojové aplikace (např. NOBY, STARBUILD)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itChannel", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ItChannel { get; set; }

    }

    /// <summary>
    /// LoanApplicationCreate
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationCreate
    {
        /// <summary>
        /// identifikátor obchodního případu v C4M (ResoureIdentifier.Id)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("riskBusinessCaseIdMp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RiskBusinessCaseIdMp { get; set; }

    }

    /// <summary>
    /// LoanApplicationProduct
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationProduct3
    {
        /// <summary>
        /// kód produktového shluku (shluk jednoho produktu).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Product { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanSoldProduct
    {
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CompanyId Id { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanAgreement
    {
        /// <summary>
        /// Identifikátor obchodního případu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("distributionChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string DistributionChannel { get; set; }

        /// <summary>
        /// Identifikátor obchodního případu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("signatureType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SignatureType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CollateralAgreement
    {
        /// <summary>
        /// Identifikátor obchodního případu.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

    }

    /// <summary>
    /// CommitRequest
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CommitRequest
    {
        [Newtonsoft.Json.JsonProperty("loanApplicationId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SystemId LoanApplicationId { get; set; }

        /// <summary>
        /// IT Channel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("itChannel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ItChannel { get; set; }

        [Newtonsoft.Json.JsonProperty("loanApplicationProduct", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanApplicationProduct3 LoanApplicationProduct { get; set; }

        /// <summary>
        /// riskBusinessCaseFinalResult.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("riskBusinessCaseFinalResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RiskBusinessCaseFinalResult { get; set; }

        [Newtonsoft.Json.JsonProperty("loanSoldProduct", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanSoldProduct LoanSoldProduct { get; set; }

        /// <summary>
        /// approvalLevel.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvalLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ApprovalLevel { get; set; }

        /// <summary>
        /// Datum schválení.  Format: yyyy-MM-dd
        /// </summary>
        [Newtonsoft.Json.JsonProperty("approvalDate", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? ApprovalDate { get; set; }

        [Newtonsoft.Json.JsonProperty("loanAgreement", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LoanAgreement LoanAgreement { get; set; }

        [Newtonsoft.Json.JsonProperty("approver", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HumanUser Approver { get; set; }

        /// <summary>
        /// collateralAgreements.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("collateralAgreements", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CollateralAgreement> CollateralAgreements { get; set; }

        [Newtonsoft.Json.JsonProperty("humanUser", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public HumanUser HumanUser { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResultReason2
    {
        /// <summary>
        /// kód důvodu nespočtení výsledku.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }

        /// <summary>
        /// popis důvodu nespočtení výsledku.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("desc", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Desc { get; set; }

    }

    /// <summary>
    /// Response
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanApplicationCommit
    {
        /// <summary>
        /// identifikátor obchodního případu v C4M
        /// </summary>
        [Newtonsoft.Json.JsonProperty("riskBusinessCaseId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? RiskBusinessCaseId { get; set; }

        /// <summary>
        /// Datum a čas odpovědi
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime? Timestamp { get; set; }

        /// <summary>
        /// Status
        /// </summary>
        [Newtonsoft.Json.JsonProperty("operationResult", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string OperationResult { get; set; }

        /// <summary>
        /// Důvod(y) nespočetní výsledků bonity
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resultReasons", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ResultReason2> ResultReasons { get; set; }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603