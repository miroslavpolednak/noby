//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json.Serialization;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace ExternalServices.Crem.V1.Contracts
{
    using System = global::System;

    

    /// <summary>
    /// Represents deed of ownership document
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeedOfOwnershipDocument
    {
        /// <summary>
        /// Code of branch of the creator user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("branch")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Branch { get; set; } = default!;

        /// <summary>
        /// ID of document creator user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdById")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string CreatedById { get; set; } = default!;

        /// <summary>
        /// Name of document creator user
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdByName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string CreatedByName { get; set; } = default!;

        /// <summary>
        /// Unique ISKN deed of ownership id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deedOfOwnershipIsknId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long DeedOfOwnershipIsknId { get; set; } = default!;

        /// <summary>
        /// Deed of ownership number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deedOfOwnershipNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DeedOfOwnershipNumber { get; set; } = default!;

        /// <summary>
        /// Description of document content
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; } = default!;

        /// <summary>
        /// District code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("districtCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string DistrictCode { get; set; } = default!;

        /// <summary>
        /// District name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("districtName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string DistrictName { get; set; } = default!;

        /// <summary>
        /// Unique document id in CREM
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("documentId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long DocumentId { get; set; } = default!;

        /// <summary>
        /// Document file name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("documentName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string DocumentName { get; set; } = default!;

        /// <summary>
        /// Document price paid for obtaining the document
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("documentPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DocumentPrice { get; set; } = default!;

        /// <summary>
        /// Expiration date of the document (to be removed from CREM)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expirationDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime ExpirationDate { get; set; } = default!;

        /// <summary>
        /// ISKN unique report id of the document
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isknReportId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long IsknReportId { get; set; } = default!;

        /// <summary>
        /// False=document contains liens of CSC enum ZAST_JPV with attribute Modelové ocenění=N
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("onlineValuationPossible")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OnlineValuationPossible { get; set; } = default!;

        /// <summary>
        /// Number of pages of the document
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pageCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int PageCount { get; set; } = default!;

        /// <summary>
        /// An indication of a document with selected real estates only
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("partialDocument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PartialDocument { get; set; } = default!;

        /// <summary>
        /// An indication of an original version of PDF document created and electronically signed by Cadaster. This document is not machine readable
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("publicDocument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PublicDocument { get; set; } = default!;

        /// <summary>
        /// Description of the document lifecycle
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DeedOfOwnershipDocumentStatus Status { get; set; } = default!;

        /// <summary>
        /// Cadastral territory name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("territoryName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string TerritoryName { get; set; } = default!;

        /// <summary>
        /// Cadastral territory number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("territoryNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int TerritoryNumber { get; set; } = default!;

        /// <summary>
        /// Town code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("townCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long TownCode { get; set; } = default!;

        /// <summary>
        /// Town name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("townName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string TownName { get; set; } = default!;

        /// <summary>
        /// Date of document last update
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("updatedWhen")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime UpdatedWhen { get; set; } = default!;

        /// <summary>
        /// Validity date of the document (Date of creation)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validityDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime ValidityDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Legal relation attributes from deed of ownership
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeedOfOwnershipLegalRelation
    {
        /// <summary>
        /// Html description of the legal relation record
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("htmlText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string HtmlText { get; set; } = default!;

        /// <summary>
        /// Code of legal relation enum (Zástavní právo smluvní,...)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("legalRelationCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string LegalRelationCode { get; set; } = default!;

        /// <summary>
        /// Name of legal relation enum
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("legalRelationDesc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string LegalRelationDesc { get; set; } = default!;

        /// <summary>
        /// Date of legal relation for lien order evaluation
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("orderDateTo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime OrderDateTo { get; set; } = default!;

        /// <summary>
        /// Plain text description of the legal relation record
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("plainText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string PlainText { get; set; } = default!;

        /// <summary>
        /// Proceeding date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("proceedingDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime ProceedingDate { get; set; } = default!;

        /// <summary>
        /// Proceeding number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("proceedingNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string ProceedingNumber { get; set; } = default!;

        /// <summary>
        /// The list of deed of ownership sections for legal relations
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("section")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DeedOfOwnershipLegalRelationSection Section { get; set; } = default!;

        /// <summary>
        /// Subject identification number (IČO) in case of lien
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subjectIdentificationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SubjectIdentificationNumber { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Deed of ownership owner description
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeedOfOwnershipOwnerDTO
    {
        /// <summary>
        /// Formatted subject description (name + address)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; } = default!;

        /// <summary>
        /// ISKN unique ID of subject
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isknSubjectId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int IsknSubjectId { get; set; } = default!;

        /// <summary>
        /// Ratio of real estate ownership
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ownershipRatio")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string OwnershipRatio { get; set; } = default!;

        /// <summary>
        /// Common subject types
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subjectType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DeedOfOwnershipOwnerDTOSubjectType SubjectType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Represents single real estate entity per record specified in deed of ownership with a decomposition to sub entities in a collection of real estates
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DeedOfOwnershipRealEstate
    {
        /// <summary>
        /// Deed of ownership number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deedOfOwnershipNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DeedOfOwnershipNumber { get; set; } = default!;

        /// <summary>
        /// District code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("districtCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string DistrictCode { get; set; } = default!;

        /// <summary>
        /// District name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("districtName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string DistrictName { get; set; } = default!;

        /// <summary>
        /// Deed of ownership document id in CREM
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("documentId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long DocumentId { get; set; } = default!;

        /// <summary>
        /// HTML description of the real estate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("htmlText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string HtmlText { get; set; } = default!;

        /// <summary>
        /// Unique ISKN id of real estate (site, building, flat, building right)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isknId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long IsknId { get; set; } = default!;

        /// <summary>
        /// Plain text description of the real estate
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("plainText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string PlainText { get; set; } = default!;

        /// <summary>
        /// Unique id of CREM real estate record
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("realEstateId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long RealEstateId { get; set; } = default!;

        /// <summary>
        /// basic real estate types
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("realEstateType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DeedOfOwnershipRealEstateRealEstateType RealEstateType { get; set; } = default!;

        /// <summary>
        /// Decomposition of the real estate to all sub-entities if needed (for example flat in multiple buildings on multiple sites
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("realEstates")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<RealEstate> RealEstates { get; set; } = default!;

        /// <summary>
        /// Territory name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("territoryName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string TerritoryName { get; set; } = default!;

        /// <summary>
        /// Territory number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("territoryNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int TerritoryNumber { get; set; } = default!;

        /// <summary>
        /// Town code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("townCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int TownCode { get; set; } = default!;

        /// <summary>
        /// Town code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("townName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string TownName { get; set; } = default!;

        /// <summary>
        /// Deed of ownership validity date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validityDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime ValidityDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Description of the document status with additional attributes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DocumentStatus
    {
        /// <summary>
        /// document id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("documentId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long DocumentId { get; set; } = default!;

        /// <summary>
        /// document price in case of waiting for document generation+payment
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("documentPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DocumentPrice { get; set; } = default!;

        /// <summary>
        /// Description of the document lifecycle
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DocumentStatusStatusCode StatusCode { get; set; } = default!;

        /// <summary>
        /// document status name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string StatusName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// ISKN building entity
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsknBuildingDTO
    {
        /// <summary>
        /// Building number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buildingNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int BuildingNumber { get; set; } = default!;

        /// <summary>
        /// Building type code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buildingType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IsknBuildingDTOBuildingType BuildingType { get; set; } = default!;

        /// <summary>
        /// The list of flats in the building
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("flats")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<IsknFlatDTO> Flats { get; set; } = default!;

        /// <summary>
        /// ISKN building ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isknBuildingId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int IsknBuildingId { get; set; } = default!;

        /// <summary>
        /// ISKN deed of ownership ID
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isknDeedOfOwnershipId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long IsknDeedOfOwnershipId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("townPart")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public TownPartDTO TownPart { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Iskn flat entity
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IsknFlatDTO
    {
        /// <summary>
        /// flat number including house number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int FlatNumber { get; set; } = default!;

        /// <summary>
        /// Iskn deed of ownership ID (unique identifier of the deed of ownership in CUZK
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isknDeedOfOwnershipId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long IsknDeedOfOwnershipId { get; set; } = default!;

        /// <summary>
        /// Iskn flat ID (unique identifier of the flat in CUZK
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isknFlatId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long IsknFlatId { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Paging information
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Paging
    {
        /// <summary>
        /// Limit of items per page
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("limit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Limit { get; set; } = default!;

        /// <summary>
        /// Current page number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("page")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Page { get; set; } = default!;

        /// <summary>
        /// total pages for selected filter
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int TotalPages { get; set; } = default!;

        /// <summary>
        /// total record for selected filter
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("totalRecords")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long TotalRecords { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Deed of ownership definition by a set of real estates defined by either unique iskn id or set of identification attributes
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartialDeedOfOwnershipRealEstate
    {
        /// <summary>
        /// Building number(s)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buildingNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BuildingNumber { get; set; } = default!;

        /// <summary>
        /// Building right end date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buildingRightDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? BuildingRightDate { get; set; } = default!;

        /// <summary>
        /// Code of building type enum (č.p.=1 / č.e.=2, ...)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buildingType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BuildingType { get; set; } = default!;

        /// <summary>
        /// Full flat number including the house before slash number if exists
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FlatNumber { get; set; } = default!;

        /// <summary>
        /// True for "St." prefix of site
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isHomeSite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsHomeSite { get; set; } = default!;

        /// <summary>
        /// ISKN unique entity id if known
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isknRealEstateId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? IsknRealEstateId { get; set; } = default!;

        /// <summary>
        /// basic real estate types
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("realEstateType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PartialDeedOfOwnershipRealEstateRealEstateType RealEstateType { get; set; } = default!;

        /// <summary>
        /// by default the document will be generated only for the selected real estates, otherwise the complete document for given set of real estates will be created
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("setPartialDocument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SetPartialDocument { get; set; } = default!;

        /// <summary>
        /// Code of cadaster site enum evidence (PKN/PZE)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("siteKind")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SiteKind { get; set; } = default!;

        /// <summary>
        /// Full Site number including subsite number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("siteNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SiteNumber { get; set; } = default!;

        /// <summary>
        /// Site number part in case siteKind=PZE
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sitePart")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? SitePart { get; set; } = default!;

        /// <summary>
        /// Code of cadaster site source enum in case siteKind=PZE
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("siteSource")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SiteSource { get; set; } = default!;

        /// <summary>
        /// Town part code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("townPartCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? TownPartCode { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Evidence of all entities(site, building, flat, building right), its attributes and relations. In case of 1:N relations (1 flat in multiple buildings on multiple sites it means N records (usually N=number of sites) of this entity, always with the corresponding attributes for a given record
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RealEstate
    {
        /// <summary>
        /// BPEJ number for a site
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("bpej")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int Bpej { get; set; } = default!;

        /// <summary>
        /// Shared parts of the building included (in case of flatType=Jednotka dle zákona 79)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buildingIncluded")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BuildingIncluded { get; set; } = default!;

        /// <summary>
        /// Complete list of building numbers divided by comma
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buildingNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string BuildingNumber { get; set; } = default!;

        /// <summary>
        /// Code of building part of enum (parcela součástí práva stavby, budovy, samostatná budova, dočasná budova)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buildingPartOf")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RealEstateBuildingPartOf BuildingPartOf { get; set; } = default!;

        /// <summary>
        /// Building part of site number in case of buildingPartOf=SITE
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buildingPartOfSite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string BuildingPartOfSite { get; set; } = default!;

        /// <summary>
        /// Building right date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buildingRightDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime BuildingRightDate { get; set; } = default!;

        /// <summary>
        /// Code of building type enum (č.p. / č.e., ...)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buildingType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string BuildingType { get; set; } = default!;

        /// <summary>
        /// Deed of ownership of building if it belongs to another owner
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deedOfOwnBuilding")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DeedOfOwnBuilding { get; set; } = default!;

        /// <summary>
        /// Deed of ownership of site if it belongs to another owner
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deedOfOwnSite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int DeedOfOwnSite { get; set; } = default!;

        /// <summary>
        /// Full flat number including the house number if exists
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string FlatNumber { get; set; } = default!;

        /// <summary>
        /// Code of flat type enum (Jednotka dle NOZ, ...)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("flatType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string FlatType { get; set; } = default!;

        /// <summary>
        /// GPS latitude of the site definition point
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gpsLatitude")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public float GpsLatitude { get; set; } = default!;

        /// <summary>
        /// GPS longitude of the site definition point
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("gpsLongitude")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public float GpsLongitude { get; set; } = default!;

        /// <summary>
        /// True for "St." prefix of site
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isHomeSite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsHomeSite { get; set; } = default!;

        /// <summary>
        /// True in case of the main building if flat is defined in multiple buildings. Only one building is the main one
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isMainBuilding")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsMainBuilding { get; set; } = default!;

        /// <summary>
        /// ISKN unique building id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isknBuildingId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long IsknBuildingId { get; set; } = default!;

        /// <summary>
        /// ISKN unique building right id)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isknBuildingRightId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long IsknBuildingRightId { get; set; } = default!;

        /// <summary>
        /// ISKN unique flat id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isknFlatId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long IsknFlatId { get; set; } = default!;

        /// <summary>
        /// Specific formatted flat number (always with 4 digits) starting with a house number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isknFlatNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int IsknFlatNumber { get; set; } = default!;

        /// <summary>
        /// ISKN unique site id
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isknSiteId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long IsknSiteId { get; set; } = default!;

        /// <summary>
        /// Land area [m2]
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("landArea")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int LandArea { get; set; } = default!;

        /// <summary>
        /// Code of manner of use protection enum
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mannerOfProtection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string MannerOfProtection { get; set; } = default!;

        /// <summary>
        /// Code of manner of use building enum
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mannerOfUseBuilding")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string MannerOfUseBuilding { get; set; } = default!;

        /// <summary>
        /// Code of manner of use building right enum
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mannerOfUseBuildingRight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string MannerOfUseBuildingRight { get; set; } = default!;

        /// <summary>
        /// Code of manner of use flat enum
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mannerOfUseFlat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string MannerOfUseFlat { get; set; } = default!;

        /// <summary>
        /// Code of manner of use site enum
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("mannerOfUseSite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string MannerOfUseSite { get; set; } = default!;

        /// <summary>
        /// Name of the original cadastral territory
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("originalTerritory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string OriginalTerritory { get; set; } = default!;

        /// <summary>
        /// Shared parts of the real estate property included (in case of flatType=Jednotka dle zákona NOZ)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("propertyIncluded")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PropertyIncluded { get; set; } = default!;

        /// <summary>
        /// basic real estate types
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("realEstateType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.Never)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public RealEstateType RealEstateType { get; set; } = default!;

        /// <summary>
        /// Shared parts ratio 
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sharedPartsRatio")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SharedPartsRatio { get; set; } = default!;

        /// <summary>
        /// Code of cadaster site enum evidence (PKN/PZE)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("siteKind")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SiteKind { get; set; } = default!;

        /// <summary>
        /// Site number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("siteNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SiteNumber { get; set; } = default!;

        /// <summary>
        /// Site number part in case siteKind=PZE
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sitePart")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int SitePart { get; set; } = default!;

        /// <summary>
        /// Code of cadaster site source enum in case siteKind=PZE
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("siteSource")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SiteSource { get; set; } = default!;

        /// <summary>
        /// Code of Site type enum
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("siteTypeCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SiteTypeCode { get; set; } = default!;

        /// <summary>
        /// Shared parts of the sites included (in case of flatType=Jednotka dle zákona 79)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sitesIncluded")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool SitesIncluded { get; set; } = default!;

        /// <summary>
        /// Town part name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("townPart")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string TownPart { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A new document download from CUZK request specification
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequestDownloadDeedOfOwnership
    {
        /// <summary>
        /// Deed of ownership number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deedOfOwnershipNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? DeedOfOwnershipNumber { get; set; } = default!;

        /// <summary>
        /// Deed of ownership ISKN unique ID (an alternative to territoryNumber+deedOfOwnershipNumber)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isknDeedOfOwnershipId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? IsknDeedOfOwnershipId { get; set; } = default!;

        /// <summary>
        /// True for request of public document (PDF for reading purposes only)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("publicDocument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? PublicDocument { get; set; } = default!;

        /// <summary>
        /// The collection of real estate entities in case of partial deed of ownership request (single entity type is supported for a document)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("realEstates")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<PartialDeedOfOwnershipRealEstate?>? RealEstates { get; set; } = default!;

        /// <summary>
        /// Territory number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("territoryNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? TerritoryNumber { get; set; } = default!;

        /// <summary>
        /// Validity date of the document (default today or date in history)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validityDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? ValidityDate { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response object for search building by address
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseGetFlatsForAddressDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("building")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public IsknBuildingDTO Building { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response object for legal relations import from deed of ownership document
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseGetLegalRelations
    {
        /// <summary>
        /// Collection of legal relations in a deed of ownership document
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("items")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<DeedOfOwnershipLegalRelation> Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paging")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Paging Paging { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response object for owners import from deed of ownership document
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseGetOwners
    {
        /// <summary>
        /// Collection of owners in a deed of ownership document
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("items")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<DeedOfOwnershipOwnerDTO> Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paging")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Paging Paging { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response object for real estates import from deed of ownership document
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseGetRealEstates
    {
        /// <summary>
        /// Collection of real estates in a deed of ownership document
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("items")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<DeedOfOwnershipRealEstate> Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paging")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Paging Paging { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response object for searching existing deed of ownership documents
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseSearchDeedOfOwnershipDocuments
    {
        /// <summary>
        /// Collection of documents
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("items")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<DeedOfOwnershipDocument> Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paging")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Paging Paging { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Response object for upload xml/pdf document
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResponseUploadDocumentDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("documentId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long DocumentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("legalRelationItems")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<DeedOfOwnershipLegalRelation> LegalRelationItems { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstateItems")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<DeedOfOwnershipRealEstate> RealEstateItems { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Town part object
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TownPartDTO
    {
        /// <summary>
        /// ISKN code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("townPartCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int TownPartCode { get; set; } = default!;

        /// <summary>
        /// Town part name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("townPartName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string TownPartName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// anonymized document content specific for selected company
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CompanyCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"KB")]
        KB = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"MPSS")]
        MPSS = 1,

    }

    /// <summary>
    /// The list of deed of ownership sections for legal relations
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"B1")]
        B1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeedOfOwnershipDocumentStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CREATED")]
        CREATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WAITING_FOR_GENERATION")]
        WAITING_FOR_GENERATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WAITING_FOR_PRICE_CONFIRMATION")]
        WAITING_FOR_PRICE_CONFIRMATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INVOICED")]
        INVOICED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeedOfOwnershipLegalRelationSection
    {

        [System.Runtime.Serialization.EnumMember(Value = @"B1")]
        B1 = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"C")]
        C = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"D")]
        D = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeedOfOwnershipOwnerDTOSubjectType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PERSON")]
        PERSON = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPANY")]
        COMPANY = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MARITAL_COMMON_PROPERTY")]
        MARITAL_COMMON_PROPERTY = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DeedOfOwnershipRealEstateRealEstateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SITE")]
        SITE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BUILDING")]
        BUILDING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FLAT")]
        FLAT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BUILDING_RIGHT")]
        BUILDING_RIGHT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DocumentStatusStatusCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CREATED")]
        CREATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"WAITING_FOR_GENERATION")]
        WAITING_FOR_GENERATION = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"WAITING_FOR_PRICE_CONFIRMATION")]
        WAITING_FOR_PRICE_CONFIRMATION = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"INVOICED")]
        INVOICED = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IsknBuildingDTOBuildingType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"C_P")]
        C_P = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"C_E")]
        C_E = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BEZ_CP_CE")]
        BEZ_CP_CE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ROZESTAV")]
        ROZESTAV = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"POSCH_GAR")]
        POSCH_GAR = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"VOD_DILO")]
        VOD_DILO = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"S_ROZ_JED")]
        S_ROZ_JED = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PartialDeedOfOwnershipRealEstateRealEstateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SITE")]
        SITE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BUILDING")]
        BUILDING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FLAT")]
        FLAT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BUILDING_RIGHT")]
        BUILDING_RIGHT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RealEstateBuildingPartOf
    {

        [System.Runtime.Serialization.EnumMember(Value = @"BUILDING_RIGHT")]
        BUILDING_RIGHT = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"SITE")]
        SITE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"STANDALONE_BUILDING")]
        STANDALONE_BUILDING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"TEMPORARY_BUILDING")]
        TEMPORARY_BUILDING = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum RealEstateType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SITE")]
        SITE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"BUILDING")]
        BUILDING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"FLAT")]
        FLAT = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"BUILDING_RIGHT")]
        BUILDING_RIGHT = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTime>
    {
        public override System.DateTime Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTime.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTime value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable? _client;
        private System.IDisposable? _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }



}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603