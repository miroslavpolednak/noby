//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"

namespace ExternalServices.MpHome.V1._1.MpHomeWrapper
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Client 
    {
        private string _baseUrl = "";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<System.Text.Json.JsonSerializerOptions> _settings;

        public Client(string baseUrl, System.Net.Http.HttpClient httpClient)
        {
            BaseUrl = baseUrl;
            _httpClient = httpClient;
            _settings = new System.Lazy<System.Text.Json.JsonSerializerOptions>(CreateSerializerSettings);
        }

        private System.Text.Json.JsonSerializerOptions CreateSerializerSettings()
        {
            var settings = new System.Text.Json.JsonSerializerOptions();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        public string BaseUrl
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }

        protected System.Text.Json.JsonSerializerOptions JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(System.Text.Json.JsonSerializerOptions settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// vytvoří/updatuje záznam o úvěru v KonsDB v tabulce dbo.uver na základě poskytnutých dat
        /// </summary>
        /// <param name="loanId">Id uveru</param>
        /// <param name="body">Loan Request</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FomsUpdateLoanAsync(long loanId, MortgageRequest body)
        {
            return FomsUpdateLoanAsync(loanId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// vytvoří/updatuje záznam o úvěru v KonsDB v tabulce dbo.uver na základě poskytnutých dat
        /// </summary>
        /// <param name="loanId">Id uveru</param>
        /// <param name="body">Loan Request</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FomsUpdateLoanAsync(long loanId, MortgageRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (loanId == null)
                throw new System.ArgumentNullException("loanId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Loan/{loanId}");
            urlBuilder_.Replace("{loanId}", System.Uri.EscapeDataString(ConvertToString(loanId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// vytvoří/updatuje vazbu mezi úvěrem a dlužníky/spoludlužníky dle zadaného partnerId a loanId
        /// </summary>
        /// <param name="loanId">Id Uveru</param>
        /// <param name="partnerId">Id Partnera</param>
        /// <param name="body">Vazba</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FomsUpdateLoanPartnerLinkAsync(long loanId, long partnerId, LoanLinkRequest body)
        {
            return FomsUpdateLoanPartnerLinkAsync(loanId, partnerId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// vytvoří/updatuje vazbu mezi úvěrem a dlužníky/spoludlužníky dle zadaného partnerId a loanId
        /// </summary>
        /// <param name="loanId">Id Uveru</param>
        /// <param name="partnerId">Id Partnera</param>
        /// <param name="body">Vazba</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FomsUpdateLoanPartnerLinkAsync(long loanId, long partnerId, LoanLinkRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (loanId == null)
                throw new System.ArgumentNullException("loanId");

            if (partnerId == null)
                throw new System.ArgumentNullException("partnerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Loan/{loanId}/link/{partnerId}");
            urlBuilder_.Replace("{loanId}", System.Uri.EscapeDataString(ConvertToString(loanId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{partnerId}", System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Odstraní vazbu mezi úvěrem a dlužníky/spoludlužníky dle zadaného partnerId a loanId.
        /// </summary>
        /// <param name="loanId">Id Uveru</param>
        /// <param name="partnerId">Id Partnera</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FomsDeletePartnerLoanLinkAsync(long loanId, long partnerId)
        {
            return FomsDeletePartnerLoanLinkAsync(loanId, partnerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Odstraní vazbu mezi úvěrem a dlužníky/spoludlužníky dle zadaného partnerId a loanId.
        /// </summary>
        /// <param name="loanId">Id Uveru</param>
        /// <param name="partnerId">Id Partnera</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FomsDeletePartnerLoanLinkAsync(long loanId, long partnerId, System.Threading.CancellationToken cancellationToken)
        {
            if (loanId == null)
                throw new System.ArgumentNullException("loanId");

            if (partnerId == null)
                throw new System.ArgumentNullException("partnerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Loan/{loanId}/link/{partnerId}");
            urlBuilder_.Replace("{loanId}", System.Uri.EscapeDataString(ConvertToString(loanId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{partnerId}", System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Vytvoří/updatuje vazbu mezi úvěrem a dlužníky/spoludlužníky dle zadaného partnerId a loanId
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FomsLoanRelationshipChangeResposeRelationshipChangesResponse> FomsUpdateLoanPartnerLinksAsync(long loanId, LoanLinksRequest body)
        {
            return FomsUpdateLoanPartnerLinksAsync(loanId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Vytvoří/updatuje vazbu mezi úvěrem a dlužníky/spoludlužníky dle zadaného partnerId a loanId
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FomsLoanRelationshipChangeResposeRelationshipChangesResponse> FomsUpdateLoanPartnerLinksAsync(long loanId, LoanLinksRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (loanId == null)
                throw new System.ArgumentNullException("loanId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Loan/{loanId}/link");
            urlBuilder_.Replace("{loanId}", System.Uri.EscapeDataString(ConvertToString(loanId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FomsLoanRelationshipChangeResposeRelationshipChangesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<PartnerResponse> FomsGetPartnerAsync(long partnerId)
        {
            return FomsGetPartnerAsync(partnerId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<PartnerResponse> FomsGetPartnerAsync(long partnerId, System.Threading.CancellationToken cancellationToken)
        {
            if (partnerId == null)
                throw new System.ArgumentNullException("partnerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Partner/{partnerId}");
            urlBuilder_.Replace("{partnerId}", System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PartnerResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Vytvoří/updatuje partnera v KonsDB na základě poskytnutých dat.
        /// </summary>
        /// <param name="partnerId">PartnerId na vstupu je získáné ze StarBuild služby provolané před vytvářením partnera v KonsDB.</param>
        /// <param name="body">The partner request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FomsUpdatePartnerAsync(long partnerId, PartnerRequest body)
        {
            return FomsUpdatePartnerAsync(partnerId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Vytvoří/updatuje partnera v KonsDB na základě poskytnutých dat.
        /// </summary>
        /// <param name="partnerId">PartnerId na vstupu je získáné ze StarBuild služby provolané před vytvářením partnera v KonsDB.</param>
        /// <param name="body">The partner request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FomsUpdatePartnerAsync(long partnerId, PartnerRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (partnerId == null)
                throw new System.ArgumentNullException("partnerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Partner/{partnerId}");
            urlBuilder_.Replace("{partnerId}", System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Aktualizuje základní data partnera v KonsDB na základě partnerId a poskytnutých dat
        /// </summary>
        /// <param name="partnerId">The partner identifier.</param>
        /// <param name="body">The partner request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FomsUpdatePartner2Async(long partnerId, PartnerBaseRequest body)
        {
            return FomsUpdatePartner2Async(partnerId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Aktualizuje základní data partnera v KonsDB na základě partnerId a poskytnutých dat
        /// </summary>
        /// <param name="partnerId">The partner identifier.</param>
        /// <param name="body">The partner request.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FomsUpdatePartner2Async(long partnerId, PartnerBaseRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (partnerId == null)
                throw new System.ArgumentNullException("partnerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Partner/{partnerId}/basicdata");
            urlBuilder_.Replace("{partnerId}", System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Vytvoření kontaktu partnera v KonsDB na základě poskytnutých dat.
        /// </summary>
        /// <param name="partnerId">Id partnera.</param>
        /// <param name="body">Data pre kontakt.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactIdResponse> FomsCreateContactAsync(long partnerId, ContactData body)
        {
            return FomsCreateContactAsync(partnerId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Vytvoření kontaktu partnera v KonsDB na základě poskytnutých dat.
        /// </summary>
        /// <param name="partnerId">Id partnera.</param>
        /// <param name="body">Data pre kontakt.</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactIdResponse> FomsCreateContactAsync(long partnerId, ContactData body, System.Threading.CancellationToken cancellationToken)
        {
            if (partnerId == null)
                throw new System.ArgumentNullException("partnerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Partner/{partnerId}/contact");
            urlBuilder_.Replace("{partnerId}", System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactIdResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 201)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactIdResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Změna kontaktů partnera v KonsDB na základě poskytnutých dat.
        /// </summary>
        /// <param name="partnerId">Id partnera.</param>
        /// <param name="body">Seznam kontaktů pro aktualizaci</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<ContactChangesResponse> FomsBulkUpdateContactAsync(long partnerId, System.Collections.Generic.IEnumerable<ContactRequest> body)
        {
            return FomsBulkUpdateContactAsync(partnerId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Změna kontaktů partnera v KonsDB na základě poskytnutých dat.
        /// </summary>
        /// <param name="partnerId">Id partnera.</param>
        /// <param name="body">Seznam kontaktů pro aktualizaci</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<ContactChangesResponse> FomsBulkUpdateContactAsync(long partnerId, System.Collections.Generic.IEnumerable<ContactRequest> body, System.Threading.CancellationToken cancellationToken)
        {
            if (partnerId == null)
                throw new System.ArgumentNullException("partnerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Partner/{partnerId}/contact/bulk");
            urlBuilder_.Replace("{partnerId}", System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ContactChangesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Smazání kontaktu partnera v KonsDB na základě poskytnutého contactId a partnerId
        /// </summary>
        /// <param name="partnerId">Id partnera o jehož kontakt se jedná</param>
        /// <param name="contactId">Id kontaktu ke smazání</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FomsDeleteContactAsync(long partnerId, long contactId)
        {
            return FomsDeleteContactAsync(partnerId, contactId, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Smazání kontaktu partnera v KonsDB na základě poskytnutého contactId a partnerId
        /// </summary>
        /// <param name="partnerId">Id partnera o jehož kontakt se jedná</param>
        /// <param name="contactId">Id kontaktu ke smazání</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FomsDeleteContactAsync(long partnerId, long contactId, System.Threading.CancellationToken cancellationToken)
        {
            if (partnerId == null)
                throw new System.ArgumentNullException("partnerId");

            if (contactId == null)
                throw new System.ArgumentNullException("contactId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Partner/{partnerId}/contact/{contactId}");
            urlBuilder_.Replace("{partnerId}", System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{contactId}", System.Uri.EscapeDataString(ConvertToString(contactId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updatuje adresu partnera v KonsDB na základě partnerId a poskytnutých dat adresy.
        /// </summary>
        /// <param name="partnerId">Id partnera o jehož adresu se jedná</param>
        /// <param name="body">Detail adresy</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FomsUpdateAddressAsync(long partnerId, AddressData body)
        {
            return FomsUpdateAddressAsync(partnerId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updatuje adresu partnera v KonsDB na základě partnerId a poskytnutých dat adresy.
        /// </summary>
        /// <param name="partnerId">Id partnera o jehož adresu se jedná</param>
        /// <param name="body">Detail adresy</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FomsUpdateAddressAsync(long partnerId, AddressData body, System.Threading.CancellationToken cancellationToken)
        {
            if (partnerId == null)
                throw new System.ArgumentNullException("partnerId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Partner/{partnerId}/address");
            urlBuilder_.Replace("{partnerId}", System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Updatuje doklad partnera v KonsDB na základě partnerId.
        /// </summary>
        /// <param name="partnerId">Id partnera o jehož identifikační dokument se jedná</param>
        /// <param name="body">Detail dokladu</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FomsUpdateIdentificationDocumentAsync(long partnerId, IdentificationDocument body)
        {
            return FomsUpdateIdentificationDocumentAsync(partnerId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updatuje doklad partnera v KonsDB na základě partnerId.
        /// </summary>
        /// <param name="partnerId">Id partnera o jehož identifikační dokument se jedná</param>
        /// <param name="body">Detail dokladu</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FomsUpdateIdentificationDocumentAsync(long partnerId, IdentificationDocument body, System.Threading.CancellationToken cancellationToken)
        {
            if (partnerId == null)
                throw new System.ArgumentNullException("partnerId");

            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Partner/{partnerId}/identificationDocument");
            urlBuilder_.Replace("{partnerId}", System.Uri.EscapeDataString(ConvertToString(partnerId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Vytvoří/updatuje vazbu mezi dvěmi partnery
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<FomsPartnerRelationshipChangeResposeRelationshipChangesResponse> FomsUpdatePartnerRelationLinkAsync(PartnerRelationshipList body)
        {
            return FomsUpdatePartnerRelationLinkAsync(body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Vytvoří/updatuje vazbu mezi dvěmi partnery
        /// </summary>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<FomsPartnerRelationshipChangeResposeRelationshipChangesResponse> FomsUpdatePartnerRelationLinkAsync(PartnerRelationshipList body, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Partner/link");

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("text/plain"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<FomsPartnerRelationshipChangeResposeRelationshipChangesResponse>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Odstraní vazbu mezi dvěma partnery na základě ich ID.&lt;br /&gt;
        /// <br/>Smazáním vazby je ukončena její platnostDo.
        /// </summary>
        /// <param name="partner1Id">Id partnera 1</param>
        /// <param name="partner2Id">Id partnera 2</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FomsDeletePartnerRelationLinkAsync(long partner1Id, long partner2Id)
        {
            return FomsDeletePartnerRelationLinkAsync(partner1Id, partner2Id, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Odstraní vazbu mezi dvěma partnery na základě ich ID.&lt;br /&gt;
        /// <br/>Smazáním vazby je ukončena její platnostDo.
        /// </summary>
        /// <param name="partner1Id">Id partnera 1</param>
        /// <param name="partner2Id">Id partnera 2</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FomsDeletePartnerRelationLinkAsync(long partner1Id, long partner2Id, System.Threading.CancellationToken cancellationToken)
        {
            if (partner1Id == null)
                throw new System.ArgumentNullException("partner1Id");

            if (partner2Id == null)
                throw new System.ArgumentNullException("partner2Id");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Partner/link?");
            urlBuilder_.Append(System.Uri.EscapeDataString("partner1Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partner1Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("partner2Id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(partner2Id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 204)
                        {
                            return;
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// vytvoří/updatuje záznam o úvěru v KonsDB v tabulce dbo.uver na základě poskytnutých dat
        /// </summary>
        /// <param name="loanId">Id uveru</param>
        /// <param name="body">Loan Request</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FomsUpdateLoan2Async(long loanId, LoanRequest body)
        {
            return FomsUpdateLoan2Async(loanId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// vytvoří/updatuje záznam o úvěru v KonsDB v tabulce dbo.uver na základě poskytnutých dat
        /// </summary>
        /// <param name="loanId">Id uveru</param>
        /// <param name="body">Loan Request</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FomsUpdateLoan2Async(long loanId, LoanRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (loanId == null)
                throw new System.ArgumentNullException("loanId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Savings/loan/{loanId}");
            urlBuilder_.Replace("{loanId}", System.Uri.EscapeDataString(ConvertToString(loanId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// vytvoří/updatuje záznam o spoření (v tabulce dbo.sporeni) v KonsDB na základě poskytnutých dat
        /// <br/>a naváže spoření na konkrétního partnera dle zadaného partnerId( = vytvoří vazbu mezi partnerId a sporeniId)
        /// </summary>
        /// <param name="savingId">Id Sporeni</param>
        /// <param name="body">Saving Request</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task FomsUpdateSavingsAsync(long savingId, SavingRequest body)
        {
            return FomsUpdateSavingsAsync(savingId, body, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// vytvoří/updatuje záznam o spoření (v tabulce dbo.sporeni) v KonsDB na základě poskytnutých dat
        /// <br/>a naváže spoření na konkrétního partnera dle zadaného partnerId( = vytvoří vazbu mezi partnerId a sporeniId)
        /// </summary>
        /// <param name="savingId">Id Sporeni</param>
        /// <param name="body">Saving Request</param>
        /// <returns>Success</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task FomsUpdateSavingsAsync(long savingId, SavingRequest body, System.Threading.CancellationToken cancellationToken)
        {
            if (savingId == null)
                throw new System.ArgumentNullException("savingId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/1.1/foms/Savings/{savingId}");
            urlBuilder_.Replace("{savingId}", System.Uri.EscapeDataString(ConvertToString(savingId, System.Globalization.CultureInfo.InvariantCulture)));

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(System.Text.Json.JsonSerializer.Serialize(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json-patch+json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("PUT");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            return;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ModelErrorWrapper>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ModelErrorWrapper>("Bad Request", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unauthorized", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Server Error", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ProblemDetails>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<ProblemDetails>("Not Found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = System.Text.Json.JsonSerializer.Deserialize<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    {
                        var typedBody = await System.Text.Json.JsonSerializer.DeserializeAsync<T>(responseStream, JsonSerializerSettings, cancellationToken).ConfigureAwait(false);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (System.Text.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Update")]
        Update = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Delete")]
        Delete = 2,

    }

    /// <summary>
    /// Adresa
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressData
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public AddressType Type { get; set; }

        /// <summary>
        /// Ulice
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.StringLength(30)]
        public string Street { get; set; }

        /// <summary>
        /// Orientační číslo budovy
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("buildingIdentificationNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string BuildingIdentificationNumber { get; set; }

        /// <summary>
        /// Číslo popisné
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("landRegistryNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        public string LandRegistryNumber { get; set; }

        /// <summary>
        /// PSČ
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(8)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\d{5}")]
        public string PostCode { get; set; }

        /// <summary>
        /// Obec
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string City { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AddressType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Permanent")]
        Permanent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Mailing")]
        Mailing = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ClientRelationshipType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Owner")]
        Owner = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Parent")]
        Parent = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Descendant")]
        Descendant = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Sibling")]
        Sibling = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HusbandOrWife")]
        HusbandOrWife = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LegalGuardian")]
        LegalGuardian = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"Ward")]
        Ward = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"ManagingDirector")]
        ManagingDirector = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Organizations")]
        Organizations = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessRelationship")]
        BusinessRelationship = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Other")]
        Other = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"RegisteredPartner")]
        RegisteredPartner = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessOwner")]
        BusinessOwner = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"OwnerOrganization")]
        OwnerOrganization = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"Partners")]
        Partners = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"RegisteredPartnership")]
        RegisteredPartnership = 15,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactData
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContactType Type { get; set; }

        /// <summary>
        /// Hodnota kontaktu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        /// <summary>
        /// {true} ak je kontakt primárny. Pri nezadaní je {false}.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("primary")]
        public bool Primary { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactChangesResponse
    {
        /// <summary>
        /// List of updated contacts
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactList")]
        public System.Collections.Generic.ICollection<ChangeResponse> ContactList { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactIdResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public long ContactId { get; set; }

    }

    /// <summary>
    /// Informácie o kontakte / contact data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactRequest
    {
        /// <summary>
        /// Id kontaktu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long? Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContactType Type { get; set; }

        /// <summary>
        /// Hodnota kontaktu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string Value { get; set; }

        /// <summary>
        /// {true} ak je kontakt primárny. Pri nezadaní je {false}.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("primary")]
        public bool Primary { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("requestedAction")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ActionType RequestedAction { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactResponse
    {
        /// <summary>
        /// Id kontaktu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContactType Type { get; set; }

        /// <summary>
        /// Hodnota kontaktu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Value { get; set; }

        /// <summary>
        /// {true} ak je kontakt primárny. Pri nezadaní je {false}.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("primary")]
        public bool Primary { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContactType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Mobile")]
        Mobile = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"BusinessMobile")]
        BusinessMobile = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FixedHomeLine")]
        FixedHomeLine = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"FixedBusinessLine")]
        FixedBusinessLine = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"Email")]
        Email = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MarketingEmail")]
        MarketingEmail = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Fax")]
        Fax = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"HistoricalPhoneContact")]
        HistoricalPhoneContact = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"OtherPhoneContact")]
        OtherPhoneContact = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"CaasMobile")]
        CaasMobile = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"CaasEmail")]
        CaasEmail = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"DataBox")]
        DataBox = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ContractRelationshipType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NotSpecified")]
        NotSpecified = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Owner")]
        Owner = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"CoDebtor")]
        CoDebtor = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"Accessor")]
        Accessor = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"HusbandOrWife")]
        HusbandOrWife = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"LegalRepresentative")]
        LegalRepresentative = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"CollisionGuardian")]
        CollisionGuardian = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"Guardian")]
        Guardian = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"Guarantor")]
        Guarantor = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"GuarantorHusbandOrWife")]
        GuarantorHusbandOrWife = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"Intermediary")]
        Intermediary = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"ManagingDirector")]
        ManagingDirector = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"Child")]
        Child = 12,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// Error code - optional
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public string Code { get; set; }

        /// <summary>
        /// Error message title
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        /// <summary>
        /// Error description message
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ResultStatus Status { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum EtlDataSourceType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"NotDefined")]
        NotDefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"StarBuildFullLoad")]
        StarBuildFullLoad = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"StarBuildNTO")]
        StarBuildNTO = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"FOMS")]
        FOMS = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"EForms")]
        EForms = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"MPHome_eId")]
        MPHome_eId = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"MPHome_UnsecuredLoan")]
        MPHome_UnsecuredLoan = 6,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum FomsActionType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Update")]
        Update = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Create")]
        Create = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Delete")]
        Delete = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"NotFound")]
        NotFound = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FomsContractRelationship
    {
        /// <summary>
        /// ID partnera
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("partnerId")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public long PartnerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contractRelationshipType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContractRelationshipType ContractRelationshipType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("clientRelationshipType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ClientRelationshipType ClientRelationshipType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("oppositeClientRelationshipType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ClientRelationshipType OppositeClientRelationshipType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FomsLoanRelationshipChangeRespose
    {

        [System.Text.Json.Serialization.JsonPropertyName("contractRelationshipType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContractRelationshipType ContractRelationshipType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("partnerId")]
        public long PartnerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("permormedAction")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FomsActionType PermormedAction { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FomsLoanRelationshipChangeResposeRelationshipChangesResponse
    {
        /// <summary>
        /// List of updated relationships
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("relationships")]
        public System.Collections.Generic.ICollection<FomsLoanRelationshipChangeRespose> Relationships { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FomsPartnerRelationshipChangeRespose
    {
        /// <summary>
        /// Id Partner 1
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("partner1Id")]
        public long Partner1Id { get; set; }

        /// <summary>
        /// Id Partner 2
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("partner2Id")]
        public long Partner2Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("partner1To2RelationshipType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ClientRelationshipType Partner1To2RelationshipType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("partner2To1RelationshipType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ClientRelationshipType Partner2To1RelationshipType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("performedAction")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public FomsActionType PerformedAction { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FomsPartnerRelationshipChangeResposeRelationshipChangesResponse
    {
        /// <summary>
        /// List of updated relationships
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("relationships")]
        public System.Collections.Generic.ICollection<FomsPartnerRelationshipChangeRespose> Relationships { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum GenderEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unknown")]
        Unknown = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Male")]
        Male = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Female")]
        Female = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ChangeResponse
    {
        /// <summary>
        /// Id zmenenej položky
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public long Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("performedAction")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ActionType PerformedAction { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum IdentificationCardType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Undefined")]
        Undefined = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IDCard")]
        IDCard = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Passport")]
        Passport = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ResidencePermit")]
        ResidencePermit = 3,

    }

    /// <summary>
    /// Informace o dokladu
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentificationDocument
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public IdentificationCardType Type { get; set; }

        /// <summary>
        /// Číslo dokladu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("number")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string Number { get; set; }

        /// <summary>
        /// Vydavatel dokladu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string IssuedBy { get; set; }

        /// <summary>
        /// ISO kod krajiny, která vydala doklad
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuingCountry")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string IssuingCountry { get; set; }

        /// <summary>
        /// Datum vydání dokladu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuedOn")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime IssuedOn { get; set; }

        /// <summary>
        /// Datum platnosti dokladu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTime ValidTo { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanContractRelationship
    {
        /// <summary>
        /// ID partnera
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("partnerId")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public long PartnerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contractRelationshipType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContractRelationshipType ContractRelationshipType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanLink
    {
        /// <summary>
        /// Partner, kterého navazujeme
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("partnerId")]
        public long PartnerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contractRelationshipType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContractRelationshipType ContractRelationshipType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanLinkRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ContractRelationshipType Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanLinksRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("relationships")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<LoanLink> Relationships { get; set; } = new System.Collections.ObjectModel.Collection<LoanLink>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LoanRequest
    {
        /// <summary>
        /// ID hlavního dlužníka
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("partnerId")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public long PartnerId { get; set; }

        /// <summary>
        /// Číslo smlouvy úvěru
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loanContractNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string LoanContractNumber { get; set; }

        /// <summary>
        /// Výše mesicicni splátky
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("monthlyInstallment")]
        public double? MonthlyInstallment { get; set; }

        /// <summary>
        /// VyseUveru
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loanAmount")]
        public double? LoanAmount { get; set; }

        /// <summary>
        /// Řádná sazba
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("interestRate")]
        public double? InterestRate { get; set; }

        /// <summary>
        /// Delka Fixace Urokove Sazby
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fixationPeriod")]
        public int? FixationPeriod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loanType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public LoanType LoanType { get; set; }

        /// <summary>
        /// AkceUveruId
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loanEventCode")]
        public int? LoanEventCode { get; set; }

        /// <summary>
        /// DruhUveru
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loanKind")]
        public int LoanKind { get; set; }

        /// <summary>
        /// UcelUveruId
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loanPurposeId")]
        public int? LoanPurposeId { get; set; }

        /// <summary>
        /// Předpokládané datum 1. čerpání
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expected1stDrawDate")]
        public System.DateTime? Expected1stDrawDate { get; set; }

        /// <summary>
        /// Datum podpisu první žádosti
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("firstRequestSignDate")]
        public System.DateTime? FirstRequestSignDate { get; set; }

        /// <summary>
        /// IdPoradce
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("consultantId")]
        public long? ConsultantId { get; set; }

        /// <summary>
        /// ID spoření
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("savingId")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public long SavingId { get; set; }

        /// <summary>
        /// DatumDosporovaniOd
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("savingFromDate")]
        public System.DateTime? SavingFromDate { get; set; }

        /// <summary>
        /// MesicniDosporovani
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("monthlySaving")]
        public double? MonthlySaving { get; set; }

        /// <summary>
        /// CisloSporicihoUctu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("savingAccountNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string SavingAccountNumber { get; set; }

        /// <summary>
        /// definuje vztah úvěru k dalším osobám
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("relationships")]
        public System.Collections.Generic.ICollection<FomsContractRelationship> Relationships { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LoanType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"Unspecified")]
        Unspecified = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"PDU")]
        PDU = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PKU")]
        PKU = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"KBMortgage")]
        KBMortgage = 3,

    }

    /// <summary>
    /// Obsahuje popis chýb, ktoré vznikli pri validácii vstupných údajov,
    /// <br/>kde ako {Key} do dictionary slúži názov nesprávne zadaného parametra
    /// <br/>a {Value} je zoznam chybových hlášok.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ModelErrorWrapper
    {

        [System.Text.Json.Serialization.JsonPropertyName("errors")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>> Errors { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int? Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("traceId")]
        public string TraceId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MortgageRequest
    {
        /// <summary>
        /// ID hlavního dlužníka
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("partnerId")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public long PartnerId { get; set; }

        /// <summary>
        /// Číslo smlouvy úvěru
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loanContractNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string LoanContractNumber { get; set; }

        /// <summary>
        /// Výše mesicicni splátky
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("monthlyInstallment")]
        public decimal? MonthlyInstallment { get; set; }

        /// <summary>
        /// VyseUveru
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loanAmount")]
        public decimal? LoanAmount { get; set; }

        /// <summary>
        /// Řádná sazba
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("interestRate")]
        public decimal? InterestRate { get; set; }

        /// <summary>
        /// Delka Fixace Urokove Sazby
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("fixationPeriod")]
        public int? FixationPeriod { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("loanType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public LoanType LoanType { get; set; }

        /// <summary>
        /// AkceUveruId
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loanEventCode")]
        public int? LoanEventCode { get; set; }

        /// <summary>
        /// DruhUveru
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loanKind")]
        public int LoanKind { get; set; }

        /// <summary>
        /// UcelUveruId
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("loanPurposeId")]
        public int? LoanPurposeId { get; set; }

        /// <summary>
        /// Předpokládané datum 1. čerpání
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expected1stDrawDate")]
        public System.DateTime? Expected1stDrawDate { get; set; }

        /// <summary>
        /// Datum podpisu první žádosti
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("firstRequestSignDate")]
        public System.DateTime? FirstRequestSignDate { get; set; }

        /// <summary>
        /// IdPoradce
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("consultantId")]
        public long? ConsultantId { get; set; }

        /// <summary>
        /// definuje vztah úvěru k dalším osobám
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("relationships")]
        public System.Collections.Generic.ICollection<LoanContractRelationship> Relationships { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Partner2PartnerRelationship
    {
        /// <summary>
        /// Id Partner 1
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("partner1Id")]
        public long Partner1Id { get; set; }

        /// <summary>
        /// Id Partner 2
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("partner2Id")]
        public long Partner2Id { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("partner1To2RelationshipType")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ClientRelationshipType Partner1To2RelationshipType { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("partner2To1RelationshipType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ClientRelationshipType Partner2To1RelationshipType { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartnerBaseRequest
    {
        /// <summary>
        /// Rodné číslo
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthNumber")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\d{9,10}")]
        public string BirthNumber { get; set; }

        /// <summary>
        /// IČO
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ico")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\d+")]
        public string Ico { get; set; }

        /// <summary>
        /// Titul před jménem.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("degreeBefore")]
        public string DegreeBefore { get; set; }

        /// <summary>
        /// Titul za jménem.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("degreeAfter")]
        public string DegreeAfter { get; set; }

        /// <summary>
        /// Jméno
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Příjmění
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastname")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Lastname { get; set; }

        /// <summary>
        /// Datum narození
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dateOfBirth")]
        public System.DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Místo narození
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("placeOfBirth")]
        public string PlaceOfBirth { get; set; }

        /// <summary>
        /// Jméno právnické osoby
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nameJuridicalPerson")]
        public string NameJuridicalPerson { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GenderEnum Gender { get; set; }

        /// <summary>
        /// Státní příslušnost - ISO code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nationality")]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string Nationality { get; set; }

        /// <summary>
        /// Rezident - {true} ak má partner bydlisko v CZ
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resident")]
        public bool Resident { get; set; }

        /// <summary>
        /// {true} když se jedná o osobu ze Spojených států amerických
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("usPerson")]
        public bool UsPerson { get; set; }

        /// <summary>
        /// {true} když se jedná o politicky exponovanou osobu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pep")]
        public bool Pep { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this MPDigi.Web.Areas.Foms.ViewModels.PartnerBaseRequest is sans.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sans")]
        public bool Sans { get; set; }

        /// <summary>
        /// Povolena e-komunikace
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ecommunication")]
        public bool Ecommunication { get; set; }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartnerRelationshipList
    {

        [System.Text.Json.Serialization.JsonPropertyName("relationships")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<Partner2PartnerRelationship> Relationships { get; set; } = new System.Collections.ObjectModel.Collection<Partner2PartnerRelationship>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartnerRequest
    {
        /// <summary>
        /// Rodné číslo
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthNumber")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\d{9,10}")]
        public string BirthNumber { get; set; }

        /// <summary>
        /// IČO
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ico")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\d+")]
        public string Ico { get; set; }

        /// <summary>
        /// Titul před jménem.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("degreeBefore")]
        public string DegreeBefore { get; set; }

        /// <summary>
        /// Titul za jménem.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("degreeAfter")]
        public string DegreeAfter { get; set; }

        /// <summary>
        /// Jméno
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Příjmění
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastname")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Lastname { get; set; }

        /// <summary>
        /// Datum narození
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dateOfBirth")]
        public System.DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Místo narození
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("placeOfBirth")]
        public string PlaceOfBirth { get; set; }

        /// <summary>
        /// Jméno právnické osoby
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nameJuridicalPerson")]
        public string NameJuridicalPerson { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GenderEnum Gender { get; set; }

        /// <summary>
        /// Státní příslušnost - ISO code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nationality")]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string Nationality { get; set; }

        /// <summary>
        /// Rezident - {true} ak má partner bydlisko v CZ
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resident")]
        public bool Resident { get; set; }

        /// <summary>
        /// {true} když se jedná o osobu ze Spojených států amerických
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("usPerson")]
        public bool UsPerson { get; set; }

        /// <summary>
        /// {true} když se jedná o politicky exponovanou osobu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pep")]
        public bool Pep { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this MPDigi.Web.Areas.Foms.ViewModels.PartnerBaseRequest is sans.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sans")]
        public bool Sans { get; set; }

        /// <summary>
        /// Povolena e-komunikace
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ecommunication")]
        public bool Ecommunication { get; set; }

        /// <summary>
        /// Seznam dokladů
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identificationDocuments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<IdentificationDocument> IdentificationDocuments { get; set; } = new System.Collections.ObjectModel.Collection<IdentificationDocument>();

        /// <summary>
        /// Seznam adres
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AddressData> Addresses { get; set; } = new System.Collections.ObjectModel.Collection<AddressData>();

        /// <summary>
        /// Sezname kontaktů
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contacts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContactRequest> Contacts { get; set; } = new System.Collections.ObjectModel.Collection<ContactRequest>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartnerResponse
    {
        /// <summary>
        /// Rodné číslo
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthNumber")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\d{9,10}")]
        public string BirthNumber { get; set; }

        /// <summary>
        /// IČO
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ico")]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"\d+")]
        public string Ico { get; set; }

        /// <summary>
        /// Titul před jménem.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("degreeBefore")]
        public string DegreeBefore { get; set; }

        /// <summary>
        /// Titul za jménem.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("degreeAfter")]
        public string DegreeAfter { get; set; }

        /// <summary>
        /// Jméno
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Příjmění
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lastname")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Lastname { get; set; }

        /// <summary>
        /// Datum narození
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("dateOfBirth")]
        public System.DateTime? DateOfBirth { get; set; }

        /// <summary>
        /// Místo narození
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("placeOfBirth")]
        public string PlaceOfBirth { get; set; }

        /// <summary>
        /// Jméno právnické osoby
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nameJuridicalPerson")]
        public string NameJuridicalPerson { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public GenderEnum Gender { get; set; }

        /// <summary>
        /// Státní příslušnost - ISO code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nationality")]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string Nationality { get; set; }

        /// <summary>
        /// Rezident - {true} ak má partner bydlisko v CZ
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("resident")]
        public bool Resident { get; set; }

        /// <summary>
        /// {true} když se jedná o osobu ze Spojených států amerických
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("usPerson")]
        public bool UsPerson { get; set; }

        /// <summary>
        /// {true} když se jedná o politicky exponovanou osobu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pep")]
        public bool Pep { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this MPDigi.Web.Areas.Foms.ViewModels.PartnerBaseRequest is sans.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("sans")]
        public bool Sans { get; set; }

        /// <summary>
        /// Povolena e-komunikace
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("ecommunication")]
        public bool Ecommunication { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("dataSource")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EtlDataSourceType DataSource { get; set; }

        /// <summary>
        /// Seznam dokladů
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identificationDocuments")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<IdentificationDocument> IdentificationDocuments { get; set; } = new System.Collections.ObjectModel.Collection<IdentificationDocument>();

        /// <summary>
        /// Seznam adres
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addresses")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<AddressData> Addresses { get; set; } = new System.Collections.ObjectModel.Collection<AddressData>();

        /// <summary>
        /// Seznam kontaktů
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contacts")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ContactResponse> Contacts { get; set; } = new System.Collections.ObjectModel.Collection<ContactResponse>();

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string Type { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string Title { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public int? Status { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public string Detail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("instance")]
        public string Instance { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ResultStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"OK")]
        OK = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"Warning")]
        Warning = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"Error")]
        Error = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SavingRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("partnerId")]
        [System.ComponentModel.DataAnnotations.Range(1D, double.MaxValue)]
        public long PartnerId { get; set; }

        /// <summary>
        /// CisloSmlouvy
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contractNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string ContractNumber { get; set; }

        /// <summary>
        /// Cílová částka
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("targetAmount")]
        public long TargetAmount { get; set; }

        /// <summary>
        /// PredcisliUctu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountPrefix")]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string AccountPrefix { get; set; }

        /// <summary>
        /// CisloUctu
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("accountNumber")]
        [System.ComponentModel.DataAnnotations.StringLength(10)]
        public string AccountNumber { get; set; }

        /// <summary>
        /// úroková sazba
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("interestRate")]
        public double? InterestRate { get; set; }

        /// <summary>
        /// UrokovyBonus
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("interestBonus")]
        public double? InterestBonus { get; set; }

        /// <summary>
        /// měsíční vklad
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("monthDeposit")]
        public double? MonthDeposit { get; set; }

        /// <summary>
        /// měsíční vklad
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("stateBonusRequested")]
        public bool? StateBonusRequested { get; set; }

        /// <summary>
        /// IdPoradce
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("consultantId")]
        public long? ConsultantId { get; set; }

        /// <summary>
        /// definuje vztah spoření k dalším osobám
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("relationships")]
        public System.Collections.Generic.ICollection<FomsContractRelationship> Relationships { get; set; }

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.15.5.0 (NJsonSchema v10.6.6.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016