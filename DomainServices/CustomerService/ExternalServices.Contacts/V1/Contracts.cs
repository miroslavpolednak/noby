//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable CS8765 // Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes).

namespace DomainServices.CustomerService.ExternalServices.Contacts.V1.Contracts
{
    using System = global::System;

    

    /// <summary>
    /// Customer contact - email, phone, web, fax
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactBase
    {
        /// <summary>
        /// Contact method code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactMethodCode")]
        public long ContactMethodCode { get; set; }

        /// <summary>
        /// Contact value - phone number, email address, fax number, web page url
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactValue")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        public string ContactValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer contact - email, phone, web, fax
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Contact : ContactBase
    {
        /// <summary>
        /// primary key of stored contact
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("contactId")]
        public long ContactId { get; set; }

        /// <summary>
        /// Flag indicating that contact is confirmed by client
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]
        public bool Confirmed { get; set; }

    }

    /// <summary>
    /// Customer phone
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Phone
    {
        /// <summary>
        /// Phone number with international destination country code like +420
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string PhoneNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer primary phone
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryPhone : Phone
    {
        /// <summary>
        /// Flag indicating that phone is confirmed by client
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]
        public bool Confirmed { get; set; }

    }

    /// <summary>
    /// Customer primary phone
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryPhoneGetData : PrimaryPhone
    {
        /// <summary>
        /// Flag whether it is a mobile phone. Flag is determined only for czech and slovak phone numbers
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isMobile")]
        public bool IsMobile { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("componentPhone")]
        public ComponentPhone ComponentPhone { get; set; }

    }

    /// <summary>
    /// Phone splited to international destination code and national part of number
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentPhone
    {
        /// <summary>
        /// Phone international destination code, i.e. +420, +1 etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneIDC")]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[+]{1}[1-9]{1}[0-9]{0,3}$")]
        public string PhoneIDC { get; set; }

        /// <summary>
        /// Local part of phone number, including national destination code i.e. 777112233.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,13}$")]
        public string PhoneNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer email
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Email
    {
        /// <summary>
        /// Email
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailAddress")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        public string EmailAddress { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer primary email
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryEmail : Email
    {
        /// <summary>
        /// Flag indicating that email is confirmed by client
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]
        public bool Confirmed { get; set; }

    }

    /// <summary>
    /// Code book of phone international destination codes mapped to country
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PhoneIdcCountry
    {
        /// <summary>
        /// ISO contry code - two characters, i.e. CZ, SK
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string Code { get; set; }

        /// <summary>
        /// Country name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(120)]
        public string Name { get; set; }

        /// <summary>
        /// Country name in english language
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nameEnglish")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(120)]
        public string NameEnglish { get; set; }

        /// <summary>
        /// Country short name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shortName")]
        [System.ComponentModel.DataAnnotations.StringLength(120)]
        public string ShortName { get; set; }

        /// <summary>
        /// Country short name in english language
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("shortNameEnglish")]
        [System.ComponentModel.DataAnnotations.StringLength(120)]
        public string ShortNameEnglish { get; set; }

        /// <summary>
        /// Phone international destination code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneIDC")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[+]{1}[1-9]{1}[0-9]{0,2}$")]
        public string PhoneIDC { get; set; }

        /// <summary>
        /// Maximal length of phone number minus phone idc length
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumberMaxLength")]
        public int PhoneNumberMaxLength { get; set; }

        /// <summary>
        /// Indication whether the country should be listed in the priority country list during selection
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isPriority")]
        public bool? IsPriority { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Validation result with list of issues
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidateContactResponse
    {
        /// <summary>
        /// Validation result
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationResult")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ValidateContactResponseValidationResult ValidationResult { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("additionalContactInformations")]
        public AdditionalContactInformations AdditionalContactInformations { get; set; }

        /// <summary>
        /// List of validation issue codes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationIssueCodes")]
        public System.Collections.Generic.ICollection<string> ValidationIssueCodes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Additional informations about the validated contact
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdditionalContactInformations
    {
        /// <summary>
        /// Flag whether it is a mobile phone. If the flag is blank, we have not been able to determine with certainty whether it is a mobile phone number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isMobile")]
        public bool? IsMobile { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// Http status code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("httpStatusCode")]
        public int HttpStatusCode { get; set; }

        /// <summary>
        /// Error category
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public int Category { get; set; }

        /// <summary>
        /// Error code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// Error message
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Error uuid
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uuid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uuid { get; set; }

        /// <summary>
        /// Error detail
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("detail")]
        public object Detail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ValidateContactResponseValidationResult
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VALID")]
        VALID = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 1,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.0.7.0 (NJsonSchema v11.0.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625