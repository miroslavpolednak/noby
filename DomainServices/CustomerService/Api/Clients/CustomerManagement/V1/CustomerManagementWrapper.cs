//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace DomainServices.CustomerService.Api.Clients.CustomerManagement.V1
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerManagementWrapper 
    {
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

        public CustomerManagementWrapper(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient;
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(CreateSerializerSettings);
        }

        private Newtonsoft.Json.JsonSerializerSettings CreateSerializerSettings()
        {
            var settings = new Newtonsoft.Json.JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);

        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

        /// <summary>
        /// getCustomerBaseInfo
        /// </summary>
        /// <param name="customerId">Identifier of the customer whose base information will be returned (KBID - identifier of customer in Customer Management system)</param>
        /// <param name="showPrimaryAddress">flag indicating whether main address will be returned</param>
        /// <param name="showPrimaryIdDocument">flag indicating whether main document will be returned</param>
        /// <param name="showCustomerIdentification">flag indicating whether customer identification will be returned</param>
        /// <param name="showContactAddress">flag indicating whether contact address will be returned</param>
        /// <param name="showPrimaryPhone">flag indicating whether main phone will be returned</param>
        /// <param name="showPrimaryEmail">flag indicating whether main email will be returned</param>
        /// <param name="showSegment">flag indicating whether segment will be returned</param>
        /// <param name="showPoliticallyExposed">flag indicating whether politically exposed flag will be returned</param>
        /// <param name="showEsa">flag indicating whether ESA will be returned</param>
        /// <param name="showNace">flag indicating whether NACE will be returned</param>
        /// <param name="showInsurability">flag indicating whether Inusrability flag will be returned</param>
        /// <param name="showFirstNameVocative">flag indicating whether first name vocative should be evalueted and returned</param>
        /// <param name="showSurnameVocative">flag indicating whether surname vocative should be evalueted and returned</param>
        /// <param name="includeArchived">flag indicating whether archived customer will be returned</param>
        /// <param name="getAllPrimaryPhones">flag indicating whether all available types of primary phone should be returned. In order 5,1,3</param>
        /// <param name="showFatca">flag indicating whether Fatca will be returned</param>
        /// <param name="showFinancialProfile">flag indicating whether Financial profile will be returned</param>
        /// <param name="showHousing">flag indicating whether Housing will be returned</param>
        /// <param name="showTurnovers">flag indicating whether Turnovers will be returned</param>
        /// <param name="showEducation">flag indicating whether Education will be returned</param>
        /// <param name="showEmployeesNumber">flag indicating whether Number of employees will be returned</param>
        /// <param name="showEmployment">flag indicating whether Employment will be returned</param>
        /// <param name="showTemporaryStay">flag indicating whether temporary stay address will be returned</param>
        /// <param name="requiredAddressFormats">Required address format. Multiple formats can be returned at the same time. If no format is defined, the LINE address format is returned.</param>
        /// <param name="showBRSubscription">flag indicating whether subscription for update from the Basic registry will be returned</param>
        /// <param name="showTaxResidence">flag indicating whether Tax residence will be returned</param>
        /// <param name="showCustomerKbRelationship">flag indicating whether Customer's relationship with KB will be returned</param>
        /// <param name="showTaxDomicile">flag indicating whether Tax domicile will be returned</param>
        /// <param name="showConfirmedContactFlags">flag indicating whether confirmed contacts will be returned</param>
        /// <param name="showBusinessArea">flag indicating whether business area will be returned</param>
        /// <param name="x_B3_TraceId">[Trace Id](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-TraceId)</param>
        /// <param name="x_KB_Caller_System_Identity">[Caller system](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-CallerSystemIdentity)</param>
        /// <returns>Customer base info entity</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerBaseInfo> GetCustomerBaseInfoAsync(long customerId, bool? showPrimaryAddress, bool? showPrimaryIdDocument, bool? showCustomerIdentification, bool? showContactAddress, bool? showPrimaryPhone, bool? showPrimaryEmail, bool? showSegment, bool? showPoliticallyExposed, bool? showEsa, bool? showNace, bool? showInsurability, bool? showFirstNameVocative, bool? showSurnameVocative, bool? includeArchived, bool? getAllPrimaryPhones, bool? showFatca, bool? showFinancialProfile, bool? showHousing, bool? showTurnovers, bool? showEducation, bool? showEmployeesNumber, bool? showEmployment, bool? showTemporaryStay, System.Collections.Generic.IEnumerable<AddressFormat> requiredAddressFormats, bool? showBRSubscription, bool? showTaxResidence, bool? showCustomerKbRelationship, bool? showTaxDomicile, bool? showConfirmedContactFlags, bool? showBusinessArea, string x_B3_TraceId, string x_KB_Caller_System_Identity)
        {
            return GetCustomerBaseInfoAsync(customerId, showPrimaryAddress, showPrimaryIdDocument, showCustomerIdentification, showContactAddress, showPrimaryPhone, showPrimaryEmail, showSegment, showPoliticallyExposed, showEsa, showNace, showInsurability, showFirstNameVocative, showSurnameVocative, includeArchived, getAllPrimaryPhones, showFatca, showFinancialProfile, showHousing, showTurnovers, showEducation, showEmployeesNumber, showEmployment, showTemporaryStay, requiredAddressFormats, showBRSubscription, showTaxResidence, showCustomerKbRelationship, showTaxDomicile, showConfirmedContactFlags, showBusinessArea, x_B3_TraceId, x_KB_Caller_System_Identity, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getCustomerBaseInfo
        /// </summary>
        /// <param name="customerId">Identifier of the customer whose base information will be returned (KBID - identifier of customer in Customer Management system)</param>
        /// <param name="showPrimaryAddress">flag indicating whether main address will be returned</param>
        /// <param name="showPrimaryIdDocument">flag indicating whether main document will be returned</param>
        /// <param name="showCustomerIdentification">flag indicating whether customer identification will be returned</param>
        /// <param name="showContactAddress">flag indicating whether contact address will be returned</param>
        /// <param name="showPrimaryPhone">flag indicating whether main phone will be returned</param>
        /// <param name="showPrimaryEmail">flag indicating whether main email will be returned</param>
        /// <param name="showSegment">flag indicating whether segment will be returned</param>
        /// <param name="showPoliticallyExposed">flag indicating whether politically exposed flag will be returned</param>
        /// <param name="showEsa">flag indicating whether ESA will be returned</param>
        /// <param name="showNace">flag indicating whether NACE will be returned</param>
        /// <param name="showInsurability">flag indicating whether Inusrability flag will be returned</param>
        /// <param name="showFirstNameVocative">flag indicating whether first name vocative should be evalueted and returned</param>
        /// <param name="showSurnameVocative">flag indicating whether surname vocative should be evalueted and returned</param>
        /// <param name="includeArchived">flag indicating whether archived customer will be returned</param>
        /// <param name="getAllPrimaryPhones">flag indicating whether all available types of primary phone should be returned. In order 5,1,3</param>
        /// <param name="showFatca">flag indicating whether Fatca will be returned</param>
        /// <param name="showFinancialProfile">flag indicating whether Financial profile will be returned</param>
        /// <param name="showHousing">flag indicating whether Housing will be returned</param>
        /// <param name="showTurnovers">flag indicating whether Turnovers will be returned</param>
        /// <param name="showEducation">flag indicating whether Education will be returned</param>
        /// <param name="showEmployeesNumber">flag indicating whether Number of employees will be returned</param>
        /// <param name="showEmployment">flag indicating whether Employment will be returned</param>
        /// <param name="showTemporaryStay">flag indicating whether temporary stay address will be returned</param>
        /// <param name="requiredAddressFormats">Required address format. Multiple formats can be returned at the same time. If no format is defined, the LINE address format is returned.</param>
        /// <param name="showBRSubscription">flag indicating whether subscription for update from the Basic registry will be returned</param>
        /// <param name="showTaxResidence">flag indicating whether Tax residence will be returned</param>
        /// <param name="showCustomerKbRelationship">flag indicating whether Customer's relationship with KB will be returned</param>
        /// <param name="showTaxDomicile">flag indicating whether Tax domicile will be returned</param>
        /// <param name="showConfirmedContactFlags">flag indicating whether confirmed contacts will be returned</param>
        /// <param name="showBusinessArea">flag indicating whether business area will be returned</param>
        /// <param name="x_B3_TraceId">[Trace Id](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-TraceId)</param>
        /// <param name="x_KB_Caller_System_Identity">[Caller system](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-CallerSystemIdentity)</param>
        /// <returns>Customer base info entity</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerBaseInfo> GetCustomerBaseInfoAsync(long customerId, bool? showPrimaryAddress, bool? showPrimaryIdDocument, bool? showCustomerIdentification, bool? showContactAddress, bool? showPrimaryPhone, bool? showPrimaryEmail, bool? showSegment, bool? showPoliticallyExposed, bool? showEsa, bool? showNace, bool? showInsurability, bool? showFirstNameVocative, bool? showSurnameVocative, bool? includeArchived, bool? getAllPrimaryPhones, bool? showFatca, bool? showFinancialProfile, bool? showHousing, bool? showTurnovers, bool? showEducation, bool? showEmployeesNumber, bool? showEmployment, bool? showTemporaryStay, System.Collections.Generic.IEnumerable<AddressFormat> requiredAddressFormats, bool? showBRSubscription, bool? showTaxResidence, bool? showCustomerKbRelationship, bool? showTaxDomicile, bool? showConfirmedContactFlags, bool? showBusinessArea, string x_B3_TraceId, string x_KB_Caller_System_Identity, System.Threading.CancellationToken cancellationToken)
        {
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("public/v1/customers/{customerId}/base-info?");
            urlBuilder_.Replace("{customerId}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (showPrimaryAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showPrimaryAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showPrimaryAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showPrimaryIdDocument != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showPrimaryIdDocument") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showPrimaryIdDocument, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showCustomerIdentification != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showCustomerIdentification") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showCustomerIdentification, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showContactAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showContactAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showContactAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showPrimaryPhone != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showPrimaryPhone") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showPrimaryPhone, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showPrimaryEmail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showPrimaryEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showPrimaryEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showSegment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showSegment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showSegment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showPoliticallyExposed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showPoliticallyExposed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showPoliticallyExposed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showEsa != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showEsa") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showEsa, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showNace != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showNace") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showNace, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showInsurability != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showInsurability") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showInsurability, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showFirstNameVocative != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showFirstNameVocative") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showFirstNameVocative, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showSurnameVocative != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showSurnameVocative") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showSurnameVocative, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeArchived != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeArchived") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeArchived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getAllPrimaryPhones != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("getAllPrimaryPhones") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getAllPrimaryPhones, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showFatca != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showFatca") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showFatca, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showFinancialProfile != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showFinancialProfile") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showFinancialProfile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showHousing != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showHousing") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showHousing, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showTurnovers != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showTurnovers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showTurnovers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showEducation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showEducation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showEducation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showEmployeesNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showEmployeesNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showEmployeesNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showEmployment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showEmployment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showEmployment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showTemporaryStay != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showTemporaryStay") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showTemporaryStay, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (requiredAddressFormats != null)
            {
                foreach (var item_ in requiredAddressFormats) { urlBuilder_.Append(System.Uri.EscapeDataString("requiredAddressFormats") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (showBRSubscription != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showBRSubscription") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showBRSubscription, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showTaxResidence != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showTaxResidence") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showTaxResidence, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showCustomerKbRelationship != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showCustomerKbRelationship") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showCustomerKbRelationship, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showTaxDomicile != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showTaxDomicile") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showTaxDomicile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showConfirmedContactFlags != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showConfirmedContactFlags") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showConfirmedContactFlags, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showBusinessArea != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showBusinessArea") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showBusinessArea, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_B3_TraceId == null)
                        throw new System.ArgumentNullException("x_B3_TraceId");
                    request_.Headers.TryAddWithoutValidation("X-B3-TraceId", ConvertToString(x_B3_TraceId, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_KB_Caller_System_Identity == null)
                        throw new System.ArgumentNullException("x_KB_Caller_System_Identity");
                    request_.Headers.TryAddWithoutValidation("X-KB-Caller-System-Identity", ConvertToString(x_KB_Caller_System_Identity, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerBaseInfo>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Validation error - mostly invalid data in request is provided provided", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Authentication information is missing or is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("You are not authorized to run this operation", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Resource not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unexpected error occured", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// getCustomersBaseInfo - for list of IDs
        /// </summary>
        /// <param name="body">List of required IDs</param>
        /// <param name="showPrimaryAddress">flag indicating whether main address will be returned</param>
        /// <param name="showPrimaryIdDocument">flag indicating whether main document will be returned</param>
        /// <param name="showCustomerIdentification">flag indicating whether customer identification will be returned</param>
        /// <param name="showContactAddress">flag indicating whether contact address will be returned</param>
        /// <param name="showPrimaryPhone">flag indicating whether main phone will be returned</param>
        /// <param name="showPrimaryEmail">flag indicating whether main email will be returned</param>
        /// <param name="showSegment">flag indicating whether segment will be returned</param>
        /// <param name="showPoliticallyExposed">flag indicating whether politically exposed flag will be returned</param>
        /// <param name="showEsa">flag indicating whether ESA will be returned</param>
        /// <param name="showNace">flag indicating whether NACE will be returned</param>
        /// <param name="showInsurability">flag indicating whether Inusrability flag will be returned</param>
        /// <param name="showFirstNameVocative">flag indicating whether first name vocative should be evalueted and returned</param>
        /// <param name="showSurnameVocative">flag indicating whether surname vocative should be evalueted and returned</param>
        /// <param name="includeArchived">flag indicating whether archived customers will be returned</param>
        /// <param name="getAllPrimaryPhones">flag indicating whether all available types of primary phone should be returned. In order 5,1,3</param>
        /// <param name="showFatca">flag indicating whether Fatca will be returned</param>
        /// <param name="showFinancialProfile">flag indicating whether Financial profile will be returned</param>
        /// <param name="showHousing">flag indicating whether Housing will be returned</param>
        /// <param name="showTurnovers">flag indicating whether Turnovers will be returned</param>
        /// <param name="showEducation">flag indicating whether Education will be returned</param>
        /// <param name="showEmployeesNumber">flag indicating whether Number of employees will be returned</param>
        /// <param name="showEmployment">flag indicating whether Employment will be returned</param>
        /// <param name="showTemporaryStay">flag indicating whether temporary stay address will be returned</param>
        /// <param name="requiredAddressFormats">Required address format. Multiple formats can be returned at the same time. If no format is defined, the address is returned in default format.</param>
        /// <param name="showBRSubscription">flag indicating whether subscription for update from the Basic registry will be returned</param>
        /// <param name="showTaxResidence">flag indicating whether Tax residence will be returned</param>
        /// <param name="showCustomerKbRelationship">flag indicating whether Customer's relationship with KB will be returned</param>
        /// <param name="showTaxDomicile">flag indicating whether Tax domicile will be returned</param>
        /// <param name="showConfirmedContacts">flag indicating whether confirmed contacts will be returned</param>
        /// <param name="showBusinessArea">flag indicating whether business area will be returned</param>
        /// <param name="x_B3_TraceId">[Trace Id](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-TraceId)</param>
        /// <param name="x_KB_Caller_System_Identity">[Caller system](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-CallerSystemIdentity)</param>
        /// <returns>Base info for required customers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerBaseInfo>> GetCustomersBaseInfoAsync(System.Collections.Generic.IEnumerable<long> body, bool? showPrimaryAddress, bool? showPrimaryIdDocument, bool? showCustomerIdentification, bool? showContactAddress, bool? showPrimaryPhone, bool? showPrimaryEmail, bool? showSegment, bool? showPoliticallyExposed, bool? showEsa, bool? showNace, bool? showInsurability, bool? showFirstNameVocative, bool? showSurnameVocative, bool? includeArchived, bool? getAllPrimaryPhones, bool? showFatca, bool? showFinancialProfile, bool? showHousing, bool? showTurnovers, bool? showEducation, bool? showEmployeesNumber, bool? showEmployment, bool? showTemporaryStay, System.Collections.Generic.IEnumerable<AddressFormat> requiredAddressFormats, bool? showBRSubscription, bool? showTaxResidence, bool? showCustomerKbRelationship, bool? showTaxDomicile, bool? showConfirmedContacts, bool? showBusinessArea, string x_B3_TraceId, string x_KB_Caller_System_Identity)
        {
            return GetCustomersBaseInfoAsync(body, showPrimaryAddress, showPrimaryIdDocument, showCustomerIdentification, showContactAddress, showPrimaryPhone, showPrimaryEmail, showSegment, showPoliticallyExposed, showEsa, showNace, showInsurability, showFirstNameVocative, showSurnameVocative, includeArchived, getAllPrimaryPhones, showFatca, showFinancialProfile, showHousing, showTurnovers, showEducation, showEmployeesNumber, showEmployment, showTemporaryStay, requiredAddressFormats, showBRSubscription, showTaxResidence, showCustomerKbRelationship, showTaxDomicile, showConfirmedContacts, showBusinessArea, x_B3_TraceId, x_KB_Caller_System_Identity, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getCustomersBaseInfo - for list of IDs
        /// </summary>
        /// <param name="body">List of required IDs</param>
        /// <param name="showPrimaryAddress">flag indicating whether main address will be returned</param>
        /// <param name="showPrimaryIdDocument">flag indicating whether main document will be returned</param>
        /// <param name="showCustomerIdentification">flag indicating whether customer identification will be returned</param>
        /// <param name="showContactAddress">flag indicating whether contact address will be returned</param>
        /// <param name="showPrimaryPhone">flag indicating whether main phone will be returned</param>
        /// <param name="showPrimaryEmail">flag indicating whether main email will be returned</param>
        /// <param name="showSegment">flag indicating whether segment will be returned</param>
        /// <param name="showPoliticallyExposed">flag indicating whether politically exposed flag will be returned</param>
        /// <param name="showEsa">flag indicating whether ESA will be returned</param>
        /// <param name="showNace">flag indicating whether NACE will be returned</param>
        /// <param name="showInsurability">flag indicating whether Inusrability flag will be returned</param>
        /// <param name="showFirstNameVocative">flag indicating whether first name vocative should be evalueted and returned</param>
        /// <param name="showSurnameVocative">flag indicating whether surname vocative should be evalueted and returned</param>
        /// <param name="includeArchived">flag indicating whether archived customers will be returned</param>
        /// <param name="getAllPrimaryPhones">flag indicating whether all available types of primary phone should be returned. In order 5,1,3</param>
        /// <param name="showFatca">flag indicating whether Fatca will be returned</param>
        /// <param name="showFinancialProfile">flag indicating whether Financial profile will be returned</param>
        /// <param name="showHousing">flag indicating whether Housing will be returned</param>
        /// <param name="showTurnovers">flag indicating whether Turnovers will be returned</param>
        /// <param name="showEducation">flag indicating whether Education will be returned</param>
        /// <param name="showEmployeesNumber">flag indicating whether Number of employees will be returned</param>
        /// <param name="showEmployment">flag indicating whether Employment will be returned</param>
        /// <param name="showTemporaryStay">flag indicating whether temporary stay address will be returned</param>
        /// <param name="requiredAddressFormats">Required address format. Multiple formats can be returned at the same time. If no format is defined, the address is returned in default format.</param>
        /// <param name="showBRSubscription">flag indicating whether subscription for update from the Basic registry will be returned</param>
        /// <param name="showTaxResidence">flag indicating whether Tax residence will be returned</param>
        /// <param name="showCustomerKbRelationship">flag indicating whether Customer's relationship with KB will be returned</param>
        /// <param name="showTaxDomicile">flag indicating whether Tax domicile will be returned</param>
        /// <param name="showConfirmedContacts">flag indicating whether confirmed contacts will be returned</param>
        /// <param name="showBusinessArea">flag indicating whether business area will be returned</param>
        /// <param name="x_B3_TraceId">[Trace Id](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-TraceId)</param>
        /// <param name="x_KB_Caller_System_Identity">[Caller system](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-CallerSystemIdentity)</param>
        /// <returns>Base info for required customers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CustomerBaseInfo>> GetCustomersBaseInfoAsync(System.Collections.Generic.IEnumerable<long> body, bool? showPrimaryAddress, bool? showPrimaryIdDocument, bool? showCustomerIdentification, bool? showContactAddress, bool? showPrimaryPhone, bool? showPrimaryEmail, bool? showSegment, bool? showPoliticallyExposed, bool? showEsa, bool? showNace, bool? showInsurability, bool? showFirstNameVocative, bool? showSurnameVocative, bool? includeArchived, bool? getAllPrimaryPhones, bool? showFatca, bool? showFinancialProfile, bool? showHousing, bool? showTurnovers, bool? showEducation, bool? showEmployeesNumber, bool? showEmployment, bool? showTemporaryStay, System.Collections.Generic.IEnumerable<AddressFormat> requiredAddressFormats, bool? showBRSubscription, bool? showTaxResidence, bool? showCustomerKbRelationship, bool? showTaxDomicile, bool? showConfirmedContacts, bool? showBusinessArea, string x_B3_TraceId, string x_KB_Caller_System_Identity, System.Threading.CancellationToken cancellationToken)
        {
            if (body == null)
                throw new System.ArgumentNullException("body");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("public/v1/customers/base-info?");
            if (showPrimaryAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showPrimaryAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showPrimaryAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showPrimaryIdDocument != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showPrimaryIdDocument") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showPrimaryIdDocument, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showCustomerIdentification != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showCustomerIdentification") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showCustomerIdentification, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showContactAddress != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showContactAddress") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showContactAddress, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showPrimaryPhone != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showPrimaryPhone") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showPrimaryPhone, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showPrimaryEmail != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showPrimaryEmail") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showPrimaryEmail, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showSegment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showSegment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showSegment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showPoliticallyExposed != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showPoliticallyExposed") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showPoliticallyExposed, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showEsa != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showEsa") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showEsa, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showNace != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showNace") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showNace, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showInsurability != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showInsurability") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showInsurability, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showFirstNameVocative != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showFirstNameVocative") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showFirstNameVocative, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showSurnameVocative != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showSurnameVocative") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showSurnameVocative, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (includeArchived != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeArchived") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeArchived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (getAllPrimaryPhones != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("getAllPrimaryPhones") + "=").Append(System.Uri.EscapeDataString(ConvertToString(getAllPrimaryPhones, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showFatca != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showFatca") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showFatca, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showFinancialProfile != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showFinancialProfile") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showFinancialProfile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showHousing != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showHousing") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showHousing, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showTurnovers != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showTurnovers") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showTurnovers, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showEducation != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showEducation") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showEducation, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showEmployeesNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showEmployeesNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showEmployeesNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showEmployment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showEmployment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showEmployment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showTemporaryStay != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showTemporaryStay") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showTemporaryStay, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (requiredAddressFormats != null)
            {
                foreach (var item_ in requiredAddressFormats) { urlBuilder_.Append(System.Uri.EscapeDataString("requiredAddressFormats") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (showBRSubscription != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showBRSubscription") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showBRSubscription, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showTaxResidence != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showTaxResidence") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showTaxResidence, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showCustomerKbRelationship != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showCustomerKbRelationship") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showCustomerKbRelationship, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showTaxDomicile != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showTaxDomicile") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showTaxDomicile, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showConfirmedContacts != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showConfirmedContacts") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showConfirmedContacts, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showBusinessArea != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showBusinessArea") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showBusinessArea, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_B3_TraceId == null)
                        throw new System.ArgumentNullException("x_B3_TraceId");
                    request_.Headers.TryAddWithoutValidation("X-B3-TraceId", ConvertToString(x_B3_TraceId, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_KB_Caller_System_Identity == null)
                        throw new System.ArgumentNullException("x_KB_Caller_System_Identity");
                    request_.Headers.TryAddWithoutValidation("X-KB-Caller-System-Identity", ConvertToString(x_KB_Caller_System_Identity, System.Globalization.CultureInfo.InvariantCulture));
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(body, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<CustomerBaseInfo>>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Validation error - mostly invalid data in request is provided provided", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Authentication information is missing or is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("You are not authorized to run this operation", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Resource not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unexpected error occured", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// searchCustomer
        /// </summary>
        /// <param name="numberOfEntries">Number of entries to return. When not specified or when is greater than 100 then 100 is applied.</param>
        /// <param name="customerId">Customer's ID (KBID) filter - primary filter</param>
        /// <param name="name">Surname/company name filter - primary filter. Surname or company name can be used with mask - at least 3 marks + * (example: Komer* for Komercni Banka)</param>
        /// <param name="firstName">First name filter - can be used only as additional filter to surname for Natural Person. First name can be used with mask - at least 3 marks + *</param>
        /// <param name="birthEstablishedDate">Birth date/Established date filter, can be used only as additional filter with other filters</param>
        /// <param name="identifierValue">Identifier value filter - primary filter</param>
        /// <param name="identifierTypeCode">Identifier type filter, additional filter to identifierValue. When not specified then all identifier types are used. RDM codebook CB_JuridicalPersonIdentificationType.</param>
        /// <param name="idDocumentTypeCode">Type of identification document. Can be used only with idDocumentNumber and idDocumentIssuingCountryCode. RDM codebook CB_IdentificationDocumentType</param>
        /// <param name="idDocumentNumber">Identification document number. Can be used only with idDocumentTypeCode and idDocumentIssuingCountryCode.</param>
        /// <param name="idDocumentIssuingCountryCode">Identification document issuing country code. Can be used only with idDocumentTypeCode and idDocumentNumber. RDM codebook CB_Country.</param>
        /// <param name="email">Email filter</param>
        /// <param name="phoneNumber">Phone number filter</param>
        /// <param name="isInKbi">Flag indicating whether subject should or should not be in KBI. Possible variants: &lt;ul&gt; &lt;li&gt;parameter is not used - all subject are returned&lt;/li&gt; &lt;li&gt;true - only subjects in KBI are returned&lt;/li&gt; &lt;li&gt;false - only subjects not in KBI are returned&lt;/li&gt; &lt;/ul&gt;</param>
        /// <param name="legalStatusCode">Legal status filter</param>
        /// <param name="includeArchived">Flag indicating whether archived customers will be returned</param>
        /// <param name="showSegment">Flag indicating whether segment (fixed and float) should be returnd in response</param>
        /// <param name="x_B3_TraceId">[Trace Id](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-TraceId)</param>
        /// <param name="x_KB_Caller_System_Identity">[Caller system](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-CallerSystemIdentity)</param>
        /// <returns>Search result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual System.Threading.Tasks.Task<CustomerSearchResult> SearchCustomerAsync(int? numberOfEntries, long? customerId, string name, string firstName, System.DateTime? birthEstablishedDate, string identifierValue, string identifierTypeCode, string idDocumentTypeCode, string idDocumentNumber, string idDocumentIssuingCountryCode, string email, string phoneNumber, bool? isInKbi, System.Collections.Generic.IEnumerable<Anonymous> legalStatusCode, bool? includeArchived, bool? showSegment, string x_B3_TraceId, string x_KB_Caller_System_Identity)
        {
            return SearchCustomerAsync(numberOfEntries, customerId, name, firstName, birthEstablishedDate, identifierValue, identifierTypeCode, idDocumentTypeCode, idDocumentNumber, idDocumentIssuingCountryCode, email, phoneNumber, isInKbi, legalStatusCode, includeArchived, showSegment, x_B3_TraceId, x_KB_Caller_System_Identity, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// searchCustomer
        /// </summary>
        /// <param name="numberOfEntries">Number of entries to return. When not specified or when is greater than 100 then 100 is applied.</param>
        /// <param name="customerId">Customer's ID (KBID) filter - primary filter</param>
        /// <param name="name">Surname/company name filter - primary filter. Surname or company name can be used with mask - at least 3 marks + * (example: Komer* for Komercni Banka)</param>
        /// <param name="firstName">First name filter - can be used only as additional filter to surname for Natural Person. First name can be used with mask - at least 3 marks + *</param>
        /// <param name="birthEstablishedDate">Birth date/Established date filter, can be used only as additional filter with other filters</param>
        /// <param name="identifierValue">Identifier value filter - primary filter</param>
        /// <param name="identifierTypeCode">Identifier type filter, additional filter to identifierValue. When not specified then all identifier types are used. RDM codebook CB_JuridicalPersonIdentificationType.</param>
        /// <param name="idDocumentTypeCode">Type of identification document. Can be used only with idDocumentNumber and idDocumentIssuingCountryCode. RDM codebook CB_IdentificationDocumentType</param>
        /// <param name="idDocumentNumber">Identification document number. Can be used only with idDocumentTypeCode and idDocumentIssuingCountryCode.</param>
        /// <param name="idDocumentIssuingCountryCode">Identification document issuing country code. Can be used only with idDocumentTypeCode and idDocumentNumber. RDM codebook CB_Country.</param>
        /// <param name="email">Email filter</param>
        /// <param name="phoneNumber">Phone number filter</param>
        /// <param name="isInKbi">Flag indicating whether subject should or should not be in KBI. Possible variants: &lt;ul&gt; &lt;li&gt;parameter is not used - all subject are returned&lt;/li&gt; &lt;li&gt;true - only subjects in KBI are returned&lt;/li&gt; &lt;li&gt;false - only subjects not in KBI are returned&lt;/li&gt; &lt;/ul&gt;</param>
        /// <param name="legalStatusCode">Legal status filter</param>
        /// <param name="includeArchived">Flag indicating whether archived customers will be returned</param>
        /// <param name="showSegment">Flag indicating whether segment (fixed and float) should be returnd in response</param>
        /// <param name="x_B3_TraceId">[Trace Id](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-TraceId)</param>
        /// <param name="x_KB_Caller_System_Identity">[Caller system](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-CallerSystemIdentity)</param>
        /// <returns>Search result</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async System.Threading.Tasks.Task<CustomerSearchResult> SearchCustomerAsync(int? numberOfEntries, long? customerId, string name, string firstName, System.DateTime? birthEstablishedDate, string identifierValue, string identifierTypeCode, string idDocumentTypeCode, string idDocumentNumber, string idDocumentIssuingCountryCode, string email, string phoneNumber, bool? isInKbi, System.Collections.Generic.IEnumerable<Anonymous> legalStatusCode, bool? includeArchived, bool? showSegment, string x_B3_TraceId, string x_KB_Caller_System_Identity, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("public/v1/customers?");
            if (numberOfEntries != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("numberOfEntries") + "=").Append(System.Uri.EscapeDataString(ConvertToString(numberOfEntries, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (customerId != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("customerId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (name != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("name") + "=").Append(System.Uri.EscapeDataString(ConvertToString(name, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (firstName != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("firstName") + "=").Append(System.Uri.EscapeDataString(ConvertToString(firstName, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (birthEstablishedDate != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("birthEstablishedDate") + "=").Append(System.Uri.EscapeDataString(birthEstablishedDate.Value.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (identifierValue != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("identifierValue") + "=").Append(System.Uri.EscapeDataString(ConvertToString(identifierValue, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (identifierTypeCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("identifierTypeCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(identifierTypeCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idDocumentTypeCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idDocumentTypeCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idDocumentTypeCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idDocumentNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idDocumentNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idDocumentNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (idDocumentIssuingCountryCode != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("idDocumentIssuingCountryCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(idDocumentIssuingCountryCode, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (email != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("email") + "=").Append(System.Uri.EscapeDataString(ConvertToString(email, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (phoneNumber != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("phoneNumber") + "=").Append(System.Uri.EscapeDataString(ConvertToString(phoneNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (isInKbi != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("isInKbi") + "=").Append(System.Uri.EscapeDataString(ConvertToString(isInKbi, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (legalStatusCode != null)
            {
                foreach (var item_ in legalStatusCode) { urlBuilder_.Append(System.Uri.EscapeDataString("legalStatusCode") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (includeArchived != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("includeArchived") + "=").Append(System.Uri.EscapeDataString(ConvertToString(includeArchived, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showSegment != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showSegment") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showSegment, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_B3_TraceId == null)
                        throw new System.ArgumentNullException("x_B3_TraceId");
                    request_.Headers.TryAddWithoutValidation("X-B3-TraceId", ConvertToString(x_B3_TraceId, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_KB_Caller_System_Identity == null)
                        throw new System.ArgumentNullException("x_KB_Caller_System_Identity");
                    request_.Headers.TryAddWithoutValidation("X-KB-Caller-System-Identity", ConvertToString(x_KB_Caller_System_Identity, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<CustomerSearchResult>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Validation error - mostly invalid data in request is provided provided", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Authentication information is missing or is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("You are not authorized to run this operation", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Resource not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unexpected error occured", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// getNaturalPersonPersonalData
        /// </summary>
        /// <param name="customerId">Identifier of the customer whose base information will be returned (KBID - identifier of customer in Customer Management system)</param>
        /// <param name="showFirstNameVocative">flag indicating whether first name vocative should be evalueted and returned</param>
        /// <param name="showSurnameVocative">flag indicating whether surname vocative should be evalueted and returned</param>
        /// <param name="x_B3_TraceId">[Trace Id](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-TraceId)</param>
        /// <param name="x_KB_Caller_System_Identity">[Caller system](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-CallerSystemIdentity)</param>
        /// <returns>Natural person personal data</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task<NaturalPersonPersonalData> GetNaturalPersonPersonalDataAsync(long customerId, bool? showFirstNameVocative, bool? showSurnameVocative, string x_B3_TraceId, string x_KB_Caller_System_Identity)
        {
            return GetNaturalPersonPersonalDataAsync(customerId, showFirstNameVocative, showSurnameVocative, x_B3_TraceId, x_KB_Caller_System_Identity, System.Threading.CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// getNaturalPersonPersonalData
        /// </summary>
        /// <param name="customerId">Identifier of the customer whose base information will be returned (KBID - identifier of customer in Customer Management system)</param>
        /// <param name="showFirstNameVocative">flag indicating whether first name vocative should be evalueted and returned</param>
        /// <param name="showSurnameVocative">flag indicating whether surname vocative should be evalueted and returned</param>
        /// <param name="x_B3_TraceId">[Trace Id](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-TraceId)</param>
        /// <param name="x_KB_Caller_System_Identity">[Caller system](https://wiki.kb.cz/confluence/pages/viewpage.action?pageId=217274116#Komunika%C4%8Dn%C3%ADhlavi%C4%8Dkyverze2REST-CallerSystemIdentity)</param>
        /// <returns>Natural person personal data</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public virtual async System.Threading.Tasks.Task<NaturalPersonPersonalData> GetNaturalPersonPersonalDataAsync(long customerId, bool? showFirstNameVocative, bool? showSurnameVocative, string x_B3_TraceId, string x_KB_Caller_System_Identity, System.Threading.CancellationToken cancellationToken)
        {
            if (customerId == null)
                throw new System.ArgumentNullException("customerId");

            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append("public/v1/customers/{customerId}/natural-person-personal-data?");
            urlBuilder_.Replace("{customerId}", System.Uri.EscapeDataString(ConvertToString(customerId, System.Globalization.CultureInfo.InvariantCulture)));
            if (showFirstNameVocative != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showFirstNameVocative") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showFirstNameVocative, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (showSurnameVocative != null)
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("showSurnameVocative") + "=").Append(System.Uri.EscapeDataString(ConvertToString(showSurnameVocative, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;

            var client_ = _httpClient;
            var disposeClient_ = false;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {

                    if (x_B3_TraceId == null)
                        throw new System.ArgumentNullException("x_B3_TraceId");
                    request_.Headers.TryAddWithoutValidation("X-B3-TraceId", ConvertToString(x_B3_TraceId, System.Globalization.CultureInfo.InvariantCulture));

                    if (x_KB_Caller_System_Identity == null)
                        throw new System.ArgumentNullException("x_KB_Caller_System_Identity");
                    request_.Headers.TryAddWithoutValidation("X-KB-Caller-System-Identity", ConvertToString(x_KB_Caller_System_Identity, System.Globalization.CultureInfo.InvariantCulture));
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<NaturalPersonPersonalData>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == 400)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Validation error - mostly invalid data in request is provided provided", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 401)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Authentication information is missing or is invalid", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 403)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("You are not authorized to run this operation", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 404)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Resource not found", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == 500)
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Error>(response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null)
                            {
                                throw new ApiException("Response was null which was not expected.", status_, objectResponse_.Text, headers_, null);
                            }
                            throw new ApiException<Error>("Unexpected error occured", status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException("The HTTP status code of the response was not expected (" + status_ + ").", status_, responseData_, headers_, null);
                        }
                    }
                    finally
                    {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }

        public bool ReadResponseAsString { get; set; }

        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Threading.CancellationToken cancellationToken)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value == null)
            {
                return "";
            }

            if (value is System.Enum)
            {
                var name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = System.Convert.ToString(System.Convert.ChangeType(value, System.Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) 
            {
                return System.Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = System.Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }
    }

    /// <summary>
    /// Customer base information entity - contains party, primary address, contact address, primary phone and email, customer segments and economic classifications.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerBaseInfo
    {
        /// <summary>
        /// Identifier of the customer
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("party", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public Party Party { get; set; } = new Party();

        [Newtonsoft.Json.JsonProperty("primaryIdentificationDocument", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentificationDocument PrimaryIdentificationDocument { get; set; }

        [Newtonsoft.Json.JsonProperty("customerIdentification", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerIdentification CustomerIdentification { get; set; }

        [Newtonsoft.Json.JsonProperty("primaryAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrimaryAddress PrimaryAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("contactAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ContactAddress ContactAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("temporaryStay", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TemporaryStayAddress TemporaryStay { get; set; }

        [Newtonsoft.Json.JsonProperty("primaryEmail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrimaryEmail PrimaryEmail { get; set; }

        [Newtonsoft.Json.JsonProperty("primaryEmailConfirmed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrimaryEmailConfirmed PrimaryEmailConfirmed { get; set; }

        [Newtonsoft.Json.JsonProperty("primaryPhone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrimaryPhone PrimaryPhone { get; set; }

        [Newtonsoft.Json.JsonProperty("primaryPhoneConfirmed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrimaryPhoneConfirmed PrimaryPhoneConfirmed { get; set; }

        [Newtonsoft.Json.JsonProperty("customerSegment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerSegment CustomerSegment { get; set; }

        [Newtonsoft.Json.JsonProperty("fixedCustomerSegment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerSegment FixedCustomerSegment { get; set; }

        /// <summary>
        /// Flag indicating that customer is politically exposed.
        /// <br/>If the value of the item is 'true', politicalExposition is also returned.
        /// <br/>If the value is not returned, the information about political exposition is not collected.
        /// <br/>
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPoliticallyExposed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPoliticallyExposed { get; set; }

        [Newtonsoft.Json.JsonProperty("politicalExposition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PoliticalExposition PoliticalExposition { get; set; }

        /// <summary>
        /// Flag indicating that customer is legally incapable. Only for Natural Person. Mandatory for Natural Person.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isLegallyIncapable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsLegallyIncapable { get; set; }

        /// <summary>
        /// Flag indicating that customer is insurable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isInsurable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public bool IsInsurable { get; set; }

        /// <summary>
        /// Economic sector code according to ESA2010 as amended by the CNB - RDM codebook CB_ESAInstitutionalSectorCNB
        /// </summary>
        [Newtonsoft.Json.JsonProperty("esaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public string EsaCode { get; set; }

        /// <summary>
        /// Code of economic activity according to the new classification of economic activities Only for Juridical Person - RDM codebook CB_NACECode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("naceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.Obsolete]
        public string NaceCode { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycleStatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifecycleStatusEnum LifecycleStatusCode { get; set; }

        [Newtonsoft.Json.JsonProperty("fatca", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Fatca Fatca { get; set; }

        [Newtonsoft.Json.JsonProperty("kyc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Kyc Kyc { get; set; }

        [Newtonsoft.Json.JsonProperty("brSubscription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public BRSubscription BrSubscription { get; set; }

        [Newtonsoft.Json.JsonProperty("taxResidence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxResidence TaxResidence { get; set; }

        [Newtonsoft.Json.JsonProperty("taxDomicile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TaxDomicile TaxDomicile { get; set; }

        [Newtonsoft.Json.JsonProperty("confirmedContactFlags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ConfirmedContactFlags ConfirmedContactFlags { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Abstract type of party. Real descendants are NaturalPerson, LegalPerson and Entrepreneur
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "objectType")]
    [JsonInheritanceAttribute("LegalPerson", typeof(LegalPerson))]
    [JsonInheritanceAttribute("Entrepreneur", typeof(Entrepreneur))]
    [JsonInheritanceAttribute("NaturalPerson", typeof(NaturalPerson))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Party
    {
        /// <summary>
        /// Flag indicating whether subject is in KBI system
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isInKbi", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsInKbi { get; set; }

        /// <summary>
        /// List of customer identifiers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("customerIdentifiers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerIdentifier> CustomerIdentifiers { get; set; } = new System.Collections.ObjectModel.Collection<CustomerIdentifier>();

        /// <summary>
        /// P - for Natural Person, E - for Entrepreneur, B - for Legal Person
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legalStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartyLegalStatus LegalStatus { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Party of typ Legal Person
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LegalPerson : Party
    {
        /// <summary>
        /// Company name. Is filled with name from business register. When name from business register does not exists, KB custom search name is used instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Company name. Name from business register.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessRegisterName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string BusinessRegisterName { get; set; }

        /// <summary>
        /// Custom KB search name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameKb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string NameKb { get; set; }

        /// <summary>
        /// Company established date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("establishedOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime EstablishedOn { get; set; }

        [Newtonsoft.Json.JsonProperty("legalForm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JuridicalPersonLegalForm LegalForm { get; set; }

        /// <summary>
        /// Czech identification number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("czechIdentificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string CzechIdentificationNumber { get; set; }

    }

    /// <summary>
    /// Party of typ Entrepreneur
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Entrepreneur : Party
    {
        /// <summary>
        /// Entrepreneur name. Is filled with name from business register. When name from business register does not exists, KB custom search name is used instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Entrepreneur name. Name from business register.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessRegisterName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string BusinessRegisterName { get; set; }

        /// <summary>
        /// Custom KB search name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameKb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string NameKb { get; set; }

        /// <summary>
        /// Entrepreneur established date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("establishedOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime EstablishedOn { get; set; }

        [Newtonsoft.Json.JsonProperty("legalForm", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JuridicalPersonLegalForm LegalForm { get; set; }

        /// <summary>
        /// Czech identification number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("czechIdentificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string CzechIdentificationNumber { get; set; }

    }

    /// <summary>
    /// Party type of Natural Person
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NaturalPerson : Party
    {
        /// <summary>
        /// Title before name, i.e. prof. Ing., gen. Ing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15, MinimumLength = 1)]
        public string Title { get; set; }

        /// <summary>
        /// First name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string FirstName { get; set; }

        /// <summary>
        /// Surname
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Surname { get; set; }

        /// <summary>
        /// Date of birth
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime BirthDate { get; set; }

        /// <summary>
        /// Birth surname
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string BirthName { get; set; }

        /// <summary>
        /// Place of birth, i.e. Praque
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthPlace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string BirthPlace { get; set; }

        /// <summary>
        /// Land of birth - ISO 2 character code - RDM codebook CB_Country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthCountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string BirthCountryCode { get; set; }

        /// <summary>
        /// List of customer citizenships
        /// </summary>
        [Newtonsoft.Json.JsonProperty("citizenshipCodes", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> CitizenshipCodes { get; set; }

        /// <summary>
        /// Gender. KB supports only two genders - MALE and FEMALE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genderCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NaturalPersonGenderCode GenderCode { get; set; }

        [Newtonsoft.Json.JsonProperty("legalCapacityRestriction", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public LegalCapacityRestriction LegalCapacityRestriction { get; set; }

        /// <summary>
        /// Czech birth number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("czechBirthNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CzechBirthNumber { get; set; }

        /// <summary>
        /// First name vocative
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstNameVocative", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string FirstNameVocative { get; set; }

        /// <summary>
        /// Surname vocative
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surnameVocative", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string SurnameVocative { get; set; }

        /// <summary>
        /// Date of death
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deathDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime DeathDate { get; set; }

        /// <summary>
        /// Marital status code, RDM codebook CB_MaritalStatus
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maritalStatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength = 1)]
        public string MaritalStatusCode { get; set; }

    }

    /// <summary>
    /// Legal form
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JuridicalPersonLegalForm
    {
        /// <summary>
        /// Legal form code. CSC codebooks PRAV_FORM, PRAV_FORM2 (foreign legal forms)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string Code { get; set; }

        /// <summary>
        /// Description of legal form in the case of unknown legal form
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unstructured", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Unstructured { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Legal capacity restriction - type and end date
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Obsolete]
    public partial class LegalCapacityRestriction
    {
        /// <summary>
        /// Legal capacity restriction type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restrictionType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength = 1)]
        public string RestrictionType { get; set; }

        /// <summary>
        /// End date of the restriction
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restrictionUntil", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime RestrictionUntil { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customers identifiers
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerIdentifier
    {
        /// <summary>
        /// Identifier type code. RDM codebook CB_JuridicalPersonIdentificationType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TypeCode { get; set; }

        /// <summary>
        /// Value of identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identifierValue", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IdentifierValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identification document
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentificationDocument
    {
        /// <summary>
        /// Type of identification document - RDM codebook CB_IdentificationDocumentType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("typeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string TypeCode { get; set; }

        /// <summary>
        /// Official number of identification document - CDM number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("documentNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// Document issuing country - RDM codebook CB_Country - CDM issuingCountry
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuingCountryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string IssuingCountryCode { get; set; }

        /// <summary>
        /// Identification document issuing authority
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedBy", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string IssuedBy { get; set; }

        /// <summary>
        /// When document was issued - CDM validFrom
        /// </summary>
        [Newtonsoft.Json.JsonProperty("issuedOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime IssuedOn { get; set; }

        /// <summary>
        /// Document is valid until this date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime ValidTo { get; set; }

        /// <summary>
        /// Registration in OR or other register
        /// </summary>
        [Newtonsoft.Json.JsonProperty("registerPlace", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string RegisterPlace { get; set; }

        /// <summary>
        /// The document expiration flag
        /// </summary>
        [Newtonsoft.Json.JsonProperty("expired", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Expired { get; set; }

        /// <summary>
        /// Losted document flag
        /// </summary>
        [Newtonsoft.Json.JsonProperty("lostDocument", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool LostDocument { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer primary phone.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryPhone
    {
        /// <summary>
        /// Local part of phone number, including national destination code i.e. +420 777112233.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Flag whether it is a mobile phone. Flag is determined only for czech and slovak phone numbers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isMobile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsMobile { get; set; }

        /// <summary>
        /// Flag indicating that phone is confirmed by client
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confirmed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Confirmed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer primary phone confirmed by customer.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Obsolete]
    public partial class PrimaryPhoneConfirmed
    {
        /// <summary>
        /// Local part of phone number, including national destination code i.e. +420 777112233.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phoneNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Flag whether it is a mobile phone. Flag is determined only for czech and slovak phone numbers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isMobile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsMobile { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer primary email.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryEmail
    {
        /// <summary>
        /// Email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Flag indicating that phone is confirmed by client
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confirmed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Confirmed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer primary email.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Obsolete]
    public partial class PrimaryEmailConfirmed
    {
        /// <summary>
        /// Email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("emailAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        public string EmailAddress { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Primary address. Address is returned according to input parameter requiredAddressFormats. LINE - address, COMPONENT - componentAddress, SINGLE_LINE - singleLineAddress.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryAddress
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [Newtonsoft.Json.JsonProperty("componentAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentAddress ComponentAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("singleLineAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SingleLineAddress SingleLineAddress { get; set; }

        /// <summary>
        /// For natural person place of residence - date when customer starts live there
        /// </summary>
        [Newtonsoft.Json.JsonProperty("primaryAddressFrom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime PrimaryAddressFrom { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contact address. Bank correspondence delivery address. If it is not filled out, correspondence is delivered to a permanent residence address. A contact address can also be entered as a P.O. BOX. Address is returned according to input parameter requiredAddressFormats. LINE - address, COMPONENT - componentAddress, SINGLE_LINE - singleLineAddress
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAddress
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [Newtonsoft.Json.JsonProperty("componentAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentAddress ComponentAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("singleLineAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SingleLineAddress SingleLineAddress { get; set; }

        /// <summary>
        /// Flag indicating that address is confirmed by client
        /// </summary>
        [Newtonsoft.Json.JsonProperty("confirmed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Confirmed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Temporary residence address. The address is obligatory for foreigners who do not have the Czech Republic filled in at their permanent address. Address is returned according to input parameter requiredAddressFormats. LINE - address, COMPONENT - componentAddress, SINGLE_LINE - singleLineAddress
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemporaryStayAddress
    {
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Address Address { get; set; }

        [Newtonsoft.Json.JsonProperty("componentAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ComponentAddress ComponentAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("singleLineAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SingleLineAddress SingleLineAddress { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Address in LINE format
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// First line of address (street, street number etc.)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Street { get; set; }

        /// <summary>
        /// Address delivery details
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DeliveryDetails { get; set; }

        /// <summary>
        /// Third line of address (typically city)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string City { get; set; }

        /// <summary>
        /// Post code, Postal code, ZIP code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string PostCode { get; set; }

        /// <summary>
        /// Country code - two characters ISO code - RDM codebook CB_Country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Identification of address point
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressPointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AddressPointId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Address in COMPONENT format Examples: &lt;ul&gt; &lt;li&gt; Czech address with street, house number and street number: { "street": "Wilsonova", "houseNumber": "101", "streetNumber": "1", "cityDistrict": "Vinohrady", "pragueDistrict": "Praha 1", "deliveryDetails": "Marketing department", "city": "Praha", "postCode": "11000", "countryCode": "CZ", "addressPointId": "21727554" }
    /// <br/>&lt;li&gt; Czech address without street and with house number: { "houseNumber": "6", "cityDistrict": "Dehtáry", "city": "Jenštejn ", "postCode": "25091", "countryCode": "CZ", "addressPointId": "12644340" }
    /// <br/>&lt;li&gt; Foreign address with street, house number: { "street": "S Torrence Ave", "houseNumber": "12600", "deliveryDetails": "Marketing department", "city": "Chicago", "postCode": "60633", "countryCode": "US", "countrySubdivision": "IL" }
    /// <br/>&lt;li&gt; Foreign address without street, with house number: { "houseNumber": "16", "city": "Drzymałowice", "postCode": "59-407", "countryCode": "PL", }
    /// <br/>&lt;li&gt; Post box address: { "postBox": "1234 ", "city": "Jenštejn ", "postCode": "25091", "countryCode": "CZ", } &lt;/ul&gt; 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentAddress
    {
        /// <summary>
        /// Street name without a house number. The field is not filled out for cities without an street network or for post box address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Street { get; set; }

        /// <summary>
        /// The house number. It is not filled out for post box address. Foreign addresses should have it filled out. Czech addresses may have the building number in this attribute or the evidenceNumber.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("houseNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string HouseNumber { get; set; }

        /// <summary>
        /// Evidence number. It is not filled out for post box address. Used only for Czech addresses. The evidence number has objects that are not assigned a house number. These are, for example, chalets.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("evidenceNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string EvidenceNumber { get; set; }

        /// <summary>
        /// Street number. It is not filled out for post box address. Used only for Czech and Slovak addresses. A number that helps locate a house on a given street.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("streetNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// City district. It is not filled out for post box address. Should be filled for all Czech addresses, at least for that with address point id.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("cityDistrict", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string CityDistrict { get; set; }

        /// <summary>
        /// Territory of the city district in the capital Prague (Praha 1 - 10 not Praha 1 - 22). It is not filled out for post box address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pragueDistrict", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PragueDistrict { get; set; }

        /// <summary>
        /// A note of delivery specifying to whom delivery is intended.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliveryDetails", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DeliveryDetails { get; set; }

        /// <summary>
        /// The city name. Only the name of the city without its parts is given, i.e. for Prague we only mention Prague and not Prague 6 or Prague Dejvice.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string City { get; set; }

        /// <summary>
        /// P.O. Box number. For Czech addresses the value is number. It is filled out for post box address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postBox", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string PostBox { get; set; }

        /// <summary>
        /// Post code, Postal code, ZIP code.  For czech address it should be five-digit number between 10000 - 79999
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string PostCode { get; set; }

        /// <summary>
        /// It is used only for foreign addresses and mainly for states which are divided into large self-governing entities. E.g. USA, then state like Texas, Florida is filled out.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countrySubdivision", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string CountrySubdivision { get; set; }

        /// <summary>
        /// Country code - two characters ISO code - RDM codebook CB_Country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Address point id from Register of Territorial Identification of Addresses and Properties in the Czech Republic or its equivalent in the Slovak Republic.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("addressPointId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AddressPointId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Address in SINGLE_LINE format. Single line textual address representation. Whole address is one textual line.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleLineAddress
    {
        /// <summary>
        /// Represents whole address.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("address", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Address { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Types of the address format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressFormats : System.Collections.ObjectModel.Collection<AddressFormat>
    {

    }

    /// <summary>
    /// Type of the address format.
    /// <br/>* 'LINE'      - Address format in the form of address lines. An easy-to-read form for users. It is used, for example, for an address on a letter or a contractual document, or to display address to user in application. This notation returns in the Address schema definition
    /// <br/>* 'COMPONENT' - Address format in the form of address components. Harder for users to read form. Component writing is used primarily to enter an address or to exchange an address for machine processing. This notation returns in the ComponentAddress schema definition.
    /// <br/>* 'SINGLE_LINE' - Address format in single line. Mainly used for visual presentation of address.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AddressFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LINE")]
        LINE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPONENT")]
        COMPONENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE_LINE")]
        SINGLE_LINE = 2,

    }

    /// <summary>
    /// Customer segment and subsegment
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerSegment
    {
        /// <summary>
        /// Synthetic segment key code (connection of segmentCode + subsegmentCode) for referencing RDM codebook CB_CustomerSegment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("segmentKeyCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SegmentKeyCode { get; set; }

        /// <summary>
        /// Customer segment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("segmentCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SegmentCode { get; set; }

        /// <summary>
        /// Customer subsegment
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subsegmentCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SubsegmentCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NaturalPersonPersonalData
    {
        /// <summary>
        /// First name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string FirstName { get; set; }

        /// <summary>
        /// Surname
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Surname { get; set; }

        /// <summary>
        /// Gender. KB supports only two genders - MALE and FEMALE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genderCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NaturalPersonPersonalDataGenderCode GenderCode { get; set; }

        /// <summary>
        /// First name vocative
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstNameVocative", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string FirstNameVocative { get; set; }

        /// <summary>
        /// Surname vocative
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surnameVocative", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string SurnameVocative { get; set; }

        /// <summary>
        /// Subject initials from first name and surname
        /// </summary>
        [Newtonsoft.Json.JsonProperty("initials", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 1)]
        public string Initials { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerSearchResult
    {
        /// <summary>
        /// Flag indicating whether search result can return more rows
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isThereMore", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsThereMore { get; set; }

        [Newtonsoft.Json.JsonProperty("resultRows", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerSearchResultRow> ResultRows { get; set; } = new System.Collections.ObjectModel.Collection<CustomerSearchResultRow>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// search result
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerSearchResultRow
    {
        [Newtonsoft.Json.JsonProperty("customerId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long CustomerId { get; set; }

        [Newtonsoft.Json.JsonProperty("party", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PartySearchResult Party { get; set; }

        [Newtonsoft.Json.JsonProperty("primaryIdentificationDocument", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public IdentificationDocument PrimaryIdentificationDocument { get; set; }

        [Newtonsoft.Json.JsonProperty("primaryAddress", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public PrimaryAddress PrimaryAddress { get; set; }

        [Newtonsoft.Json.JsonProperty("customerSegment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerSegment CustomerSegment { get; set; }

        [Newtonsoft.Json.JsonProperty("fixedCustomerSegment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerSegment FixedCustomerSegment { get; set; }

        /// <summary>
        /// Customer of bank to which access is restricted. For example, an employee is considered to be restricted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("restrictedCustomer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool RestrictedCustomer { get; set; }

        [Newtonsoft.Json.JsonProperty("lifecycleStatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public LifecycleStatusEnum LifecycleStatusCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Abstract Party search result. Common ancestor for Natural Person, Legal Person and Entrepreneur
    /// </summary>
    [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "objectType")]
    [JsonInheritanceAttribute("LegalPersonSearchResult", typeof(LegalPersonSearchResult))]
    [JsonInheritanceAttribute("EntrepreneurSearchResult", typeof(EntrepreneurSearchResult))]
    [JsonInheritanceAttribute("NaturalPersonSearchResult", typeof(NaturalPersonSearchResult))]
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartySearchResult
    {
        /// <summary>
        /// P - for Natural Person, E - for Entrepreneur, B - for Legal Person
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legalStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PartySearchResultLegalStatus LegalStatus { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Legal Person search result
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LegalPersonSearchResult : PartySearchResult
    {
        /// <summary>
        /// Company name. Is filled with name from business register. When name from business register does not exists, KB custom search name is used instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Company name. Name from business register.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessRegisterName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string BusinessRegisterName { get; set; }

        /// <summary>
        /// Custom KB search name. This field is used for searching.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameKb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string NameKb { get; set; }

        /// <summary>
        /// Company established date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("establishedOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime EstablishedOn { get; set; }

        /// <summary>
        /// Czech identification number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("czechIdentificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string CzechIdentificationNumber { get; set; }

    }

    /// <summary>
    /// Entrepreneur search result
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntrepreneurSearchResult : PartySearchResult
    {
        /// <summary>
        /// Entrepreneur name. Is filled with name from business register. When name from business register does not exists, KB custom search name is used instead.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Entrepreneur name. Name from business register.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessRegisterName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string BusinessRegisterName { get; set; }

        /// <summary>
        /// Custom KB search name. This field is used for searching.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("nameKb", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string NameKb { get; set; }

        /// <summary>
        /// Company established date
        /// </summary>
        [Newtonsoft.Json.JsonProperty("establishedOn", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime EstablishedOn { get; set; }

        /// <summary>
        /// Czech identification number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("czechIdentificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string CzechIdentificationNumber { get; set; }

    }

    /// <summary>
    /// Natural Person search result
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NaturalPersonSearchResult : PartySearchResult
    {
        /// <summary>
        /// Title before name, i.e. prof. Ing., gen. Ing.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(15, MinimumLength = 1)]
        public string Title { get; set; }

        /// <summary>
        /// First name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string FirstName { get; set; }

        /// <summary>
        /// Surname
        /// </summary>
        [Newtonsoft.Json.JsonProperty("surname", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Surname { get; set; }

        /// <summary>
        /// Date of birth
        /// </summary>
        [Newtonsoft.Json.JsonProperty("birthDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime BirthDate { get; set; }

        /// <summary>
        /// Gender
        /// </summary>
        [Newtonsoft.Json.JsonProperty("genderCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public NaturalPersonSearchResultGenderCode GenderCode { get; set; }

        /// <summary>
        /// Czech birth number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("czechBirthNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string CzechBirthNumber { get; set; }

    }

    /// <summary>
    /// Customer lifecycle status
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LifecycleStatusEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVED")]
        ARCHIVED = 2,

    }

    /// <summary>
    /// The customer's identification entity. Entity contains method, identificaiton date and identifying company.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerIdentification
    {
        /// <summary>
        /// Code of the method of identifying the subject. Value is defined in the code list CB_IdentificationMethodType
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identificationMethodCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string IdentificationMethodCode { get; set; }

        /// <summary>
        /// The date and time the subject was first identified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("identificationDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTime IdentificationDate { get; set; }

        /// <summary>
        /// Czech identification number of the company that made the subject identification. Value is mandatory only for specific identification method codes. See CB_IdentificationMethodType.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("czechIdentificationNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string CzechIdentificationNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// FATCA (Foreign Account Tax Compliance Act)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fatca
    {
        /// <summary>
        /// FATCA status code - RDM codebook CB_FATCAStatus
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int StatusCode { get; set; }

        /// <summary>
        /// Date of FATCA status determination
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime StatusDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer turnover in one year
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerTurnover
    {
        /// <summary>
        /// Year of turnover
        /// </summary>
        [Newtonsoft.Json.JsonProperty("year", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Year { get; set; }

        /// <summary>
        /// Customer turnover per year
        /// </summary>
        [Newtonsoft.Json.JsonProperty("turnover", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long Turnover { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer financial profile
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FinancialProfile
    {
        [Newtonsoft.Json.JsonProperty("mainSourceOfEarnings", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public MainSourceOfEarnings MainSourceOfEarnings { get; set; }

        /// <summary>
        /// Net monthly earning
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netMonthEarning", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NetMonthEarning { get; set; }

        /// <summary>
        /// Code of interval net monthly earning - CM Codebook of net month earnings - EP_C_NET_MONTH_EARNING
        /// </summary>
        [Newtonsoft.Json.JsonProperty("netMonthEarningCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string NetMonthEarningCode { get; set; }

        /// <summary>
        /// Saving investment potencial
        /// </summary>
        [Newtonsoft.Json.JsonProperty("savingInvestmentPotencial", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double SavingInvestmentPotencial { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer employment profession and category
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Employment
    {
        /// <summary>
        /// Profession category code - codebook CSC PROF_CAT1, RDM CB_Prof_Cat1
        /// </summary>
        [Newtonsoft.Json.JsonProperty("categoryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int CategoryCode { get; set; }

        /// <summary>
        /// Profession code - codebook CSC PROF_CAT2
        /// </summary>
        [Newtonsoft.Json.JsonProperty("professionCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int ProfessionCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Main source of earnings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MainSourceOfEarnings
    {
        /// <summary>
        /// Code of the source of earnings - CSC codebook ZDROJ_PRIJ
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Code { get; set; }

        /// <summary>
        /// Description of the source of earnings- only for code 6 / 'other source'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer turnover in one year
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Housing
    {
        /// <summary>
        /// Code of housing - codebook CB_Housing_Type
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// Description of housing - only for code 'OT' / 'other'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer KYC data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Kyc
    {
        /// <summary>
        /// Economic sector code according to ESA2010 as amended by the CNB - RDM codebook CB_ESAInstitutionalSectorCNB
        /// </summary>
        [Newtonsoft.Json.JsonProperty("esaCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EsaCode { get; set; }

        /// <summary>
        /// Flag indicating that customer is insurable
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isInsurable", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsInsurable { get; set; }

        [Newtonsoft.Json.JsonProperty("naturalPersonKyc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public NaturalPersonKyc NaturalPersonKyc { get; set; }

        [Newtonsoft.Json.JsonProperty("juridicalPersonKyc", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public JuridicalPersonKyc JuridicalPersonKyc { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Natural person KYC data. Object is only present when customer is type of NaturalPerson.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NaturalPersonKyc
    {
        /// <summary>
        /// Code of education - codebook CB_EducationDegree
        /// </summary>
        [Newtonsoft.Json.JsonProperty("educationCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EducationCode { get; set; }

        [Newtonsoft.Json.JsonProperty("financialProfile", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public FinancialProfile FinancialProfile { get; set; }

        [Newtonsoft.Json.JsonProperty("housing", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Housing Housing { get; set; }

        [Newtonsoft.Json.JsonProperty("employment", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Employment Employment { get; set; }

        [Newtonsoft.Json.JsonProperty("customerKbRelationship", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CustomerKbRelationship CustomerKbRelationship { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Juridical person KYC data. Object is only present when customer is type of JuridicalPerson.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JuridicalPersonKyc
    {
        /// <summary>
        /// Number of employees
        /// </summary>
        [Newtonsoft.Json.JsonProperty("numberOfEmployees", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int NumberOfEmployees { get; set; }

        /// <summary>
        /// Code of economic activity according to the new classification of economic activities Only for Juridical Person - RDM codebook CB_NACECode
        /// </summary>
        [Newtonsoft.Json.JsonProperty("naceCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string NaceCode { get; set; }

        /// <summary>
        /// Text description of business area
        /// </summary>
        [Newtonsoft.Json.JsonProperty("businessArea", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string BusinessArea { get; set; }

        [Newtonsoft.Json.JsonProperty("customerTurnovers", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<CustomerTurnover> CustomerTurnovers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about political exposure
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PoliticalExposition
    {
        /// <summary>
        /// Code of political office. Value must match CB_PoliticallyExposedPersonFunction code list
        /// </summary>
        [Newtonsoft.Json.JsonProperty("functionCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string FunctionCode { get; set; }

        /// <summary>
        /// Text description of the function. Description is mandatory when the function code is set to a value that has the mandatory_note flag set to true in the CB_PoliticallyExposedPersonFunction code list.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("functionDescription", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FunctionDescription { get; set; }

        /// <summary>
        /// Risk level of a politically exposed person. Value from code list CB_PoliticallyExposedPersonLevel
        /// </summary>
        [Newtonsoft.Json.JsonProperty("levelCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string LevelCode { get; set; }

        /// <summary>
        /// Status of politically exposed person. The value should match the code list CB_PoliticallyExposedPersonStatus. Two values are defined ACTIVE - if in office and PASSIVE - should be set three years after the end of public office.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("statusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string StatusCode { get; set; }

        /// <summary>
        /// Country of political office, two-letter ISO code, defined in RDM codebook CB_Country.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Date of termination of public office, may even be foreseen for the future. When the date expires, the status should be set to passive.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endDateOfPoliticalActivity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime EndDateOfPoliticalActivity { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about subscription for update from the Basic registry
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BRSubscription
    {
        /// <summary>
        /// Information if customer subscribed for update from the Basic registry
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isSubscribed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsSubscribed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer's relationship with KB
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerKbRelationship
    {
        /// <summary>
        /// Code of the type of customer's relationship with KB - CSC codebook CLI_KB_REL
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string Code { get; set; }

        /// <summary>
        /// Financial group company code - only for code 'A' - RDM codebook CB_KBGroupCompany
        /// </summary>
        [Newtonsoft.Json.JsonProperty("companyCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string CompanyCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tax residence
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxResidence
    {
        /// <summary>
        /// Country code of tax residence - two characters ISO code - RDM codebook CB_Country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Date of beginning of tax residence
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validFrom", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime ValidFrom { get; set; }

        /// <summary>
        /// Tax identification number
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tin", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string Tin { get; set; }

        /// <summary>
        /// Type of legal entity - Values are defined in CSC codebook PRAVT_CRS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legalEntityTypeCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int LegalEntityTypeCode { get; set; }

        /// <summary>
        /// Passive NFE flag
        /// </summary>
        [Newtonsoft.Json.JsonProperty("isPassiveNfe", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsPassiveNfe { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tax domicile
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxDomicile
    {
        /// <summary>
        /// Country code of tax domicile - two characters ISO code - RDM codebook CB_Country
        /// </summary>
        [Newtonsoft.Json.JsonProperty("countryCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Date of end of tax domicile
        /// </summary>
        [Newtonsoft.Json.JsonProperty("validTo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime ValidTo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about confirmed contacts
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfirmedContactFlags
    {
        /// <summary>
        /// Information if all customer contacts are confirmed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allContactsConfirmed", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AllContactsConfirmed { get; set; }

        /// <summary>
        /// Information if at least one confirmed contact is confirmed(phone or email)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("atLeastOneConfirmedContact", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool AtLeastOneConfirmedContact { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// Http status code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("httpStatusCode", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int HttpStatusCode { get; set; }

        /// <summary>
        /// Error category
        /// </summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Category { get; set; }

        /// <summary>
        /// Error code
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// Error message
        /// </summary>
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Error uuid
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uuid", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uuid { get; set; }

        /// <summary>
        /// Error detail
        /// </summary>
        [Newtonsoft.Json.JsonProperty("detail", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Detail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PartyLegalStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NaturalPersonGenderCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"M")]
        M = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NaturalPersonPersonalDataGenderCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"M")]
        M = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PartySearchResultLegalStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NaturalPersonSearchResultGenderCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"M")]
        M = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
    internal class JsonInheritanceAttribute : System.Attribute
    {
        public JsonInheritanceAttribute(string key, System.Type type)
        {
            Key = key;
            Type = type;
        }

        public string Key { get; }

        public System.Type Type { get; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter
    {
        internal static readonly string DefaultDiscriminatorName = "discriminator";

        private readonly string _discriminatorName;

        [System.ThreadStatic]
        private static bool _isReading;

        [System.ThreadStatic]
        private static bool _isWriting;

        public JsonInheritanceConverter()
        {
            _discriminatorName = DefaultDiscriminatorName;
        }

        public JsonInheritanceConverter(string discriminatorName)
        {
            _discriminatorName = discriminatorName;
        }

        public string DiscriminatorName { get { return _discriminatorName; } }

        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer)
        {
            try
            {
                _isWriting = true;

                var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
                jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
                writer.WriteToken(jObject.CreateReader());
            }
            finally
            {
                _isWriting = false;
            }
        }

        public override bool CanWrite
        {
            get
            {
                if (_isWriting)
                {
                    _isWriting = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanRead
        {
            get
            {
                if (_isReading)
                {
                    _isReading = false;
                    return false;
                }
                return true;
            }
        }

        public override bool CanConvert(System.Type objectType)
        {
            return true;
        }

        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer)
        {
            var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
            if (jObject == null)
                return null;

            var discriminatorValue = jObject.GetValue(_discriminatorName);
            var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
            var subtype = GetObjectSubtype(objectType, discriminator);

            var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
            if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName))
            {
                jObject.Remove(_discriminatorName);
            }

            try
            {
                _isReading = true;
                return serializer.Deserialize(jObject.CreateReader(), subtype);
            }
            finally
            {
                _isReading = false;
            }
        }

        private System.Type GetObjectSubtype(System.Type objectType, string discriminator)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Key == discriminator)
                    return attribute.Type;
            }

            return objectType;
        }

        private string GetSubtypeDiscriminator(System.Type objectType)
        {
            foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true))
            {
                if (attribute.Type == objectType)
                    return attribute.Key;
            }

            return objectType.Name;
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter
    {
        public DateFormatConverter()
        {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603