//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace DomainServices.CustomerService.ExternalServices.Address.V2.Contracts
{
    using System = global::System;

    

    /// <summary>
    /// Address in LINE format
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressLinePoint
    {
        /// <summary>
        /// First line of address (street, street number etc.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Street { get; set; }

        /// <summary>
        /// Address delivery details
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliveryDetails")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DeliveryDetails { get; set; }

        /// <summary>
        /// Third line of address (typically city)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string City { get; set; }

        /// <summary>
        /// Post code, Postal code, ZIP code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string PostCode { get; set; }

        /// <summary>
        /// Country code - two characters ISO code - CB_Country
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Identification of address point
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressPointId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AddressPointId { get; set; }

        /// <summary>
        /// Flag indicating that user confirmed address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Confirmed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer address whith addressId and addressTypeCode
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressWithType
    {
        /// <summary>
        /// Address unique identifier in Customer Management system
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressId")]
        public long AddressId { get; set; }

        /// <summary>
        /// Address type code defines address usage, i.e. 1 - Home address for Natural Person, 3 - Correspondence address, etc. Values are defined in CSC codebook ADDR_TYPE
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressTypeCode")]
        public long AddressTypeCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("addressLinePoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressLinePoint AddressLinePoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("componentAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ComponentAddressPoint ComponentAddressPoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("singleLineAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SingleLineAddressPoint SingleLineAddressPoint { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Primary address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("componentAddressPoint")]
        [System.ComponentModel.DataAnnotations.Required]
        public ComponentAddressPoint ComponentAddressPoint { get; set; } = new ComponentAddressPoint();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Temporary residence address. The address is obligatory for foreigners who do not have the Czech Republic filled in at their permanent address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemporaryStayAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("componentAddressPoint")]
        [System.ComponentModel.DataAnnotations.Required]
        public ComponentAddressPoint ComponentAddressPoint { get; set; } = new ComponentAddressPoint();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Primary address. If addressFormat 'LINE' is selected, the address is returned. If addressFormat 'COMPONENT' is selected, the componentAddress is returned. If addressFormat 'SINGLE_LINE' is selected, the singleAddressLine is returned
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryAddressResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("addressLinePoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressLinePoint AddressLinePoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("componentAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ComponentAddressPoint ComponentAddressPoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("singleLineAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SingleLineAddressPoint SingleLineAddressPoint { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contact address. Bank correspondence delivery address. If it is not filled out, correspondence is delivered to a permanent residence address. A contact address can also be entered as a P.O. BOX. If addressFormat 'LINE' is selected, the address is returned. If addressFormat 'COMPONENT' is selected, the componentAddress is returned. If addressFormat 'SINGLE_LINE' is selected, the singleAddressLine is returned
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAddressResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("addressLinePoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressLinePoint AddressLinePoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("componentAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ComponentAddressPoint ComponentAddressPoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("singleLineAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SingleLineAddressPoint SingleLineAddressPoint { get; set; }

        /// <summary>
        /// Flag indicating that address is confirmed by client
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Confirmed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contact address. Bank correspondence delivery address. If it is not filled out, correspondence is delivered to a permanent residence address. A contact address can also be entered as a P.O. BOX.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("componentAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ComponentAddressPoint ComponentAddressPoint { get; set; }

        /// <summary>
        /// Flag indicating that address is confirmed by client
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Confirmed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Address to format, only one of address or componentAddress can be filled in.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressToFormat
    {

        [System.Text.Json.Serialization.JsonPropertyName("addressLinePoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressLinePoint AddressLinePoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("componentAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ComponentAddressPoint ComponentAddressPoint { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Address in requested formats. Supported Component, Address line and Single line formats.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FormattedAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("addressLinePoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressLinePoint AddressLinePoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("componentAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ComponentAddressPoint ComponentAddressPoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("singleLineAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SingleLineAddressPoint SingleLineAddressPoint { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Address in SINGLE_LINE format. Single line textual address representation. Whole address is one textual line.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleLineAddressPoint
    {
        /// <summary>
        /// Represents whole address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Address { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Types of the address format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressFormats : System.Collections.ObjectModel.Collection<AddressFormat>
    {

    }

    /// <summary>
    /// Type of the address format.
    /// <br/>* 'LINE'      - Address format in the form of address lines. An easy-to-read form for users. It is used, for example, for an address on a letter or a contractual document, or to display address to user in application. This notation returns in the Address schema definition
    /// <br/>* 'COMPONENT' - Address format in the form of address components. Harder for users to read form. Component writing is used primarily to enter an address or to exchange an address for machine processing. This notation returns in the ComponentAddress schema definition.
    /// <br/>* 'SINGLE_LINE' - Address format in single line. Mainly used for visual presentation of address.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AddressFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LINE")]
        LINE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPONENT")]
        COMPONENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE_LINE")]
        SINGLE_LINE = 2,

    }

    /// <summary>
    /// Component address. Examples: &lt;ul&gt; &lt;li&gt; Czech address with street, house number and street number: { "street": "Wilsonova", "houseNumber": "101", "streetNumber": "1", "cityDistrict": "Vinohrady", "pragueDistrict": "Praha 1", "deliveryDetails": "Marketing department", "city": "Praha", "postCode": "11000", "countryCode": "CZ", "addressPointId": "21727554" }
    /// <br/>&lt;li&gt; Czech address without street and with house number: { "houseNumber": "6", "cityDistrict": "Dehtáry", "city": "Jenštejn ", "postCode": "25091", "countryCode": "CZ", "addressPointId": "12644340" }
    /// <br/>&lt;li&gt; Foreign address with street, house number: { "street": "S Torrence Ave", "houseNumber": "12600", "deliveryDetails": "Marketing department", "city": "Chicago", "postCode": "60633", "countryCode": "US", "countrySubdivision": "IL" }
    /// <br/>&lt;li&gt; Foreign address without street, with house number: { "houseNumber": "16", "city": "Drzymałowice", "postCode": "59-407", "countryCode": "PL", }
    /// <br/>&lt;li&gt; Post box address: { "postBox": "1234 ", "city": "Jenštejn ", "postCode": "25091", "countryCode": "CZ", } &lt;/ul&gt; 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentAddressPoint
    {
        /// <summary>
        /// Street name without a house number. The field is not filled out for cities without an street network or for post box address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("street")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string Street { get; set; }

        /// <summary>
        /// The house number. It is not filled out for post box address. Foreign addresses should have it filled out. Czech addresses may have the building number in this attribute or the evidenceNumber.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("houseNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string HouseNumber { get; set; }

        /// <summary>
        /// Evidence number. It is not filled out for post box address. Used only for Czech addresses. The evidence number has objects that are not assigned a house number. These are, for example, chalets.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("evidenceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string EvidenceNumber { get; set; }

        /// <summary>
        /// Street number. It is not filled out for post box address. Used only for Czech or Slovak addresses. A number that helps locate a house on a given street.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("streetNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// City district. It is not filled out for post box address. Should be filled for all Czech addresses, at least for that with address point id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cityDistrict")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string CityDistrict { get; set; }

        /// <summary>
        /// Territory of the city district in the capital Prague (Praha 1 - 10 not Praha 1 - 22). It is not filled out for post box address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pragueDistrict")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string PragueDistrict { get; set; }

        /// <summary>
        /// A note of delivery specifying to whom delivery is intended.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliveryDetails")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string DeliveryDetails { get; set; }

        /// <summary>
        /// The city name. Only the name of the city without its parts is given, i.e. for Prague we only mention Prague and not Prague 6 or Prague Dejvice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string City { get; set; }

        /// <summary>
        /// P.O. Box number. For Czech addresses the value is number. It is filled out for post box address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postBox")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string PostBox { get; set; }

        /// <summary>
        /// Post code, Postal code, ZIP code.  For czech address it should be five-digit number between 10000 - 79999
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string PostCode { get; set; }

        /// <summary>
        /// It is used only for foreign addresses and mainly for states which are divided into large self-governing entities. E.g. USA, then state like Texas, Florida is filled out.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countrySubdivision")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string CountrySubdivision { get; set; }

        /// <summary>
        /// Country code - two characters ISO code - CB_Country
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Address point id from Register of Territorial Identification of Addresses and Properties in the Czech Republic or its equivalent in the Slovak Republic.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressPointId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string AddressPointId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Validation result with list of issues
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ValidateAddressFormatResponse
    {
        /// <summary>
        /// Validation result
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationResult")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ValidateAddressFormatResponseValidationResult ValidationResult { get; set; }

        /// <summary>
        /// List of validation issue codes
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validationIssueCodes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> ValidationIssueCodes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// Http status code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("httpStatusCode")]
        public int HttpStatusCode { get; set; }

        /// <summary>
        /// Error category
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public int Category { get; set; }

        /// <summary>
        /// Error code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// Error message
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Error uuid
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uuid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uuid { get; set; }

        /// <summary>
        /// Error detail
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("detail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public object Detail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PartyLegalStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PartyLegalStatus2
    {

        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum ValidateAddressFormatResponseValidationResult
    {

        [System.Runtime.Serialization.EnumMember(Value = @"VALID")]
        VALID = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ERROR")]
        ERROR = 1,

    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603