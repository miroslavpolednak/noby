//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace DomainServices.CustomerService.ExternalServices.IdentifiedSubjectBr.V1.Contracts
{
    using System = global::System;

    

    /// <summary>
    /// Identified subject. In order to be identifiable, an entity must meet the following criteria. &lt;ul&gt; &lt;li&gt; For party type NaturalPerson (party.legalStatus=P): &lt;ul&gt; &lt;li&gt; party.naturalPersonAttributes.firstName, party.naturalPersonAttributes.surname, party.naturalPersonAttributes.birthDate, party.naturalPersonAttributes.genderCode filled in &lt;li&gt; Filled with one of the combinations &lt;ul&gt; &lt;li&gt; party.naturalPersonAttributes.czechBirthNumber &lt;li&gt; one of the primaryAddress, contactAddress, temporaryStay, or one of the primaryEmail, primaryPhone or primaryIdentificationDocument document &lt;/ul&gt; &lt;/ul&gt; &lt;/ul&gt; Other validations: &lt;ul&gt; &lt;li&gt; The completion of the contactAddress is conditional upon the completion of the primaryAddress. &lt;li&gt; In case the primaryAddress has a country code different from CZ, then it is necessary to fill in the temporaryStay address, which is in the territory of the Czech Republic. If the primaryAddress is with country code CZ, then the temporary residence address should be empty. &lt;li&gt; When completing the identificationMethod, the primaryIdentificationDocument by which the customer was identified must also be completed. &lt;ul&gt;
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentifiedSubject
    {

        [System.Text.Json.Serialization.JsonPropertyName("party")]
        [System.ComponentModel.DataAnnotations.Required]
        public Party Party { get; set; } = new Party();

        [System.Text.Json.Serialization.JsonPropertyName("primaryAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public PrimaryAddress PrimaryAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ContactAddress ContactAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("temporaryStay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public TemporaryStayAddress TemporaryStay { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("primaryIdentificationDocument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public IdentificationDocument PrimaryIdentificationDocument { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerIdentification")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CustomerIdentification CustomerIdentification { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("primaryPhone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public PrimaryPhone PrimaryPhone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("primaryEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public PrimaryEmail PrimaryEmail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// A common entity for all legal statuses. Natural person data is in the naturalPersonAttributes section.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Party
    {
        /// <summary>
        /// P - for Natural Person, E - for Entrepreneur, B - for Legal Person
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("legalStatus")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PartyLegalStatus LegalStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("naturalPersonAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public NaturalPersonAttributes NaturalPersonAttributes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Attributes for Natural Person type of party
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NaturalPersonAttributes
    {
        /// <summary>
        /// Title before name, CSC codebook CISTIT.C_TITUL_KBI
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(15, MinimumLength = 1)]
        public string Title { get; set; }

        /// <summary>
        /// First name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string FirstName { get; set; }

        /// <summary>
        /// Surname
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("surname")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Surname { get; set; }

        /// <summary>
        /// Gender. M - MALE, F - FEMALE
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("genderCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public NaturalPersonAttributesGenderCode GenderCode { get; set; }

        /// <summary>
        /// Date of birth
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthDate")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime BirthDate { get; set; }

        /// <summary>
        /// Czech birth number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("czechBirthNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 9)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{9,10}$")]
        public string CzechBirthNumber { get; set; }

        /// <summary>
        /// List of customer citizenships
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("citizenshipCodes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> CitizenshipCodes { get; set; }

        /// <summary>
        /// Land of birth - ISO 2 character code - RDM codebook CB_Country
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthCountryCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string BirthCountryCode { get; set; }

        /// <summary>
        /// Marital status code, RDM codebook CB_MaritalStatus
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maritalStatusCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength = 1)]
        public string MaritalStatusCode { get; set; }

        /// <summary>
        /// Place of birth. For example, information for Czech citizens is displayed in an ID card, i.e. Ostrava
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthPlace")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string BirthPlace { get; set; }

        /// <summary>
        /// Birth surname
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string BirthName { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identification document
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentificationDocument
    {
        /// <summary>
        /// Type of identification document. RDM codebook CB_IdentificationDocumentType
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("typeCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string TypeCode { get; set; }

        /// <summary>
        /// Official number of identification document.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("documentNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// Document issuing country - RDM codebook CB_Country
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuingCountryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string IssuingCountryCode { get; set; }

        /// <summary>
        /// Identification document issuing authority
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string IssuedBy { get; set; }

        /// <summary>
        /// When document was issued
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuedOn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? IssuedOn { get; set; }

        /// <summary>
        /// Document is valid until this date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? ValidTo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer's primary phone
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryPhone
    {
        /// <summary>
        /// Phone international destination code, i.e. +420, +1 etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneIDC")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(5, MinimumLength = 2)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[+]{1}[1-9]{1}[0-9]{0,3}$")]
        public string PhoneIDC { get; set; }

        /// <summary>
        /// Local part of phone number, including national destination code i.e. 777112233.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(13, MinimumLength = 1)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,13}$")]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Flag indicating that phone is confirmed by client
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]
        public bool Confirmed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer's primary email.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryEmail
    {
        /// <summary>
        /// Email address value
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailAddress")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Flag indicating that email is confirmed by client
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]
        public bool Confirmed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// For citizens of the Czech Republic, this is the address of permanent residence that appears on the ID card. For foreigners, it is an address of permanent residence abroad.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required]
        public Address Address { get; set; } = new Address();

        /// <summary>
        /// For natural person place of residence - date when customer starts live there
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("primaryAddressFrom")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? PrimaryAddressFrom { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contact address. Bank correspondence delivery address. If it is not filled out, correspondence is delivered to a permanent residence address. A contact address can also be entered as a P.O. BOX. You must fill in one of the address or postOfficeBox attributes on the object. If both attributes are filled in simultaneously, the operation returns an error.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Address Address { get; set; }

        /// <summary>
        /// Flag indicating that contact address is confirmed by client
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]
        public bool Confirmed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Temporary residence address. The address is obligatory for foreigners who do not have the Czech Republic filled in at their permanent address. Conversely, for subjects who have the Czech Republic completed in the State field for a permanent address, it is forbidden to fill in the address.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemporaryStayAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required]
        public Address Address { get; set; } = new Address();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Component address. For the Czech address, it is mandatory to fill in: &lt;ul&gt; &lt;li&gt; either the houseNumber or the evidenceNumber. &lt;li&gt; cityDistrict - must always be filled in. We will fill in even if cityDistrict matches the city. &lt;li&gt; pragueDistrict - if the city is Prague, it needs to be filled in as well &lt;li&gt; postcode - is mandatory to fill in at all times and must be in the form of a five-digit number between 10000 - 79999 &lt;/ul&gt; For foreign addresses, in addition to mandatory fields, it is mandatory to fill &lt;ul&gt; &lt;li&gt; houseNumber &lt;li&gt; street or cityDistrict &lt;/ul&gt; For foreign address, forbidden fields: &lt;ul&gt; &lt;li&gt; evidenceNumber &lt;li&gt; streetNumber &lt;li&gt; praqueDistrict &lt;/ul&gt; 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Address
    {
        /// <summary>
        /// Street name without a house number. The field is not mandatory for cities without an street network.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("street")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string Street { get; set; }

        /// <summary>
        /// The house number. Mandatory for all foreign addresses. For Czech addresses, either the houseNumber or the evidenceNumber must be filled in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("houseNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string HouseNumber { get; set; }

        /// <summary>
        /// Evidence number. Used only for Czech addresses. The evidence number has objects that are not assigned a house number. These are, for example, chalets. Filled for foreign addresses not desirable will be treated as an error.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("evidenceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string EvidenceNumber { get; set; }

        /// <summary>
        /// Used only for Czech addresses. A number that helps locate a house on a given street. Filled for foreign addresses not desirable will be treated as an error.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("streetNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// City district, compulsory for Czech addresses. It is not mandatory for foreign ones, but it is desirable to fill the field for large cities, which are divided into smaller administrative units.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cityDistrict")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string CityDistrict { get; set; }

        /// <summary>
        /// Territory of the city district in the capital Prague (Praha 1 - 10 not Praha 1 - 22). If countryCode is CZ and city is Praque, then it is compulsory to fill it in.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pragueDistrict")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(40, MinimumLength = 1)]
        public string PragueDistrict { get; set; }

        /// <summary>
        /// A note of delivery specifying to whom delivery is intended.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliveryDetails")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string DeliveryDetails { get; set; }

        /// <summary>
        /// P.O. Box number. For Czech addresses the value is validated to a number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postBox")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string PostBox { get; set; }

        /// <summary>
        /// The city name. Only the name of the city without its parts is given, i.e. for Prague we only mention Prague and not Prague 6 or Prague Dejvice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string City { get; set; }

        /// <summary>
        /// Post code, Postal code, ZIP code.  For czech address must be in the form of a five-digit number between 10000 - 79999
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postCode")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(16, MinimumLength = 1)]
        public string PostCode { get; set; }

        /// <summary>
        /// It is used only for foreign addresses and mainly for states which are divided into large self-governing entities. E.g. U.S., when we fill in a U.S. state like Texas, Florida. For a Czech address, filling in the field is considered an error.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countrySubdivision")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(35, MinimumLength = 1)]
        public string CountrySubdivision { get; set; }

        /// <summary>
        /// Country code - two characters ISO code - CB_Country
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Address point id. The field is completed for Czech and Slovak addresses. To obtain it, the address needs to be verified in the Register of Territorial Identification of Addresses and Properties in the Czech Republic or its equivalent in the Slovak Republic.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressPointId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string AddressPointId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The customer's identification entity. Entity contains method, identificaiton date and identifying company.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerIdentification
    {
        /// <summary>
        /// Code of the method of identifying the subject. Value is defined in the code list CB_IdentificationMethodType
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identificationMethodCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string IdentificationMethodCode { get; set; }

        /// <summary>
        /// The date and time the subject was first identified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identificationDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? IdentificationDate { get; set; }

        /// <summary>
        /// Czech identification number of the company that made the subject identification. Value is mandatory only for specific identification method codes. See CB_IdentificationMethodType.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("czechIdentificationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string CzechIdentificationNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// The responseCode determines whether the subject has been created, identified, not found in basic registry or basic registry is unavailbale.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreateIdentifiedSubjectResponse
    {
        /// <summary>
        /// Response code &lt;ul&gt; &lt;li&gt; CREATED  - New subject has been created &lt;li&gt; IDENTIFIED - Existing subject(s) has been identified &lt;li&gt; NOT_FOUND_IN_BR - Subject not found in basic registry. Can only be returned if parameter hardCreate is set to false. &lt;li&gt; UNAVAILABLE_BR - Basic registry is unavailable. Can only be returned if parameter hardCreate is set to false. &lt;/ul&gt;
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("responseCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public CreateIdentifiedSubjectResponseResponseCode? ResponseCode { get; set; }

        /// <summary>
        /// Filled only if responseCode is equal to CREATED. Contains customerId of the newly created subject and whether the subject has been verified in the basic registry.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("createdSubject")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CreatedSubject CreatedSubject { get; set; }

        /// <summary>
        /// Filled only if responseCode is equal to IDENTIFIED. Contains a list of customerId identified subjects.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identifiedSubjects")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<IdentifiedSubjects> IdentifiedSubjects { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// Http status code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("httpStatusCode")]
        public int HttpStatusCode { get; set; }

        /// <summary>
        /// Error category
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public int Category { get; set; }

        /// <summary>
        /// Error code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// Error message
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Error uuid
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uuid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uuid { get; set; }

        /// <summary>
        /// Error detail
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("detail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public object Detail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PartyLegalStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum NaturalPersonAttributesGenderCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"M")]
        M = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"F")]
        F = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum CreateIdentifiedSubjectResponseResponseCode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"CREATED")]
        CREATED = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"IDENTIFIED")]
        IDENTIFIED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NOT_FOUND_IN_BR")]
        NOT_FOUND_IN_BR = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"UNAVAILABLE_BR")]
        UNAVAILABLE_BR = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CreatedSubject
    {

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public long CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("verifiedInBr")]
        public bool VerifiedInBr { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentifiedSubjects
    {

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public long CustomerId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTime>
    {
        public override System.DateTime Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTime.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTime value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603