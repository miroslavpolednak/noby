//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace DomainServices.CustomerService.ExternalServices.CustomerManagement.V2.Contracts
{
    using System = global::System;

    

    /// <summary>
    /// Customer base information entity - contains party, primary address, contact address, primary phone and email, customer segments and economic classifications.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerInfo
    {
        /// <summary>
        /// Identifier of the customer
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("party")]
        [System.ComponentModel.DataAnnotations.Required]
        public Party Party { get; set; } = new Party();

        [System.Text.Json.Serialization.JsonPropertyName("primaryIdentificationDocument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public IdentificationDocument PrimaryIdentificationDocument { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerIdentification")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CustomerIdentification CustomerIdentification { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("primaryAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public PrimaryAddress PrimaryAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("contactAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ContactAddress ContactAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("temporaryStay")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public TemporaryStayAddress TemporaryStay { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("primaryEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public PrimaryEmail PrimaryEmail { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("primaryPhone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public PrimaryPhone PrimaryPhone { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerSegment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CustomerSegment CustomerSegment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fixedCustomerSegment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CustomerSegment FixedCustomerSegment { get; set; }

        /// <summary>
        /// Flag indicating whether subject is in KBI system
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isInKbi")]
        public bool IsInKbi { get; set; }

        /// <summary>
        /// Flag indicating that customer is politically exposed.
        /// <br/>If the value of the item is 'true', politicalExposition is also returned.
        /// <br/>If the value is not returned, the information about political exposition is not collected.
        /// <br/>
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isPoliticallyExposed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsPoliticallyExposed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("politicalExposition")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public PoliticalExposition PoliticalExposition { get; set; }

        /// <summary>
        /// Flag indicating that customer is legally incapable. Only for Natural Person. Mandatory for Natural Person.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isLegallyIncapable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsLegallyIncapable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lifecycleStatusCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public LifecycleStatusEnum LifecycleStatusCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fatca")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Fatca Fatca { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("kyc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Kyc Kyc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("brSubscription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public BRSubscription BrSubscription { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("taxResidence")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public TaxResidence TaxResidence { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("taxDomicile")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public TaxDomicile TaxDomicile { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("confirmedContactFlags")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ConfirmedContactFlags ConfirmedContactFlags { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Party entity. Only one of attributes naturalPersonAttributes, entrepreneurAttributes, legalPersonAttributes will be filled according to legalStatus.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Party
    {
        /// <summary>
        /// List of customer identifiers
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("customerIdentifiers")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerIdentifier> CustomerIdentifiers { get; set; } = new System.Collections.ObjectModel.Collection<CustomerIdentifier>();

        /// <summary>
        /// P - for Natural Person, E - for Entrepreneur, B - for Legal Person
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("legalStatus")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PartyLegalStatus LegalStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("naturalPersonAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public NaturalPersonAttributes NaturalPersonAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("entrepreneurAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public EntrepreneurAttributes EntrepreneurAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legalPersonAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public LegalPersonAttributes LegalPersonAttributes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Attributes for party of type Legal Person
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LegalPersonAttributes
    {
        /// <summary>
        /// Company name. Is filled with name from business register. When name from business register does not exists, KB custom search name is used instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Company name. Name from business register.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessRegisterName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string BusinessRegisterName { get; set; }

        /// <summary>
        /// Custom KB search name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nameKb")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string NameKb { get; set; }

        /// <summary>
        /// Company established date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("establishedOn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? EstablishedOn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legalForm")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public JuridicalPersonLegalForm LegalForm { get; set; }

        /// <summary>
        /// Czech identification number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("czechIdentificationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string CzechIdentificationNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Attributes for Party of type Entrepreneur
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntrepreneurAttributes
    {
        /// <summary>
        /// Entrepreneur name. Is filled with name from business register. When name from business register does not exists, KB custom search name is used instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Entrepreneur name. Name from business register.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessRegisterName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string BusinessRegisterName { get; set; }

        /// <summary>
        /// Custom KB search name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nameKb")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string NameKb { get; set; }

        /// <summary>
        /// Entrepreneur established date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("establishedOn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? EstablishedOn { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legalForm")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public JuridicalPersonLegalForm LegalForm { get; set; }

        /// <summary>
        /// Czech identification number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("czechIdentificationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string CzechIdentificationNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Attributes for party of type Natural Person
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NaturalPersonAttributes
    {
        /// <summary>
        /// Title before name, i.e. prof. Ing., gen. Ing.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(15, MinimumLength = 1)]
        public string Title { get; set; }

        /// <summary>
        /// First name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string FirstName { get; set; }

        /// <summary>
        /// Surname
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("surname")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Surname { get; set; }

        /// <summary>
        /// Subject initials from first name and surname
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("initials")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(10, MinimumLength = 1)]
        public string Initials { get; set; }

        /// <summary>
        /// Date of birth
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? BirthDate { get; set; }

        /// <summary>
        /// Birth surname
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string BirthName { get; set; }

        /// <summary>
        /// Place of birth, i.e. Praque
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthPlace")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 1)]
        public string BirthPlace { get; set; }

        /// <summary>
        /// Land of birth - ISO 2 character code - RDM codebook CB_Country
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthCountryCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string BirthCountryCode { get; set; }

        /// <summary>
        /// List of customer citizenships
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("citizenshipCodes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string> CitizenshipCodes { get; set; }

        /// <summary>
        /// Gender, RDM codebook CB_Gender
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("genderCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength = 1)]
        public string GenderCode { get; set; }

        /// <summary>
        /// Czech birth number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("czechBirthNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string CzechBirthNumber { get; set; }

        /// <summary>
        /// First name vocative
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("firstNameVocative")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string FirstNameVocative { get; set; }

        /// <summary>
        /// Surname vocative
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("surnameVocative")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string SurnameVocative { get; set; }

        /// <summary>
        /// Date of death
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deathDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? DeathDate { get; set; }

        /// <summary>
        /// Marital status code, RDM codebook CB_MaritalStatus
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("maritalStatusCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength = 1)]
        public string MaritalStatusCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Legal form
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JuridicalPersonLegalForm
    {
        /// <summary>
        /// Legal form code. CSC codebooks PRAV_FORM, PRAV_FORM2 (foreign legal forms)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(4, MinimumLength = 1)]
        public string Code { get; set; }

        /// <summary>
        /// Description of legal form in the case of unknown legal form
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("unstructured")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(256, MinimumLength = 1)]
        public string Unstructured { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customers identifiers
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerIdentifier
    {
        /// <summary>
        /// Identifier type code. RDM codebook CB_JuridicalPersonIdentificationType
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("typeCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TypeCode { get; set; }

        /// <summary>
        /// Value of identifier
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identifierValue")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string IdentifierValue { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Identification document
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentificationDocument
    {
        /// <summary>
        /// Type of identification document - RDM codebook CB_IdentificationDocumentType
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("typeCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string TypeCode { get; set; }

        /// <summary>
        /// Official number of identification document - CDM number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("documentNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(24)]
        public string DocumentNumber { get; set; }

        /// <summary>
        /// Document issuing country - RDM codebook CB_Country - CDM issuingCountry
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuingCountryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string IssuingCountryCode { get; set; }

        /// <summary>
        /// Identification document issuing authority
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuedBy")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(255)]
        public string IssuedBy { get; set; }

        /// <summary>
        /// When document was issued - CDM validFrom
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("issuedOn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? IssuedOn { get; set; }

        /// <summary>
        /// Document is valid until this date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? ValidTo { get; set; }

        /// <summary>
        /// Registration in OR or other register
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("registerPlace")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string RegisterPlace { get; set; }

        /// <summary>
        /// The document expiration flag
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("expired")]
        public bool Expired { get; set; }

        /// <summary>
        /// Losted document flag
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("lostDocument")]
        public bool LostDocument { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer primary phone.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryPhone
    {
        /// <summary>
        /// Local part of phone number, including national destination code i.e. +420 777112233.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(19)]
        public string PhoneNumber { get; set; }

        /// <summary>
        /// Flag whether it is a mobile phone. Flag is determined only for czech and slovak phone numbers.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isMobile")]
        public bool IsMobile { get; set; }

        /// <summary>
        /// Flag indicating that phone is confirmed by client
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]
        public bool Confirmed { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("componentPhone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ComponentPhone ComponentPhone { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Phone split to international destination code and national part of number
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentPhone
    {
        /// <summary>
        /// Phone international destination code, i.e. +420, +1 etc.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneIDC")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[+]{1}[1-9]{1}[0-9]{0,3}$")]
        public string PhoneIDC { get; set; }

        /// <summary>
        /// Local part of phone number, including national destination code i.e. 777112233.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("phoneNumber")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(13)]
        [System.ComponentModel.DataAnnotations.RegularExpression(@"^[0-9]{1,13}$")]
        public string PhoneNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer primary email.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryEmail
    {
        /// <summary>
        /// Email
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("emailAddress")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(254)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Flag indicating that email is confirmed by client
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]
        public bool Confirmed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Primary address. Address is returned according to input parameter requiredAddressFormats. LINE - addressLinePoint, COMPONENT - componentAddressPoint, SINGLE_LINE - singleLineAddressPoint.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("addressLinePoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressLinePoint AddressLinePoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("componentAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ComponentAddressPoint ComponentAddressPoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("singleLineAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SingleLineAddressPoint SingleLineAddressPoint { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Primary address for search. Address is returned only in LINE format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PrimaryAddressSearch
    {

        [System.Text.Json.Serialization.JsonPropertyName("addressLinePoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressLinePoint AddressLinePoint { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Contact address. Bank correspondence delivery address. If it is not filled out, correspondence is delivered to a permanent residence address. A contact address can also be entered as a P.O. BOX. Address is returned according to input parameter requiredAddressFormats. LINE - addressLinePoint, COMPONENT - componentAddressPoint, SINGLE_LINE - singleLineAddressPoint
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ContactAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("addressLinePoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressLinePoint AddressLinePoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("componentAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ComponentAddressPoint ComponentAddressPoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("singleLineAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SingleLineAddressPoint SingleLineAddressPoint { get; set; }

        /// <summary>
        /// Flag indicating that address is confirmed by client
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("confirmed")]
        public bool Confirmed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Temporary residence address. The address is obligatory for foreigners who do not have the Czech Republic filled in at their permanent address. Address is returned according to input parameter requiredAddressFormats. LINE - addressLinePoint, COMPONENT - componentAddressPoint, SINGLE_LINE - singleLineAddressPoint
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TemporaryStayAddress
    {

        [System.Text.Json.Serialization.JsonPropertyName("addressLinePoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public AddressLinePoint AddressLinePoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("componentAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ComponentAddressPoint ComponentAddressPoint { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("singleLineAddressPoint")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public SingleLineAddressPoint SingleLineAddressPoint { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Address in LINE format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressLinePoint
    {
        /// <summary>
        /// First line of address (street, street number etc.)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("street")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Street { get; set; }

        /// <summary>
        /// Address delivery details
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliveryDetails")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DeliveryDetails { get; set; }

        /// <summary>
        /// Third line of address (typically city)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string City { get; set; }

        /// <summary>
        /// Post code, Postal code, ZIP code. Is present for all countries, not only for czech!!
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(12)]
        public string PostCode { get; set; }

        /// <summary>
        /// Country code - two characters ISO code - RDM codebook CB_Country
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Identification of address point
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressPointId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AddressPointId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Address in COMPONENT format Examples: &lt;ul&gt; &lt;li&gt; Czech address with street, house number and street number: { "street": "Wilsonova", "houseNumber": "101", "streetNumber": "1", "cityDistrict": "Vinohrady", "pragueDistrict": "Praha 1", "deliveryDetails": "Marketing department", "city": "Praha", "postCode": "11000", "countryCode": "CZ", "addressPointId": "21727554" }
    /// <br/>&lt;li&gt; Czech address without street and with house number: { "houseNumber": "6", "cityDistrict": "Dehtáry", "city": "Jenštejn ", "postCode": "25091", "countryCode": "CZ", "addressPointId": "12644340" }
    /// <br/>&lt;li&gt; Foreign address with street, house number: { "street": "S Torrence Ave", "houseNumber": "12600", "deliveryDetails": "Marketing department", "city": "Chicago", "postCode": "60633", "countryCode": "US", "countrySubdivision": "IL" }
    /// <br/>&lt;li&gt; Foreign address without street, with house number: { "houseNumber": "16", "city": "Drzymałowice", "postCode": "59-407", "countryCode": "PL", }
    /// <br/>&lt;li&gt; Post box address: { "postBox": "1234 ", "city": "Jenštejn ", "postCode": "25091", "countryCode": "CZ", } &lt;/ul&gt; 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentAddressPoint
    {
        /// <summary>
        /// Street name without a house number. The field is not filled out for cities without an street network or for post box address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("street")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string Street { get; set; }

        /// <summary>
        /// The house number. It is not filled out for post box address. Foreign addresses should have it filled out. Czech addresses may have the building number in this attribute or the evidenceNumber.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("houseNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string HouseNumber { get; set; }

        /// <summary>
        /// Evidence number. It is not filled out for post box address. Used only for Czech addresses. The evidence number has objects that are not assigned a house number. These are, for example, chalets.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("evidenceNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string EvidenceNumber { get; set; }

        /// <summary>
        /// Street number. It is not filled out for post box address. Used only for Czech and Slovak addresses. A number that helps locate a house on a given street.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("streetNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(4)]
        public string StreetNumber { get; set; }

        /// <summary>
        /// City district. It is not filled out for post box address. Should be filled for all Czech addresses, at least for that with address point id.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("cityDistrict")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string CityDistrict { get; set; }

        /// <summary>
        /// Territory of the city district in the capital Prague (Praha 1 - 10 not Praha 1 - 22). It is not filled out for post box address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("pragueDistrict")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(40)]
        public string PragueDistrict { get; set; }

        /// <summary>
        /// A note of delivery specifying to whom delivery is intended.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("deliveryDetails")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string DeliveryDetails { get; set; }

        /// <summary>
        /// The city name. Only the name of the city without its parts is given, i.e. for Prague we only mention Prague and not Prague 6 or Prague Dejvice.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("city")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string City { get; set; }

        /// <summary>
        /// P.O. Box number. For Czech addresses the value is number. It is filled out for post box address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postBox")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string PostBox { get; set; }

        /// <summary>
        /// Post code, Postal code, ZIP code.  For czech address it should be five-digit number between 10000 - 79999
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("postCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(16)]
        public string PostCode { get; set; }

        /// <summary>
        /// It is used only for foreign addresses and mainly for states which are divided into large self-governing entities. E.g. USA, then state like Texas, Florida is filled out.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countrySubdivision")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(35)]
        public string CountrySubdivision { get; set; }

        /// <summary>
        /// Country code - two characters ISO code - RDM codebook CB_Country
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Address point id from Register of Territorial Identification of Addresses and Properties in the Czech Republic or its equivalent in the Slovak Republic.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("addressPointId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string AddressPointId { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Address in SINGLE_LINE format. Single line textual address representation. Whole address is one textual line.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SingleLineAddressPoint
    {
        /// <summary>
        /// Represents whole address.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(500)]
        public string Address { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Types of the address format.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressFormats : System.Collections.ObjectModel.Collection<AddressFormat>
    {

    }

    /// <summary>
    /// Type of the address format.
    /// <br/>* 'LINE'      - Address format in the form of address lines. An easy-to-read form for users. It is used, for example, for an address on a letter or a contractual document, or to display address to user in application. This notation returns in the Address schema definition
    /// <br/>* 'COMPONENT' - Address format in the form of address components. Harder for users to read form. Component writing is used primarily to enter an address or to exchange an address for machine processing. This notation returns in the ComponentAddress schema definition.
    /// <br/>* 'SINGLE_LINE' - Address format in single line. Mainly used for visual presentation of address.
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum AddressFormat
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LINE")]
        LINE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"COMPONENT")]
        COMPONENT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"SINGLE_LINE")]
        SINGLE_LINE = 2,

    }

    /// <summary>
    /// Customer segment and subsegment
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerSegment
    {
        /// <summary>
        /// Synthetic segment key code (connection of segmentCode + subsegmentCode) for referencing RDM codebook CB_CustomerSegment
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("segmentKeyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string SegmentKeyCode { get; set; }

        /// <summary>
        /// Customer segment
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("segmentCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SegmentCode { get; set; }

        /// <summary>
        /// Customer subsegment
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("subsegmentCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SubsegmentCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerSearchResult
    {
        /// <summary>
        /// Flag indicating whether search result can return more rows
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isThereMore")]
        public bool IsThereMore { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("resultRows")]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<CustomerSearchResultRow> ResultRows { get; set; } = new System.Collections.ObjectModel.Collection<CustomerSearchResultRow>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// search result
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerSearchResultRow
    {

        [System.Text.Json.Serialization.JsonPropertyName("customerId")]
        public long CustomerId { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("party")]
        [System.ComponentModel.DataAnnotations.Required]
        public PartySearchResult Party { get; set; } = new PartySearchResult();

        [System.Text.Json.Serialization.JsonPropertyName("primaryIdentificationDocument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public IdentificationDocument PrimaryIdentificationDocument { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("primaryAddress")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public PrimaryAddressSearch PrimaryAddress { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerSegment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CustomerSegment CustomerSegment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("fixedCustomerSegment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CustomerSegment FixedCustomerSegment { get; set; }

        /// <summary>
        /// Customer of bank to which access is restricted. For example, an employee is considered to be restricted.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("restrictedCustomer")]
        public bool RestrictedCustomer { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("lifecycleStatusCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public LifecycleStatusEnum LifecycleStatusCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Party search result. Only one of attributes naturalPersonAttributes, entrepreneurAttributes, legalPersonAttributes will be filled according to legalStatus.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PartySearchResult
    {
        /// <summary>
        /// P - for Natural Person, E - for Entrepreneur, B - for Legal Person
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("legalStatus")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PartySearchResultLegalStatus LegalStatus { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("naturalPersonAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public NaturalPersonAttributesSearch NaturalPersonAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("entrepreneurAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public EntrepreneurAttributesSearch EntrepreneurAttributes { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("legalPersonAttributes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public LegalPersonAttributesSearch LegalPersonAttributes { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Attributes for party of type Legal Person
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LegalPersonAttributesSearch
    {
        /// <summary>
        /// Company name. Is filled with name from business register. When name from business register does not exists, KB custom search name is used instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Company name. Name from business register.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessRegisterName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string BusinessRegisterName { get; set; }

        /// <summary>
        /// Custom KB search name. This field is used for searching.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nameKb")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string NameKb { get; set; }

        /// <summary>
        /// Company established date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("establishedOn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? EstablishedOn { get; set; }

        /// <summary>
        /// Czech identification number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("czechIdentificationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string CzechIdentificationNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Attributes for party type of Entrepreneur
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EntrepreneurAttributesSearch
    {
        /// <summary>
        /// Entrepreneur name. Is filled with name from business register. When name from business register does not exists, KB custom search name is used instead.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Name { get; set; }

        /// <summary>
        /// Entrepreneur name. Name from business register.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessRegisterName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string BusinessRegisterName { get; set; }

        /// <summary>
        /// Custom KB search name. This field is used for searching.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("nameKb")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string NameKb { get; set; }

        /// <summary>
        /// Company established date
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("establishedOn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? EstablishedOn { get; set; }

        /// <summary>
        /// Czech identification number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("czechIdentificationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string CzechIdentificationNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Attributes for party type of Natural Person
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NaturalPersonAttributesSearch
    {
        /// <summary>
        /// Title before name, i.e. prof. Ing., gen. Ing.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("title")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(15, MinimumLength = 1)]
        public string Title { get; set; }

        /// <summary>
        /// First name
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string FirstName { get; set; }

        /// <summary>
        /// Surname
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("surname")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string Surname { get; set; }

        /// <summary>
        /// Date of birth
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("birthDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? BirthDate { get; set; }

        /// <summary>
        /// Gender, RDM codebook CB_Gender
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("genderCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(1, MinimumLength = 1)]
        public string GenderCode { get; set; }

        /// <summary>
        /// Czech birth number
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("czechBirthNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string CzechBirthNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer lifecycle status. There are lifecycle statuses:
    /// <br/>* 'ACTIVE' - active subject (GDPR 10 status)
    /// <br/>* 'INACTIVE' - former subject (GDPR 20 status), has no products or services in bank
    /// <br/>* 'ARCHIVED' - archived subject (GDPR 30 status) - only dedicated consumers can access these subjects
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum LifecycleStatusEnum
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ACTIVE")]
        ACTIVE = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"INACTIVE")]
        INACTIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ARCHIVED")]
        ARCHIVED = 2,

    }

    /// <summary>
    /// The customer's identification entity. Entity contains method, identificaiton date and identifying company.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerIdentification
    {
        /// <summary>
        /// Code of the method of identifying the subject. Value is defined in the code list CB_IdentificationMethodType
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identificationMethodCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string IdentificationMethodCode { get; set; }

        /// <summary>
        /// The date and time the subject was first identified.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("identificationDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? IdentificationDate { get; set; }

        /// <summary>
        /// Czech identification number of the company that made the subject identification. Value is mandatory only for specific identification method codes. See CB_IdentificationMethodType.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("czechIdentificationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(30, MinimumLength = 1)]
        public string CzechIdentificationNumber { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// FATCA (Foreign Account Tax Compliance Act)
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Fatca
    {
        /// <summary>
        /// FATCA status code - RDM codebook CB_FATCAStatus
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusCode")]
        public int StatusCode { get; set; }

        /// <summary>
        /// Date of FATCA status determination
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? StatusDate { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer turnover in one year
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerTurnover
    {
        /// <summary>
        /// Year of turnover
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("year")]
        public int Year { get; set; }

        /// <summary>
        /// Customer turnover per year
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("turnover")]
        public long Turnover { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer financial profile
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FinancialProfile
    {

        [System.Text.Json.Serialization.JsonPropertyName("mainSourceOfEarnings")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public MainSourceOfEarnings MainSourceOfEarnings { get; set; }

        /// <summary>
        /// Net monthly earning
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("netMonthEarning")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? NetMonthEarning { get; set; }

        /// <summary>
        /// Code of interval net monthly earning - CM Codebook of net month earnings - EP_C_NET_MONTH_EARNING
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("netMonthEarningCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string NetMonthEarningCode { get; set; }

        /// <summary>
        /// Saving investment potencial
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("savingInvestmentPotencial")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? SavingInvestmentPotencial { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer employment profession and category
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Employment
    {
        /// <summary>
        /// Profession category code - codebook CSC PROF_CAT1, RDM CB_Prof_Cat1
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("categoryCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? CategoryCode { get; set; }

        /// <summary>
        /// Profession code - codebook CSC PROF_CAT2
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("professionCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? ProfessionCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Main source of earnings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MainSourceOfEarnings
    {
        /// <summary>
        /// Code of the source of earnings - CSC codebook ZDROJ_PRIJ
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        public int Code { get; set; }

        /// <summary>
        /// Description of the source of earnings- only for code 6 / 'other source'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer turnover in one year
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Housing
    {
        /// <summary>
        /// Code of housing - codebook CB_Housing_Type
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// Description of housing - only for code 'OT' / 'other'
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string Description { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer KYC data
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Kyc
    {
        /// <summary>
        /// Economic sector code according to ESA2010 as amended by the CNB - RDM codebook CB_ESAInstitutionalSectorCNB
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("esaCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string EsaCode { get; set; }

        /// <summary>
        /// Flag indicating that customer is insurable
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isInsurable")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsInsurable { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("naturalPersonKyc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public NaturalPersonKyc NaturalPersonKyc { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("juridicalPersonKyc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public JuridicalPersonKyc JuridicalPersonKyc { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Natural person KYC data. Object is only present when customer is type of NaturalPerson.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class NaturalPersonKyc
    {
        /// <summary>
        /// Code of education - codebook CB_EducationDegree
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("educationCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string EducationCode { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("financialProfile")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public FinancialProfile FinancialProfile { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("housing")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Housing Housing { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("employment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public Employment Employment { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerKbRelationship")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public CustomerKbRelationship CustomerKbRelationship { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Juridical person KYC data. Object is only present when customer is type of JuridicalPerson.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class JuridicalPersonKyc
    {
        /// <summary>
        /// Number of employees
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("numberOfEmployees")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? NumberOfEmployees { get; set; }

        /// <summary>
        /// Code of economic activity according to the new classification of economic activities Only for Juridical Person - RDM codebook CB_NACECode
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("naceCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string NaceCode { get; set; }

        /// <summary>
        /// Text description of business area
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("businessArea")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string BusinessArea { get; set; }

        [System.Text.Json.Serialization.JsonPropertyName("customerTurnovers")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<CustomerTurnover> CustomerTurnovers { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about political exposure
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PoliticalExposition
    {
        /// <summary>
        /// Code of political office. Value must match CB_PoliticallyExposedPersonFunction code list
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("functionCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string FunctionCode { get; set; }

        /// <summary>
        /// Text description of the function. Description is mandatory when the function code is set to a value that has the mandatory_note flag set to true in the CB_PoliticallyExposedPersonFunction code list.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("functionDescription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(100)]
        public string FunctionDescription { get; set; }

        /// <summary>
        /// Risk level of a politically exposed person. Value from code list CB_PoliticallyExposedPersonLevel
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("levelCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string LevelCode { get; set; }

        /// <summary>
        /// Status of politically exposed person. The value should match the code list CB_PoliticallyExposedPersonStatus. Two values are defined ACTIVE - if in office and PASSIVE - should be set three years after the end of public office.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("statusCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string StatusCode { get; set; }

        /// <summary>
        /// Country of political office, two-letter ISO code, defined in RDM codebook CB_Country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(50)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Date of termination of public office, may even be foreseen for the future. When the date expires, the status should be set to passive.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("endDateOfPoliticalActivity")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? EndDateOfPoliticalActivity { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about subscription for update from the Basic registry
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BRSubscription
    {
        /// <summary>
        /// Information if customer subscribed for update from the Basic registry
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isSubscribed")]
        public bool IsSubscribed { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Customer's relationship with KB
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CustomerKbRelationship
    {
        /// <summary>
        /// Code of the type of customer's relationship with KB - CSC codebook CLI_KB_REL
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(1)]
        public string Code { get; set; }

        /// <summary>
        /// Financial group company code - only for code 'A' - RDM codebook CB_KBGroupCompany
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("companyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(5)]
        public string CompanyCode { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tax residence
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxResidence
    {
        /// <summary>
        /// Date of beginning of tax residence
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime ValidFrom { get; set; }

        /// <summary>
        /// Type of legal entity - Values are defined in CSC codebook PRAVT_CRS
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("legalEntityTypeCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? LegalEntityTypeCode { get; set; }

        /// <summary>
        /// Passive NFE flag
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("isPassiveNfe")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsPassiveNfe { get; set; }

        /// <summary>
        /// List of Countries with TIN, where customer is tax resident
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("residenceCountries")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.MinLength(1)]
        public System.Collections.Generic.ICollection<TaxResidenceCountry> ResidenceCountries { get; set; } = new System.Collections.ObjectModel.Collection<TaxResidenceCountry>();

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxResidenceCountry
    {
        /// <summary>
        /// Country code of tax residence - two characters ISO code - CB_Country.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required]
        [System.ComponentModel.DataAnnotations.StringLength(2, MinimumLength = 2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Tax identification number.
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(50, MinimumLength = 1)]
        public string Tin { get; set; }

        /// <summary>
        /// Reason why TIN was not filled out
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("tinMissingReasonDescription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.ComponentModel.DataAnnotations.StringLength(200, MinimumLength = 1)]
        public string TinMissingReasonDescription { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Tax domicile
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class TaxDomicile
    {
        /// <summary>
        /// Country code of tax domicile - two characters ISO code - RDM codebook CB_Country
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("countryCode")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [System.ComponentModel.DataAnnotations.StringLength(2)]
        public string CountryCode { get; set; }

        /// <summary>
        /// Date of end of tax domicile
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        [System.Text.Json.Serialization.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTime? ValidTo { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    /// <summary>
    /// Information about confirmed contacts
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfirmedContactFlags
    {
        /// <summary>
        /// Information if all customer contacts are confirmed
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("allContactsConfirmed")]
        public bool AllContactsConfirmed { get; set; }

        /// <summary>
        /// Information if at least one confirmed contact is confirmed(phone or email)
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("atLeastOneConfirmedContact")]
        public bool AtLeastOneConfirmedContact { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DataEntities : System.Collections.ObjectModel.Collection<DataEntity>
    {

    }

    /// <summary>
    /// Data entity to be returned.
    /// <br/>* 'ADDRESS_PRIMARY' - primary address
    /// <br/>* 'ADDRESS_CONTACT' - contact address
    /// <br/>* 'ADDRESS_TEMPORARY_STAY' - temporary stay address
    /// <br/>* 'ID_DOC_PRIMARY' - primary identification document
    /// <br/>* 'CUSTOMER_IDENTIFICATION' - customer identification
    /// <br/>* 'PHONE_PRIMARY' - primary phone
    /// <br/>* 'EMAIL_PRIMARY' - primary email
    /// <br/>* 'SEGMENT' - segment
    /// <br/>* 'POLITICAL_EXPOSITION' - political exposition
    /// <br/>* 'ESA' - ESA classification
    /// <br/>* 'NACE' - NACE classification
    /// <br/>* 'INSURABILITY' - insurability
    /// <br/>* 'FIRST_NAME_VOCATIVE' - firstname vocative
    /// <br/>* 'SURNAME_VOCATIVE' - surname vocative
    /// <br/>* 'FATCA' - FATCA
    /// <br/>* 'FINANCIAL_PROFILE' - financial profile like main source of earnings, net month earning etc.
    /// <br/>* 'HOUSING' - housing
    /// <br/>* 'EDUCATION' - education
    /// <br/>* 'EMPLOYMENT' - employment
    /// <br/>* 'TURNOVERS' - turnovers
    /// <br/>* 'EMPLOYEES_NUMBER' - number of employees
    /// <br/>* 'BUSINESS_AREA' - business area
    /// <br/>* 'BR_SUBSCRIPTION' - basic registry information
    /// <br/>* 'TAX_RESIDENCE' - tax residence
    /// <br/>* 'TAX_DOMICILE' - tax domicile
    /// <br/>* 'KB_RELATIONSHIP' - type of relationship with KB
    /// <br/>* 'CONFIRMED_CONTACT_FLAGS' - information about confirmed contacts
    /// <br/>
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum DataEntity
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ADDRESS_PRIMARY")]
        ADDRESS_PRIMARY = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"ADDRESS_CONTACT")]
        ADDRESS_CONTACT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ADDRESS_TEMPORARY_STAY")]
        ADDRESS_TEMPORARY_STAY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ID_DOC_PRIMARY")]
        ID_DOC_PRIMARY = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"CUSTOMER_IDENTIFICATION")]
        CUSTOMER_IDENTIFICATION = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"PHONE_PRIMARY")]
        PHONE_PRIMARY = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"EMAIL_PRIMARY")]
        EMAIL_PRIMARY = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"SEGMENT")]
        SEGMENT = 7,

        [System.Runtime.Serialization.EnumMember(Value = @"POLITICAL_EXPOSITION")]
        POLITICAL_EXPOSITION = 8,

        [System.Runtime.Serialization.EnumMember(Value = @"ESA")]
        ESA = 9,

        [System.Runtime.Serialization.EnumMember(Value = @"NACE")]
        NACE = 10,

        [System.Runtime.Serialization.EnumMember(Value = @"INSURABILITY")]
        INSURABILITY = 11,

        [System.Runtime.Serialization.EnumMember(Value = @"FIRST_NAME_VOCATIVE")]
        FIRST_NAME_VOCATIVE = 12,

        [System.Runtime.Serialization.EnumMember(Value = @"SURNAME_VOCATIVE")]
        SURNAME_VOCATIVE = 13,

        [System.Runtime.Serialization.EnumMember(Value = @"FATCA")]
        FATCA = 14,

        [System.Runtime.Serialization.EnumMember(Value = @"FINANCIAL_PROFILE")]
        FINANCIAL_PROFILE = 15,

        [System.Runtime.Serialization.EnumMember(Value = @"HOUSING")]
        HOUSING = 16,

        [System.Runtime.Serialization.EnumMember(Value = @"EDUCATION")]
        EDUCATION = 17,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYMENT")]
        EMPLOYMENT = 18,

        [System.Runtime.Serialization.EnumMember(Value = @"TURNOVERS")]
        TURNOVERS = 19,

        [System.Runtime.Serialization.EnumMember(Value = @"EMPLOYEES_NUMBER")]
        EMPLOYEES_NUMBER = 20,

        [System.Runtime.Serialization.EnumMember(Value = @"BUSINESS_AREA")]
        BUSINESS_AREA = 21,

        [System.Runtime.Serialization.EnumMember(Value = @"BR_SUBSCRIPTION")]
        BR_SUBSCRIPTION = 22,

        [System.Runtime.Serialization.EnumMember(Value = @"TAX_RESIDENCE")]
        TAX_RESIDENCE = 23,

        [System.Runtime.Serialization.EnumMember(Value = @"TAX_DOMICILE")]
        TAX_DOMICILE = 24,

        [System.Runtime.Serialization.EnumMember(Value = @"KB_RELATIONSHIP")]
        KB_RELATIONSHIP = 25,

        [System.Runtime.Serialization.EnumMember(Value = @"CONFIRMED_CONTACT_FLAGS")]
        CONFIRMED_CONTACT_FLAGS = 26,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Error
    {
        /// <summary>
        /// Http status code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("httpStatusCode")]
        public int HttpStatusCode { get; set; }

        /// <summary>
        /// Error category
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public int Category { get; set; }

        /// <summary>
        /// Error code
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("code")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }

        /// <summary>
        /// Error message
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("message")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Message { get; set; }

        /// <summary>
        /// Error uuid
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("uuid")]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Uuid { get; set; }

        /// <summary>
        /// Error detail
        /// </summary>

        [System.Text.Json.Serialization.JsonPropertyName("detail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public object Detail { get; set; }

        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum Anonymous
    {

        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PartyLegalStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public enum PartySearchResultLegalStatus
    {

        [System.Runtime.Serialization.EnumMember(Value = @"P")]
        P = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"E")]
        E = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"B")]
        B = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    internal class DateFormatConverter : System.Text.Json.Serialization.JsonConverter<System.DateTime>
    {
        public override System.DateTime Read(ref System.Text.Json.Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options)
        {
            var dateTime = reader.GetString();
            if (dateTime == null)
            {
                throw new System.Text.Json.JsonException("Unexpected JsonTokenType.Null");
            }

            return System.DateTime.Parse(dateTime);
        }

        public override void Write(System.Text.Json.Utf8JsonWriter writer, System.DateTime value, System.Text.Json.JsonSerializerOptions options)
        {
            writer.WriteStringValue(value.ToString("yyyy-MM-dd"));
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603