//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

using System.Text.Json.Serialization;

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace DomainServices.RealEstateValuationService.ExternalServices.PreorderService.V1.Contracts
{
    using System = global::System;

    

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AttachmentDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fileName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FileName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("extension")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Extension { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DocumentName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentStore")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DocumentStore { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentPath")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DocumentPath { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentCategory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DocumentCategory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("categoryText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CategoryText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validityDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime ValidityDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdById")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long CreatedById { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdByName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CreatedByName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdWhen")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime CreatedWhen { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("size")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Size { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentIdCez")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DocumentIdCez { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("visibleLevel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int VisibleLevel { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AvailableValuationTypesRequestDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("realEstateType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RealEstateType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalArea")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? TotalArea { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isLeased")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsLeased { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isCellarFlat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsCellarFlat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isNonApartmentBuildingFlat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsNonApartmentBuildingFlat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isNotUsableTechnicalState")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsNotUsableTechnicalState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hasOwnershipLimitations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? HasOwnershipLimitations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purposesLoan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string>? PurposesLoan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstateIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<long>? RealEstateIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dealType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DealType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("loanAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public decimal? LoanAmount { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class BuildingSpecificationDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? FlatNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flatType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FlatType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flatFloorArea")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? FlatFloorArea { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maisonnette")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Maisonnette { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("garret")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Garret { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flatOccupied")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? FlatOccupied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leaseType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LeaseType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("termOfLease")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TermOfLease { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConsultancyRequestDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("previuosValuationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PreviuosValuationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requestText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RequestText { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DtsFlatRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("companyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CompanyCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProductCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("eFormId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long EFormId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dealNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DealNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonTel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonTel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cpm")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Cpm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("icp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Icp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyPerson")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyPerson { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyPhone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyPhone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyFunction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyFunction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bagmanRealEstateTypeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BagmanRealEstateTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstateTypeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RealEstateTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationStreet")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ValuationStreet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("additionalInfo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AdditionalInfo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualPurchasePrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ActualPurchasePrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leased")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Leased { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownershipLimitations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? OwnershipLimitations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budget")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Budget { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? ClientID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientPassId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientPassId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dealType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DealType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productOwner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProductOwner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maturityLoan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? MaturityLoan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purposeLoan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PurposeLoan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("loanAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? LoanAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("specialRequest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SpecialRequest { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insuranceRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? InsuranceRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ValuationFee { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonValuationFeeReason")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonValuationFeeReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ClientPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noteMPSS")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NoteMPSS { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Dts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonDtsArgumentCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonDtsArgumentCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonDtsArgument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonDtsArgument { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completenessDocuments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CompletenessDocuments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isCellarFlat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsCellarFlat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isNonApartmentBuildingFlat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsNonApartmentBuildingFlat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isNotUsableTechnicalState")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsNotUsableTechnicalState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cremRealEstateIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<long>? CremRealEstateIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyAttachments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public LocalSurveyAttachmentsDTO LocalSurveyAttachments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attachmentIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<long>? AttachmentIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public FlatValuationDTO Valuation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class DtsHouseRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("companyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CompanyCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProductCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("eFormId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long EFormId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dealNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DealNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonTel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonTel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cpm")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Cpm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("icp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Icp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyPerson")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyPerson { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyPhone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyPhone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyFunction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyFunction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bagmanRealEstateTypeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BagmanRealEstateTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstateTypeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RealEstateTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationStreet")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ValuationStreet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("additionalInfo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AdditionalInfo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualPurchasePrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ActualPurchasePrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leased")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Leased { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownershipLimitations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? OwnershipLimitations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budget")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Budget { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? ClientID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientPassId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientPassId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dealType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DealType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productOwner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProductOwner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maturityLoan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? MaturityLoan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purposeLoan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PurposeLoan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("loanAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? LoanAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("specialRequest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SpecialRequest { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insuranceRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? InsuranceRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ValuationFee { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonValuationFeeReason")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonValuationFeeReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ClientPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noteMPSS")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NoteMPSS { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Dts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonDtsArgumentCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonDtsArgumentCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonDtsArgument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonDtsArgument { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completenessDocuments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CompletenessDocuments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isCellarFlat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsCellarFlat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isNonApartmentBuildingFlat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsNonApartmentBuildingFlat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isNotUsableTechnicalState")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsNotUsableTechnicalState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cremRealEstateIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<long>? CremRealEstateIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyAttachments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public LocalSurveyAttachmentsDTO LocalSurveyAttachments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attachmentIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<long>? AttachmentIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public HouseValuationDTO Valuation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlatLandItemDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("relationToLand")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RelationToLand { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("electricalConnection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ElectricalConnection { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("telephoneConnection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? TelephoneConnection { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sewerConnection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SewerConnection { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("drassTray")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? DrassTray { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("seweragePlant")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SeweragePlant { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("waterConnection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? WaterConnection { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("waterWell")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? WaterWell { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gasConncetion")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? GasConncetion { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accessPathType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AccessPathType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accessPathOther")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AccessPathOther { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accessPathDescription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AccessPathDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ecologicalLoad")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? EcologicalLoad { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ecologicalLoadDescription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? EcologicalLoadDescription { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlatMainBuildingDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingSituation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BuildingSituation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lift")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Lift { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("permanentUse")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? PermanentUse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("basementNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? BasementNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("upstairsNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? UpstairsNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flatCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? FlatCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("centralHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CentralHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("levelHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? LevelHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? LocalHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("districtHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? DistrictHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otherHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OtherHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gasHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? GasHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("electricHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ElectricHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("solidFuelHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SolidFuelHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("thermodynamicHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ThermodynamicHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("masonryStructure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? MasonryStructure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("panelStructure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? PanelStructure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("woodStructure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? WoodStructure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stoneStructure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? StoneStructure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("steelStructure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SteelStructure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("armouredStructure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ArmouredStructure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otherStructure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OtherStructure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ageOfBuilding")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? AgeOfBuilding { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reconstruction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Reconstruction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reconstructionYear")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? ReconstructionYear { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reconstructionSubject")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReconstructionSubject { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("technicalState")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TechnicalState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingPartSite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? BuildingPartSite { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pledgeBuildingRight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? PledgeBuildingRight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingRightDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? BuildingRightDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingRightCompensation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? BuildingRightCompensation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingDuration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BuildingDuration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("durationEndYear")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DurationEndYear { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flatSpecification")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public FlatSpecificationDTO FlatSpecification { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlatSpecificationDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("netFloorArea")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? NetFloorArea { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flatSchema")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FlatSchema { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maisonnette")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Maisonnette { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("garret")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Garret { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flatOccupied")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? FlatOccupied { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leaseType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LeaseType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("termOfLease")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TermOfLease { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("floorNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? FloorNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cellarBox")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CellarBox { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cellarBoxArea")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? CellarBoxArea { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roomsOrientation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RoomsOrientation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roomsCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? RoomsCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("kitchensCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? KitchensCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bathroomsCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? BathroomsCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("toiletsCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? ToiletsCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("centralHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CentralHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("levelHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? LevelHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? LocalHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("districtHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? DistrictHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otherHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? OtherHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gasHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? GasHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("electricHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ElectricHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("solidFuelHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SolidFuelHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("thermodynamicHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ThermodynamicHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maintenance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Maintenance { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reconstruction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Reconstruction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reconstructionScale")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReconstructionScale { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reconstructionYear")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? ReconstructionYear { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dominantFloor")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DominantFloor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("floorOther")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FloorOther { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("garageCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? GarageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("garageBoxCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? GarageBoxCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("standaloneGarageUnitNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? StandaloneGarageUnitNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("garageBoxNoResidentialFlat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? GarageBoxNoResidentialFlat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("garageBoxOwnerRelShipRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? GarageBoxOwnerRelShipRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("garageBoxNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? GarageBoxNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("outdoorStandingSiteNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OutdoorStandingSiteNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("outdoorStandingRate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OutdoorStandingRate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("balcony")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Balcony { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("terrace")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Terrace { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("loggia")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Loggia { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("frontGargen")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? FrontGargen { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FlatValuationDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("buildingStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BuildingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("populationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? PopulationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("civicAmenties")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CivicAmenties { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("distanceAdminCenter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DistanceAdminCenter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateHouse")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateHouse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateDwellingHouse")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateDwellingHouse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateMixed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateMixed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateRecreation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateRecreation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateSpa")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateSpa { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateAdmin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateAdmin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateTrading")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateTrading { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateIndustrial")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateIndustrial { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateStore")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateStore { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("massTransport")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? MassTransport { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metro")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Metro { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("distanceStation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DistanceStation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonNegativeImpact")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? NonNegativeImpact { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("negativeImpactNoise")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? NegativeImpactNoise { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("negativeImpactDust")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? NegativeImpactDust { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("negativeImpactExhalation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? NegativeImpactExhalation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("negativeImpactFloads")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? NegativeImpactFloads { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("negativeImpactOther")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NegativeImpactOther { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otherBuilding")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public OtherBuildingDTO OtherBuilding { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("landItems")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<FlatLandItemDTO>? LandItems { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mainBuildings")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<FlatMainBuildingDTO>? MainBuildings { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HouseLandItemDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("relationToLand")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RelationToLand { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("electricalConnection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ElectricalConnection { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("telephoneConnection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? TelephoneConnection { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sewerConnection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SewerConnection { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("drassTray")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? DrassTray { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("seweragePlant")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SeweragePlant { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("waterConnection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? WaterConnection { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("waterWell")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? WaterWell { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gasConncetion")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? GasConncetion { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accessPathType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AccessPathType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accessPathOther")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AccessPathOther { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accessPathDescription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AccessPathDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ecologicalLoad")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? EcologicalLoad { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ecologicalLoadDescription")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? EcologicalLoadDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("area")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Area { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("steepland")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Steepland { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orientation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Orientation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HouseMainBuildingDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("note")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Note { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingSituation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BuildingSituation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lift")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Lift { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("permanentUse")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? PermanentUse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("basementNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? BasementNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("upstairsNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? UpstairsNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flatCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? FlatCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("centralHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CentralHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("levelHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? LevelHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? LocalHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("districtHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? DistrictHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otherHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OtherHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gasHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? GasHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("electricHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ElectricHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("solidFuelHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SolidFuelHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("thermodynamicHeating")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ThermodynamicHeating { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("masonryStructure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? MasonryStructure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("panelStructure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? PanelStructure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("woodStructure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? WoodStructure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("stoneStructure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? StoneStructure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("steelStructure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SteelStructure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("armouredStructure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ArmouredStructure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otherStructure")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OtherStructure { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ageOfBuilding")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? AgeOfBuilding { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reconstruction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Reconstruction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reconstructionYear")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? ReconstructionYear { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("reconstructionSubject")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ReconstructionSubject { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("technicalState")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TechnicalState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingPartSite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? BuildingPartSite { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pledgeBuildingRight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? PledgeBuildingRight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingRightDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? BuildingRightDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingRightCompensation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? BuildingRightCompensation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingDuration")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BuildingDuration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("durationEndYear")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DurationEndYear { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingVolume")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? BuildingVolume { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("floorArea")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? FloorArea { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildUpArea")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? BuildUpArea { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("garageCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? GarageCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("garageBoxCount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? GarageBoxCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("garageLocSelfStand")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? GarageLocSelfStand { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("garageLocAddBuild")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? GarageLocAddBuild { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("garageLocBasement")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? GarageLocBasement { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("garageLoc1Upstairs")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? GarageLoc1Upstairs { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingItems")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<BuildingSpecificationDTO>? BuildingItems { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class HouseValuationDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("buildingStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BuildingStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("populationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? PopulationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("location")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Location { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("civicAmenties")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CivicAmenties { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("distanceAdminCenter")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DistanceAdminCenter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateHouse")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateHouse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateDwellingHouse")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateDwellingHouse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateMixed")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateMixed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateRecreation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateRecreation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateSpa")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateSpa { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateAdmin")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateAdmin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateTrading")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateTrading { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateIndustrial")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateIndustrial { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("estateStore")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? EstateStore { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("massTransport")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? MassTransport { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metro")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Metro { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("distanceStation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DistanceStation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonNegativeImpact")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? NonNegativeImpact { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("negativeImpactNoise")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? NegativeImpactNoise { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("negativeImpactDust")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? NegativeImpactDust { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("negativeImpactExhalation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? NegativeImpactExhalation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("negativeImpactFloads")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? NegativeImpactFloads { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("negativeImpactOther")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NegativeImpactOther { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otherBuilding")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public OtherBuildingDTO OtherBuilding { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("landItems")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<HouseLandItemDTO>? LandItems { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mainBuildings")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<HouseMainBuildingDTO>? MainBuildings { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LinkedResource
    {

        [System.Text.Json.Serialization.JsonPropertyName("href")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Href { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocalSurveyAttachmentsDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("proofOfPayment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ProofOfPayment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fotoDocumentation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool FotoDocumentation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leaseContract")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool LeaseContract { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("easmentContract")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool EasmentContract { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownReasons")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool OwnReasons { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previousAppraisement")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PreviousAppraisement { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingPermit")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool BuildingPermit { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("projectDocumentation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ProjectDocumentation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contractForWork")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool ContractForWork { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budgeting")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Budgeting { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("geometricPlan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool GeometricPlan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completionCertificate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool CompletionCertificate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statementByOwner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool StatementByOwner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pledgeBuildingRightContract")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool PledgeBuildingRightContract { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("others")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool Others { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class LocalSurveyInfoDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyPerson")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyPerson { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyPhone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyPhone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyFunction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyFunction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyEmail { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OnlineMPRequestDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("companyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CompanyCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProductCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationRequestId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long ValuationRequestId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dealNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DealNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? ClientID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientPassId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientPassId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cremRealEstateIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<long>? CremRealEstateIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attachmentIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<long>? AttachmentIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("eFormId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long EFormId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonTel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonTel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyPerson")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyPerson { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyPhone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyPhone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyFunction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyFunction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cpm")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Cpm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("icp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Icp { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OnlineRevaluationCheckRequestDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("valuationType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ValuationType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leasibilityRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? LeasibilityRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstateType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RealEstateType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalArea")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double TotalArea { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leased")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Leased { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstateIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<long>? RealEstateIds { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderAdditionalInfoDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyPerson")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyPerson { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyPhone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyPhone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyFunction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyFunction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("additionalInfo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AdditionalInfo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualPurchasePrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ActualPurchasePrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leased")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Leased { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownershipLimitations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? OwnershipLimitations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budget")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Budget { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maturityLoan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? MaturityLoan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("loanType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LoanType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("loanAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? LoanAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dealType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DealType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("newDevelopment")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? NewDevelopment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completnessDocument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CompletnessDocument { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purposeLoan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PurposeLoan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("specialRequest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SpecialRequest { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insuranceRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? InsuranceRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ValuationFee { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonValuationFeeReason")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonValuationFeeReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ClientPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noteMPSS")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NoteMPSS { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Dts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonDtsArgumentCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonDtsArgumentCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonDtsArgument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonDtsArgument { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completenessDocuments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CompletenessDocuments { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderBasicInfoDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("eFormId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long EFormId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dealNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DealNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonTel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonTel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cpm")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Cpm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("icp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Icp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OrderType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ValuationType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previousValuationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PreviousValuationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previousValuationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? PreviousValuationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstateCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RealEstateCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstateType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RealEstateType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? ClientID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientPassId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientPassId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dealType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DealType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("companyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CompanyCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productOwner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProductOwner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mainRealEstateId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? MainRealEstateId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addressText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AddressText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstates")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<RealEstateCompactDTO>? RealEstates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attachments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<AttachmentDTO>? Attachments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("basicInfo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public OrderBasicInfoDTO BasicInfo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("additionalInfo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public OrderAdditionalInfoDTO AdditionalInfo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statusDetails")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public OrderInfoDTO StatusDetails { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deeplinkUrl")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DeeplinkUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isCheckRevaluation")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsCheckRevaluation { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderInfoDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long OrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long ValuationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ValuationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? OrderDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("approvalDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? ApprovalDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationTypeCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ValuationTypeCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationStatusCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ValuationStatusCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationTypeText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ValuationTypeText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationStatusText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ValuationStatusText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isFinished")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool IsFinished { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastTaskId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? LastTaskId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastTaskCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LastTaskCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastTaskText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LastTaskText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deeplinkUrl")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DeeplinkUrl { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderInfoDTOPagedResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("pageSize")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int PageSize { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("currentPage")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int CurrentPage { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalItems")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int TotalItems { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totalPages")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int TotalPages { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("items")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<OrderInfoDTO>? Items { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("links")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.IDictionary<string, LinkedResource>? Links { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrderResultDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("orderId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long OrderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long ValuationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OrderNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ValuationNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dealNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DealNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("statusCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? StatusCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ValuationType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstateType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RealEstateType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstateCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RealEstateCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resultPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public ResultPriceDTO ResultPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resultPrices")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<ResultPriceDTO>? ResultPrices { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("orderNote")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OrderNote { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdOn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? CreatedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("finishedOn")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? FinishedOn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attachments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<AttachmentDTO>? Attachments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("risks")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<RiskInfoDTO>? Risks { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resultComments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ResultComments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("address")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Address { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("constructionStatus")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ConstructionStatus { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentTypes")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<string>? DocumentTypes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deeplinkUrl")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DeeplinkUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("appraiserType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AppraiserType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OtherBuildingDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("description")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("landArea")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double LandArea { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("additionalInfo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AdditionalInfo { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProblemDetails
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("title")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Title { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public int? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("detail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Detail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("instance")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Instance { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RealEstateCompactDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("realEstateId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long RealEstateId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long DocumentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ddocumentName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DdocumentName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validityDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ValidityDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("territoryNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long TerritoryNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("territoryName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TerritoryName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("districtCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DistrictCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("districtName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DistrictName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("townCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TownCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("townName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TownName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deedOfOwnership")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DeedOfOwnership { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addressText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AddressText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("compactedId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CompactedId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("htmlText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? HtmlText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("plainText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PlainText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isknId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long IsknId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstates")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<RealEstateDTO>? RealEstates { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RealEstateDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("realEstateId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long RealEstateId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("territoryNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? TerritoryNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deedOfOwnership")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DeedOfOwnership { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validityDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? ValidityDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("siteNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SiteNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sitePart")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SitePart { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("siteType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SiteType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("siteKind")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SiteKind { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("siteSource")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SiteSource { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("homesite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Homesite { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mannerOfUseSite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? MannerOfUseSite { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deedOfOwnSite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DeedOfOwnSite { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("landArea")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? LandArea { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BuildingNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BuildingType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mannerOfUseBuilding")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? MannerOfUseBuilding { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("deedOfOwnBuilding")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DeedOfOwnBuilding { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("townPart")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? TownPart { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flatNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FlatNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flatType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FlatType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mannerOfUseFlat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? MannerOfUseFlat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flatLocationDesc")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? FlatLocationDesc { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mannerOfProtection")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? MannerOfProtection { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sharedPartsRatio")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SharedPartsRatio { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("originalTerritory")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? OriginalTerritory { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pledgedBuilding")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? PledgedBuilding { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pledgedSite")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? PledgedSite { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pledgedFlat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? PledgedFlat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localityId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? LocalityId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sitesIncluded")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? SitesIncluded { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingIncluded")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? BuildingIncluded { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("idHouse")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? IdHouse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstateListId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? RealEstateListId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gpsLatitude")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? GpsLatitude { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gpsLongitude")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? GpsLongitude { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("pledgeBuildingRight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? PledgeBuildingRight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingRightDate")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.DateTime? BuildingRightDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mannerOfUseBuildingRight")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? MannerOfUseBuildingRight { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingPartOf")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BuildingPartOf { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("propertyIncluded")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? PropertyIncluded { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentIdCez")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? DocumentIdCez { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isknSiteId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? IsknSiteId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isknBuildingId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? IsknBuildingId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isknFlatId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? IsknFlatId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isknBuildingRightId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? IsknBuildingRightId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isknFlatNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? IsknFlatNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mannerOfUseFlatText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? MannerOfUseFlatText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mannerOfUseBuildingText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? MannerOfUseBuildingText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("buildingTypeText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BuildingTypeText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("siteTypeText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SiteTypeText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("siteSourceText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SiteSourceText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mannerOfUseBuildingRightText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? MannerOfUseBuildingRightText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mannerOfUseSiteText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? MannerOfUseSiteText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cremRealEstateId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? CremRealEstateId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cremDocumentId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? CremDocumentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("documentSource")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DocumentSource { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? Type { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResultPriceDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("price")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Price { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priceType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PriceType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priceSourceType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PriceSourceType { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RevaluationRequestDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("companyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CompanyCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProductCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("eFormId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long EFormId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dealNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DealNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonTel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonTel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cpm")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Cpm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("icp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Icp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyPerson")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyPerson { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyPhone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyPhone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyFunction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyFunction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bagmanRealEstateTypeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BagmanRealEstateTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstateTypeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RealEstateTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationStreet")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ValuationStreet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("additionalInfo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AdditionalInfo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualPurchasePrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ActualPurchasePrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leased")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Leased { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownershipLimitations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? OwnershipLimitations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budget")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Budget { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? ClientID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientPassId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientPassId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dealType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DealType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productOwner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProductOwner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maturityLoan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? MaturityLoan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purposeLoan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PurposeLoan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("loanAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? LoanAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("specialRequest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SpecialRequest { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insuranceRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? InsuranceRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ValuationFee { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonValuationFeeReason")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonValuationFeeReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ClientPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noteMPSS")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NoteMPSS { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Dts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonDtsArgumentCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonDtsArgumentCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonDtsArgument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonDtsArgument { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completenessDocuments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CompletenessDocuments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isCellarFlat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsCellarFlat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isNonApartmentBuildingFlat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsNonApartmentBuildingFlat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isNotUsableTechnicalState")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsNotUsableTechnicalState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cremRealEstateIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<long>? CremRealEstateIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyAttachments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public LocalSurveyAttachmentsDTO LocalSurveyAttachments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attachmentIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<long>? AttachmentIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("previuosValuationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PreviuosValuationNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RevaluationRequiredResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("revaluationRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool RevaluationRequired { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RiskInfoDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("riskId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long RiskId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("riskText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RiskText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("commentText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CommentText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("recommendationText")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RecommendationText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("impactToPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ImpactToPrice { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class StandardOrderRequestDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("companyCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? CompanyCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProductCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("eFormId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long EFormId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dealNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DealNumber { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("contactPersonTel")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ContactPersonTel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cpm")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Cpm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("icp")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long Icp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyPerson")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyPerson { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyPhone")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyPhone { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyFunction")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyFunction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? LocalSurveyEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bagmanRealEstateTypeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? BagmanRealEstateTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realEstateTypeId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? RealEstateTypeId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationStreet")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ValuationStreet { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("additionalInfo")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? AdditionalInfo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actualPurchasePrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ActualPurchasePrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("leased")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Leased { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownershipLimitations")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? OwnershipLimitations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("budget")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? Budget { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientID")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public long? ClientID { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientName")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientPassId")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientPassId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientEmail")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ClientEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dealType")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? DealType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("productOwner")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? ProductOwner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maturityLoan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? MaturityLoan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("purposeLoan")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PurposeLoan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("loanAmount")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? LoanAmount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("specialRequest")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? SpecialRequest { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("insuranceRequired")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? InsuranceRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("valuationFee")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? ValuationFee { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonValuationFeeReason")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonValuationFeeReason { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientPrice")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public double? ClientPrice { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("noteMPSS")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NoteMPSS { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dts")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? Dts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonDtsArgumentCode")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonDtsArgumentCode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonDtsArgument")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? NonDtsArgument { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("completenessDocuments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? CompletenessDocuments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isCellarFlat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsCellarFlat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isNonApartmentBuildingFlat")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsNonApartmentBuildingFlat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("isNotUsableTechnicalState")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public bool? IsNotUsableTechnicalState { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cremRealEstateIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<long>? CremRealEstateIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localSurveyAttachments")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public LocalSurveyAttachmentsDTO LocalSurveyAttachments { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attachmentIds")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public System.Collections.Generic.ICollection<long>? AttachmentIds { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ZovRequestDTO
    {

        [System.Text.Json.Serialization.JsonPropertyName("previuosValuationNumber")]

        [System.Text.Json.Serialization.JsonIgnore(Condition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault)]   
        public string? PreviuosValuationNumber { get; set; } = default!;

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.0.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName, string? contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string? FileName { get; private set; }

        public string? ContentType { get; private set; }
    }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
#pragma warning restore 3016
#pragma warning restore 8603